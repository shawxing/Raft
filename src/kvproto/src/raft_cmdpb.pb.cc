// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: raft_cmdpb.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "raft_cmdpb.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace raft_cmdpb {

namespace {

const ::google::protobuf::Descriptor* GetRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* PutRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PutRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* PutResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PutResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeleteRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeleteRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeleteResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeleteResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* SnapRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SnapRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SnapResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SnapResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChangePeerRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChangePeerRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChangePeerResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChangePeerResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* SplitRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SplitRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SplitResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SplitResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CompactLogRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CompactLogRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CompactLogResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CompactLogResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* TransferLeaderRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TransferLeaderRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* TransferLeaderResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TransferLeaderResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* VerifyHashRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VerifyHashRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* VerifyHashResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VerifyHashResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* AdminRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AdminRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* AdminResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AdminResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* RegionLeaderRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RegionLeaderRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* RegionLeaderResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RegionLeaderResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* RegionDetailRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RegionDetailRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* RegionDetailResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RegionDetailResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* StatusRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StatusRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* StatusResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StatusResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* RaftRequestHeader_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RaftRequestHeader_reflection_ = NULL;
const ::google::protobuf::Descriptor* RaftResponseHeader_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RaftResponseHeader_reflection_ = NULL;
const ::google::protobuf::Descriptor* RaftCmdRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RaftCmdRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* RaftCmdResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RaftCmdResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CmdType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* AdminCmdType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* StatusCmdType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_raft_5fcmdpb_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_raft_5fcmdpb_2eproto() {
  protobuf_AddDesc_raft_5fcmdpb_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "raft_cmdpb.proto");
  GOOGLE_CHECK(file != NULL);
  GetRequest_descriptor_ = file->message_type(0);
  static const int GetRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRequest, cf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRequest, key_),
  };
  GetRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GetRequest_descriptor_,
      GetRequest::internal_default_instance(),
      GetRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRequest, _has_bits_),
      -1,
      -1,
      sizeof(GetRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRequest, _internal_metadata_));
  GetResponse_descriptor_ = file->message_type(1);
  static const int GetResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetResponse, value_),
  };
  GetResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GetResponse_descriptor_,
      GetResponse::internal_default_instance(),
      GetResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetResponse, _has_bits_),
      -1,
      -1,
      sizeof(GetResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetResponse, _internal_metadata_));
  PutRequest_descriptor_ = file->message_type(2);
  static const int PutRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutRequest, cf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutRequest, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutRequest, value_),
  };
  PutRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PutRequest_descriptor_,
      PutRequest::internal_default_instance(),
      PutRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutRequest, _has_bits_),
      -1,
      -1,
      sizeof(PutRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutRequest, _internal_metadata_));
  PutResponse_descriptor_ = file->message_type(3);
  static const int PutResponse_offsets_[1] = {
  };
  PutResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PutResponse_descriptor_,
      PutResponse::internal_default_instance(),
      PutResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutResponse, _has_bits_),
      -1,
      -1,
      sizeof(PutResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutResponse, _internal_metadata_));
  DeleteRequest_descriptor_ = file->message_type(4);
  static const int DeleteRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteRequest, cf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteRequest, key_),
  };
  DeleteRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DeleteRequest_descriptor_,
      DeleteRequest::internal_default_instance(),
      DeleteRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteRequest, _has_bits_),
      -1,
      -1,
      sizeof(DeleteRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteRequest, _internal_metadata_));
  DeleteResponse_descriptor_ = file->message_type(5);
  static const int DeleteResponse_offsets_[1] = {
  };
  DeleteResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DeleteResponse_descriptor_,
      DeleteResponse::internal_default_instance(),
      DeleteResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteResponse, _has_bits_),
      -1,
      -1,
      sizeof(DeleteResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteResponse, _internal_metadata_));
  SnapRequest_descriptor_ = file->message_type(6);
  static const int SnapRequest_offsets_[1] = {
  };
  SnapRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SnapRequest_descriptor_,
      SnapRequest::internal_default_instance(),
      SnapRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapRequest, _has_bits_),
      -1,
      -1,
      sizeof(SnapRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapRequest, _internal_metadata_));
  SnapResponse_descriptor_ = file->message_type(7);
  static const int SnapResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapResponse, region_),
  };
  SnapResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SnapResponse_descriptor_,
      SnapResponse::internal_default_instance(),
      SnapResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapResponse, _has_bits_),
      -1,
      -1,
      sizeof(SnapResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapResponse, _internal_metadata_));
  Request_descriptor_ = file->message_type(8);
  static const int Request_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, cmd_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, get_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, put_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, delete__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, snap_),
  };
  Request_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Request_descriptor_,
      Request::internal_default_instance(),
      Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, _has_bits_),
      -1,
      -1,
      sizeof(Request),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, _internal_metadata_));
  Response_descriptor_ = file->message_type(9);
  static const int Response_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, cmd_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, get_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, put_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, delete__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, snap_),
  };
  Response_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Response_descriptor_,
      Response::internal_default_instance(),
      Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, _has_bits_),
      -1,
      -1,
      sizeof(Response),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, _internal_metadata_));
  ChangePeerRequest_descriptor_ = file->message_type(10);
  static const int ChangePeerRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangePeerRequest, change_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangePeerRequest, peer_),
  };
  ChangePeerRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ChangePeerRequest_descriptor_,
      ChangePeerRequest::internal_default_instance(),
      ChangePeerRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangePeerRequest, _has_bits_),
      -1,
      -1,
      sizeof(ChangePeerRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangePeerRequest, _internal_metadata_));
  ChangePeerResponse_descriptor_ = file->message_type(11);
  static const int ChangePeerResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangePeerResponse, region_),
  };
  ChangePeerResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ChangePeerResponse_descriptor_,
      ChangePeerResponse::internal_default_instance(),
      ChangePeerResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangePeerResponse, _has_bits_),
      -1,
      -1,
      sizeof(ChangePeerResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangePeerResponse, _internal_metadata_));
  SplitRequest_descriptor_ = file->message_type(12);
  static const int SplitRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SplitRequest, split_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SplitRequest, new_region_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SplitRequest, new_peer_ids_),
  };
  SplitRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SplitRequest_descriptor_,
      SplitRequest::internal_default_instance(),
      SplitRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SplitRequest, _has_bits_),
      -1,
      -1,
      sizeof(SplitRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SplitRequest, _internal_metadata_));
  SplitResponse_descriptor_ = file->message_type(13);
  static const int SplitResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SplitResponse, left_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SplitResponse, right_),
  };
  SplitResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SplitResponse_descriptor_,
      SplitResponse::internal_default_instance(),
      SplitResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SplitResponse, _has_bits_),
      -1,
      -1,
      sizeof(SplitResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SplitResponse, _internal_metadata_));
  CompactLogRequest_descriptor_ = file->message_type(14);
  static const int CompactLogRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompactLogRequest, compact_index_),
  };
  CompactLogRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CompactLogRequest_descriptor_,
      CompactLogRequest::internal_default_instance(),
      CompactLogRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompactLogRequest, _has_bits_),
      -1,
      -1,
      sizeof(CompactLogRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompactLogRequest, _internal_metadata_));
  CompactLogResponse_descriptor_ = file->message_type(15);
  static const int CompactLogResponse_offsets_[1] = {
  };
  CompactLogResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CompactLogResponse_descriptor_,
      CompactLogResponse::internal_default_instance(),
      CompactLogResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompactLogResponse, _has_bits_),
      -1,
      -1,
      sizeof(CompactLogResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompactLogResponse, _internal_metadata_));
  TransferLeaderRequest_descriptor_ = file->message_type(16);
  static const int TransferLeaderRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferLeaderRequest, peer_),
  };
  TransferLeaderRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TransferLeaderRequest_descriptor_,
      TransferLeaderRequest::internal_default_instance(),
      TransferLeaderRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferLeaderRequest, _has_bits_),
      -1,
      -1,
      sizeof(TransferLeaderRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferLeaderRequest, _internal_metadata_));
  TransferLeaderResponse_descriptor_ = file->message_type(17);
  static const int TransferLeaderResponse_offsets_[1] = {
  };
  TransferLeaderResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TransferLeaderResponse_descriptor_,
      TransferLeaderResponse::internal_default_instance(),
      TransferLeaderResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferLeaderResponse, _has_bits_),
      -1,
      -1,
      sizeof(TransferLeaderResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferLeaderResponse, _internal_metadata_));
  VerifyHashRequest_descriptor_ = file->message_type(18);
  static const int VerifyHashRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyHashRequest, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyHashRequest, hash_),
  };
  VerifyHashRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      VerifyHashRequest_descriptor_,
      VerifyHashRequest::internal_default_instance(),
      VerifyHashRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyHashRequest, _has_bits_),
      -1,
      -1,
      sizeof(VerifyHashRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyHashRequest, _internal_metadata_));
  VerifyHashResponse_descriptor_ = file->message_type(19);
  static const int VerifyHashResponse_offsets_[1] = {
  };
  VerifyHashResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      VerifyHashResponse_descriptor_,
      VerifyHashResponse::internal_default_instance(),
      VerifyHashResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyHashResponse, _has_bits_),
      -1,
      -1,
      sizeof(VerifyHashResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyHashResponse, _internal_metadata_));
  AdminRequest_descriptor_ = file->message_type(20);
  static const int AdminRequest_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdminRequest, cmd_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdminRequest, change_peer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdminRequest, split_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdminRequest, compact_log_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdminRequest, transfer_leader_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdminRequest, verify_hash_),
  };
  AdminRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AdminRequest_descriptor_,
      AdminRequest::internal_default_instance(),
      AdminRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdminRequest, _has_bits_),
      -1,
      -1,
      sizeof(AdminRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdminRequest, _internal_metadata_));
  AdminResponse_descriptor_ = file->message_type(21);
  static const int AdminResponse_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdminResponse, cmd_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdminResponse, change_peer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdminResponse, split_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdminResponse, compact_log_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdminResponse, transfer_leader_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdminResponse, verify_hash_),
  };
  AdminResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AdminResponse_descriptor_,
      AdminResponse::internal_default_instance(),
      AdminResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdminResponse, _has_bits_),
      -1,
      -1,
      sizeof(AdminResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdminResponse, _internal_metadata_));
  RegionLeaderRequest_descriptor_ = file->message_type(22);
  static const int RegionLeaderRequest_offsets_[1] = {
  };
  RegionLeaderRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RegionLeaderRequest_descriptor_,
      RegionLeaderRequest::internal_default_instance(),
      RegionLeaderRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionLeaderRequest, _has_bits_),
      -1,
      -1,
      sizeof(RegionLeaderRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionLeaderRequest, _internal_metadata_));
  RegionLeaderResponse_descriptor_ = file->message_type(23);
  static const int RegionLeaderResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionLeaderResponse, leader_),
  };
  RegionLeaderResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RegionLeaderResponse_descriptor_,
      RegionLeaderResponse::internal_default_instance(),
      RegionLeaderResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionLeaderResponse, _has_bits_),
      -1,
      -1,
      sizeof(RegionLeaderResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionLeaderResponse, _internal_metadata_));
  RegionDetailRequest_descriptor_ = file->message_type(24);
  static const int RegionDetailRequest_offsets_[1] = {
  };
  RegionDetailRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RegionDetailRequest_descriptor_,
      RegionDetailRequest::internal_default_instance(),
      RegionDetailRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionDetailRequest, _has_bits_),
      -1,
      -1,
      sizeof(RegionDetailRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionDetailRequest, _internal_metadata_));
  RegionDetailResponse_descriptor_ = file->message_type(25);
  static const int RegionDetailResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionDetailResponse, region_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionDetailResponse, leader_),
  };
  RegionDetailResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RegionDetailResponse_descriptor_,
      RegionDetailResponse::internal_default_instance(),
      RegionDetailResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionDetailResponse, _has_bits_),
      -1,
      -1,
      sizeof(RegionDetailResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionDetailResponse, _internal_metadata_));
  StatusRequest_descriptor_ = file->message_type(26);
  static const int StatusRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusRequest, cmd_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusRequest, region_leader_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusRequest, region_detail_),
  };
  StatusRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      StatusRequest_descriptor_,
      StatusRequest::internal_default_instance(),
      StatusRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusRequest, _has_bits_),
      -1,
      -1,
      sizeof(StatusRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusRequest, _internal_metadata_));
  StatusResponse_descriptor_ = file->message_type(27);
  static const int StatusResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusResponse, cmd_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusResponse, region_leader_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusResponse, region_detail_),
  };
  StatusResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      StatusResponse_descriptor_,
      StatusResponse::internal_default_instance(),
      StatusResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusResponse, _has_bits_),
      -1,
      -1,
      sizeof(StatusResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusResponse, _internal_metadata_));
  RaftRequestHeader_descriptor_ = file->message_type(28);
  static const int RaftRequestHeader_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftRequestHeader, region_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftRequestHeader, peer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftRequestHeader, read_quorum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftRequestHeader, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftRequestHeader, region_epoch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftRequestHeader, term_),
  };
  RaftRequestHeader_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RaftRequestHeader_descriptor_,
      RaftRequestHeader::internal_default_instance(),
      RaftRequestHeader_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftRequestHeader, _has_bits_),
      -1,
      -1,
      sizeof(RaftRequestHeader),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftRequestHeader, _internal_metadata_));
  RaftResponseHeader_descriptor_ = file->message_type(29);
  static const int RaftResponseHeader_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftResponseHeader, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftResponseHeader, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftResponseHeader, current_term_),
  };
  RaftResponseHeader_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RaftResponseHeader_descriptor_,
      RaftResponseHeader::internal_default_instance(),
      RaftResponseHeader_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftResponseHeader, _has_bits_),
      -1,
      -1,
      sizeof(RaftResponseHeader),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftResponseHeader, _internal_metadata_));
  RaftCmdRequest_descriptor_ = file->message_type(30);
  static const int RaftCmdRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftCmdRequest, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftCmdRequest, requests_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftCmdRequest, admin_request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftCmdRequest, status_request_),
  };
  RaftCmdRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RaftCmdRequest_descriptor_,
      RaftCmdRequest::internal_default_instance(),
      RaftCmdRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftCmdRequest, _has_bits_),
      -1,
      -1,
      sizeof(RaftCmdRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftCmdRequest, _internal_metadata_));
  RaftCmdResponse_descriptor_ = file->message_type(31);
  static const int RaftCmdResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftCmdResponse, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftCmdResponse, responses_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftCmdResponse, admin_response_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftCmdResponse, status_response_),
  };
  RaftCmdResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RaftCmdResponse_descriptor_,
      RaftCmdResponse::internal_default_instance(),
      RaftCmdResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftCmdResponse, _has_bits_),
      -1,
      -1,
      sizeof(RaftCmdResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftCmdResponse, _internal_metadata_));
  CmdType_descriptor_ = file->enum_type(0);
  AdminCmdType_descriptor_ = file->enum_type(1);
  StatusCmdType_descriptor_ = file->enum_type(2);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_raft_5fcmdpb_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GetRequest_descriptor_, GetRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GetResponse_descriptor_, GetResponse::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PutRequest_descriptor_, PutRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PutResponse_descriptor_, PutResponse::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DeleteRequest_descriptor_, DeleteRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DeleteResponse_descriptor_, DeleteResponse::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SnapRequest_descriptor_, SnapRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SnapResponse_descriptor_, SnapResponse::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Request_descriptor_, Request::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Response_descriptor_, Response::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ChangePeerRequest_descriptor_, ChangePeerRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ChangePeerResponse_descriptor_, ChangePeerResponse::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SplitRequest_descriptor_, SplitRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SplitResponse_descriptor_, SplitResponse::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CompactLogRequest_descriptor_, CompactLogRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CompactLogResponse_descriptor_, CompactLogResponse::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TransferLeaderRequest_descriptor_, TransferLeaderRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TransferLeaderResponse_descriptor_, TransferLeaderResponse::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      VerifyHashRequest_descriptor_, VerifyHashRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      VerifyHashResponse_descriptor_, VerifyHashResponse::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AdminRequest_descriptor_, AdminRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AdminResponse_descriptor_, AdminResponse::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RegionLeaderRequest_descriptor_, RegionLeaderRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RegionLeaderResponse_descriptor_, RegionLeaderResponse::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RegionDetailRequest_descriptor_, RegionDetailRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RegionDetailResponse_descriptor_, RegionDetailResponse::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      StatusRequest_descriptor_, StatusRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      StatusResponse_descriptor_, StatusResponse::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RaftRequestHeader_descriptor_, RaftRequestHeader::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RaftResponseHeader_descriptor_, RaftResponseHeader::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RaftCmdRequest_descriptor_, RaftCmdRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RaftCmdResponse_descriptor_, RaftCmdResponse::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_raft_5fcmdpb_2eproto() {
  GetRequest_default_instance_.Shutdown();
  delete GetRequest_reflection_;
  GetResponse_default_instance_.Shutdown();
  delete GetResponse_reflection_;
  PutRequest_default_instance_.Shutdown();
  delete PutRequest_reflection_;
  PutResponse_default_instance_.Shutdown();
  delete PutResponse_reflection_;
  DeleteRequest_default_instance_.Shutdown();
  delete DeleteRequest_reflection_;
  DeleteResponse_default_instance_.Shutdown();
  delete DeleteResponse_reflection_;
  SnapRequest_default_instance_.Shutdown();
  delete SnapRequest_reflection_;
  SnapResponse_default_instance_.Shutdown();
  delete SnapResponse_reflection_;
  Request_default_instance_.Shutdown();
  delete Request_reflection_;
  Response_default_instance_.Shutdown();
  delete Response_reflection_;
  ChangePeerRequest_default_instance_.Shutdown();
  delete ChangePeerRequest_reflection_;
  ChangePeerResponse_default_instance_.Shutdown();
  delete ChangePeerResponse_reflection_;
  SplitRequest_default_instance_.Shutdown();
  delete SplitRequest_reflection_;
  SplitResponse_default_instance_.Shutdown();
  delete SplitResponse_reflection_;
  CompactLogRequest_default_instance_.Shutdown();
  delete CompactLogRequest_reflection_;
  CompactLogResponse_default_instance_.Shutdown();
  delete CompactLogResponse_reflection_;
  TransferLeaderRequest_default_instance_.Shutdown();
  delete TransferLeaderRequest_reflection_;
  TransferLeaderResponse_default_instance_.Shutdown();
  delete TransferLeaderResponse_reflection_;
  VerifyHashRequest_default_instance_.Shutdown();
  delete VerifyHashRequest_reflection_;
  VerifyHashResponse_default_instance_.Shutdown();
  delete VerifyHashResponse_reflection_;
  AdminRequest_default_instance_.Shutdown();
  delete AdminRequest_reflection_;
  AdminResponse_default_instance_.Shutdown();
  delete AdminResponse_reflection_;
  RegionLeaderRequest_default_instance_.Shutdown();
  delete RegionLeaderRequest_reflection_;
  RegionLeaderResponse_default_instance_.Shutdown();
  delete RegionLeaderResponse_reflection_;
  RegionDetailRequest_default_instance_.Shutdown();
  delete RegionDetailRequest_reflection_;
  RegionDetailResponse_default_instance_.Shutdown();
  delete RegionDetailResponse_reflection_;
  StatusRequest_default_instance_.Shutdown();
  delete StatusRequest_reflection_;
  StatusResponse_default_instance_.Shutdown();
  delete StatusResponse_reflection_;
  RaftRequestHeader_default_instance_.Shutdown();
  delete RaftRequestHeader_reflection_;
  RaftResponseHeader_default_instance_.Shutdown();
  delete RaftResponseHeader_reflection_;
  RaftCmdRequest_default_instance_.Shutdown();
  delete RaftCmdRequest_reflection_;
  RaftCmdResponse_default_instance_.Shutdown();
  delete RaftCmdResponse_reflection_;
}

void protobuf_InitDefaults_raft_5fcmdpb_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::metapb::protobuf_InitDefaults_metapb_2eproto();
  ::errorpb::protobuf_InitDefaults_errorpb_2eproto();
  ::eraftpb::protobuf_InitDefaults_eraftpb_2eproto();
  ::google::protobuf::internal::GetEmptyString();
  GetRequest_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  GetResponse_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  PutRequest_default_instance_.DefaultConstruct();
  PutResponse_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  DeleteRequest_default_instance_.DefaultConstruct();
  DeleteResponse_default_instance_.DefaultConstruct();
  SnapRequest_default_instance_.DefaultConstruct();
  SnapResponse_default_instance_.DefaultConstruct();
  Request_default_instance_.DefaultConstruct();
  Response_default_instance_.DefaultConstruct();
  ChangePeerRequest_default_instance_.DefaultConstruct();
  ChangePeerResponse_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  SplitRequest_default_instance_.DefaultConstruct();
  SplitResponse_default_instance_.DefaultConstruct();
  CompactLogRequest_default_instance_.DefaultConstruct();
  CompactLogResponse_default_instance_.DefaultConstruct();
  TransferLeaderRequest_default_instance_.DefaultConstruct();
  TransferLeaderResponse_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  VerifyHashRequest_default_instance_.DefaultConstruct();
  VerifyHashResponse_default_instance_.DefaultConstruct();
  AdminRequest_default_instance_.DefaultConstruct();
  AdminResponse_default_instance_.DefaultConstruct();
  RegionLeaderRequest_default_instance_.DefaultConstruct();
  RegionLeaderResponse_default_instance_.DefaultConstruct();
  RegionDetailRequest_default_instance_.DefaultConstruct();
  RegionDetailResponse_default_instance_.DefaultConstruct();
  StatusRequest_default_instance_.DefaultConstruct();
  StatusResponse_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  RaftRequestHeader_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  RaftResponseHeader_default_instance_.DefaultConstruct();
  RaftCmdRequest_default_instance_.DefaultConstruct();
  RaftCmdResponse_default_instance_.DefaultConstruct();
  GetRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  GetResponse_default_instance_.get_mutable()->InitAsDefaultInstance();
  PutRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  PutResponse_default_instance_.get_mutable()->InitAsDefaultInstance();
  DeleteRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  DeleteResponse_default_instance_.get_mutable()->InitAsDefaultInstance();
  SnapRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  SnapResponse_default_instance_.get_mutable()->InitAsDefaultInstance();
  Request_default_instance_.get_mutable()->InitAsDefaultInstance();
  Response_default_instance_.get_mutable()->InitAsDefaultInstance();
  ChangePeerRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  ChangePeerResponse_default_instance_.get_mutable()->InitAsDefaultInstance();
  SplitRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  SplitResponse_default_instance_.get_mutable()->InitAsDefaultInstance();
  CompactLogRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  CompactLogResponse_default_instance_.get_mutable()->InitAsDefaultInstance();
  TransferLeaderRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  TransferLeaderResponse_default_instance_.get_mutable()->InitAsDefaultInstance();
  VerifyHashRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  VerifyHashResponse_default_instance_.get_mutable()->InitAsDefaultInstance();
  AdminRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  AdminResponse_default_instance_.get_mutable()->InitAsDefaultInstance();
  RegionLeaderRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  RegionLeaderResponse_default_instance_.get_mutable()->InitAsDefaultInstance();
  RegionDetailRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  RegionDetailResponse_default_instance_.get_mutable()->InitAsDefaultInstance();
  StatusRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  StatusResponse_default_instance_.get_mutable()->InitAsDefaultInstance();
  RaftRequestHeader_default_instance_.get_mutable()->InitAsDefaultInstance();
  RaftResponseHeader_default_instance_.get_mutable()->InitAsDefaultInstance();
  RaftCmdRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  RaftCmdResponse_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_raft_5fcmdpb_2eproto_once_);
void protobuf_InitDefaults_raft_5fcmdpb_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_raft_5fcmdpb_2eproto_once_,
                 &protobuf_InitDefaults_raft_5fcmdpb_2eproto_impl);
}
void protobuf_AddDesc_raft_5fcmdpb_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_raft_5fcmdpb_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020raft_cmdpb.proto\022\nraft_cmdpb\032\014metapb.p"
    "roto\032\rerrorpb.proto\032\reraftpb.proto\"%\n\nGe"
    "tRequest\022\n\n\002cf\030\001 \001(\t\022\013\n\003key\030\002 \001(\014\"\034\n\013Get"
    "Response\022\r\n\005value\030\001 \001(\014\"4\n\nPutRequest\022\n\n"
    "\002cf\030\001 \001(\t\022\013\n\003key\030\002 \001(\014\022\r\n\005value\030\003 \001(\014\"\r\n"
    "\013PutResponse\"(\n\rDeleteRequest\022\n\n\002cf\030\001 \001("
    "\t\022\013\n\003key\030\002 \001(\014\"\020\n\016DeleteResponse\"\r\n\013Snap"
    "Request\".\n\014SnapResponse\022\036\n\006region\030\001 \001(\0132"
    "\016.metapb.Region\"\314\001\n\007Request\022%\n\010cmd_type\030"
    "\001 \001(\0162\023.raft_cmdpb.CmdType\022#\n\003get\030\002 \001(\0132"
    "\026.raft_cmdpb.GetRequest\022#\n\003put\030\004 \001(\0132\026.r"
    "aft_cmdpb.PutRequest\022)\n\006delete\030\005 \001(\0132\031.r"
    "aft_cmdpb.DeleteRequest\022%\n\004snap\030\006 \001(\0132\027."
    "raft_cmdpb.SnapRequest\"\321\001\n\010Response\022%\n\010c"
    "md_type\030\001 \001(\0162\023.raft_cmdpb.CmdType\022$\n\003ge"
    "t\030\002 \001(\0132\027.raft_cmdpb.GetResponse\022$\n\003put\030"
    "\004 \001(\0132\027.raft_cmdpb.PutResponse\022*\n\006delete"
    "\030\005 \001(\0132\032.raft_cmdpb.DeleteResponse\022&\n\004sn"
    "ap\030\006 \001(\0132\030.raft_cmdpb.SnapResponse\"]\n\021Ch"
    "angePeerRequest\022,\n\013change_type\030\001 \001(\0162\027.e"
    "raftpb.ConfChangeType\022\032\n\004peer\030\002 \001(\0132\014.me"
    "tapb.Peer\"4\n\022ChangePeerResponse\022\036\n\006regio"
    "n\030\001 \001(\0132\016.metapb.Region\"N\n\014SplitRequest\022"
    "\021\n\tsplit_key\030\001 \001(\014\022\025\n\rnew_region_id\030\002 \001("
    "\004\022\024\n\014new_peer_ids\030\003 \003(\004\"L\n\rSplitResponse"
    "\022\034\n\004left\030\001 \001(\0132\016.metapb.Region\022\035\n\005right\030"
    "\002 \001(\0132\016.metapb.Region\"*\n\021CompactLogReque"
    "st\022\025\n\rcompact_index\030\001 \001(\004\"\024\n\022CompactLogR"
    "esponse\"3\n\025TransferLeaderRequest\022\032\n\004peer"
    "\030\001 \001(\0132\014.metapb.Peer\"\030\n\026TransferLeaderRe"
    "sponse\"0\n\021VerifyHashRequest\022\r\n\005index\030\001 \001"
    "(\004\022\014\n\004hash\030\002 \001(\014\"\024\n\022VerifyHashResponse\"\273"
    "\002\n\014AdminRequest\022*\n\010cmd_type\030\001 \001(\0162\030.raft"
    "_cmdpb.AdminCmdType\0222\n\013change_peer\030\002 \001(\013"
    "2\035.raft_cmdpb.ChangePeerRequest\022\'\n\005split"
    "\030\003 \001(\0132\030.raft_cmdpb.SplitRequest\0222\n\013comp"
    "act_log\030\004 \001(\0132\035.raft_cmdpb.CompactLogReq"
    "uest\022:\n\017transfer_leader\030\005 \001(\0132!.raft_cmd"
    "pb.TransferLeaderRequest\0222\n\013verify_hash\030"
    "\006 \001(\0132\035.raft_cmdpb.VerifyHashRequest\"\301\002\n"
    "\rAdminResponse\022*\n\010cmd_type\030\001 \001(\0162\030.raft_"
    "cmdpb.AdminCmdType\0223\n\013change_peer\030\002 \001(\0132"
    "\036.raft_cmdpb.ChangePeerResponse\022(\n\005split"
    "\030\003 \001(\0132\031.raft_cmdpb.SplitResponse\0223\n\013com"
    "pact_log\030\004 \001(\0132\036.raft_cmdpb.CompactLogRe"
    "sponse\022;\n\017transfer_leader\030\005 \001(\0132\".raft_c"
    "mdpb.TransferLeaderResponse\0223\n\013verify_ha"
    "sh\030\006 \001(\0132\036.raft_cmdpb.VerifyHashResponse"
    "\"\025\n\023RegionLeaderRequest\"4\n\024RegionLeaderR"
    "esponse\022\034\n\006leader\030\001 \001(\0132\014.metapb.Peer\"\025\n"
    "\023RegionDetailRequest\"T\n\024RegionDetailResp"
    "onse\022\036\n\006region\030\001 \001(\0132\016.metapb.Region\022\034\n\006"
    "leader\030\002 \001(\0132\014.metapb.Peer\"\254\001\n\rStatusReq"
    "uest\022+\n\010cmd_type\030\001 \001(\0162\031.raft_cmdpb.Stat"
    "usCmdType\0226\n\rregion_leader\030\002 \001(\0132\037.raft_"
    "cmdpb.RegionLeaderRequest\0226\n\rregion_deta"
    "il\030\003 \001(\0132\037.raft_cmdpb.RegionDetailReques"
    "t\"\257\001\n\016StatusResponse\022+\n\010cmd_type\030\001 \001(\0162\031"
    ".raft_cmdpb.StatusCmdType\0227\n\rregion_lead"
    "er\030\002 \001(\0132 .raft_cmdpb.RegionLeaderRespon"
    "se\0227\n\rregion_detail\030\003 \001(\0132 .raft_cmdpb.R"
    "egionDetailResponse\"\236\001\n\021RaftRequestHeade"
    "r\022\021\n\tregion_id\030\001 \001(\004\022\032\n\004peer\030\002 \001(\0132\014.met"
    "apb.Peer\022\023\n\013read_quorum\030\003 \001(\010\022\014\n\004uuid\030\004 "
    "\001(\014\022)\n\014region_epoch\030\005 \001(\0132\023.metapb.Regio"
    "nEpoch\022\014\n\004term\030\006 \001(\004\"W\n\022RaftResponseHead"
    "er\022\035\n\005error\030\001 \001(\0132\016.errorpb.Error\022\014\n\004uui"
    "d\030\002 \001(\014\022\024\n\014current_term\030\003 \001(\004\"\312\001\n\016RaftCm"
    "dRequest\022-\n\006header\030\001 \001(\0132\035.raft_cmdpb.Ra"
    "ftRequestHeader\022%\n\010requests\030\002 \003(\0132\023.raft"
    "_cmdpb.Request\022/\n\radmin_request\030\003 \001(\0132\030."
    "raft_cmdpb.AdminRequest\0221\n\016status_reques"
    "t\030\004 \001(\0132\031.raft_cmdpb.StatusRequest\"\322\001\n\017R"
    "aftCmdResponse\022.\n\006header\030\001 \001(\0132\036.raft_cm"
    "dpb.RaftResponseHeader\022\'\n\tresponses\030\002 \003("
    "\0132\024.raft_cmdpb.Response\0221\n\016admin_respons"
    "e\030\003 \001(\0132\031.raft_cmdpb.AdminResponse\0223\n\017st"
    "atus_response\030\004 \001(\0132\032.raft_cmdpb.StatusR"
    "esponse*>\n\007CmdType\022\013\n\007Invalid\020\000\022\007\n\003Get\020\001"
    "\022\007\n\003Put\020\003\022\n\n\006Delete\020\004\022\010\n\004Snap\020\005*\200\001\n\014Admi"
    "nCmdType\022\020\n\014InvalidAdmin\020\000\022\016\n\nChangePeer"
    "\020\001\022\t\n\005Split\020\002\022\016\n\nCompactLog\020\003\022\022\n\016Transfe"
    "rLeader\020\004\022\017\n\013ComputeHash\020\005\022\016\n\nVerifyHash"
    "\020\006*F\n\rStatusCmdType\022\021\n\rInvalidStatus\020\000\022\020"
    "\n\014RegionLeader\020\001\022\020\n\014RegionDetail\020\002", 3394);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "raft_cmdpb.proto", &protobuf_RegisterTypes);
  ::metapb::protobuf_AddDesc_metapb_2eproto();
  ::errorpb::protobuf_AddDesc_errorpb_2eproto();
  ::eraftpb::protobuf_AddDesc_eraftpb_2eproto();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_raft_5fcmdpb_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_raft_5fcmdpb_2eproto_once_);
void protobuf_AddDesc_raft_5fcmdpb_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_raft_5fcmdpb_2eproto_once_,
                 &protobuf_AddDesc_raft_5fcmdpb_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_raft_5fcmdpb_2eproto {
  StaticDescriptorInitializer_raft_5fcmdpb_2eproto() {
    protobuf_AddDesc_raft_5fcmdpb_2eproto();
  }
} static_descriptor_initializer_raft_5fcmdpb_2eproto_;
const ::google::protobuf::EnumDescriptor* CmdType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CmdType_descriptor_;
}
bool CmdType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* AdminCmdType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AdminCmdType_descriptor_;
}
bool AdminCmdType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* StatusCmdType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StatusCmdType_descriptor_;
}
bool StatusCmdType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetRequest::kCfFieldNumber;
const int GetRequest::kKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetRequest::GetRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_raft_5fcmdpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_cmdpb.GetRequest)
}

void GetRequest::InitAsDefaultInstance() {
}

GetRequest::GetRequest(const GetRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:raft_cmdpb.GetRequest)
}

void GetRequest::SharedCtor() {
  _cached_size_ = 0;
  cf_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

GetRequest::~GetRequest() {
  // @@protoc_insertion_point(destructor:raft_cmdpb.GetRequest)
  SharedDtor();
}

void GetRequest::SharedDtor() {
  cf_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GetRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetRequest_descriptor_;
}

const GetRequest& GetRequest::default_instance() {
  protobuf_InitDefaults_raft_5fcmdpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<GetRequest> GetRequest_default_instance_;

GetRequest* GetRequest::New(::google::protobuf::Arena* arena) const {
  GetRequest* n = new GetRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_cmdpb.GetRequest)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_cf()) {
      cf_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_key()) {
      key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool GetRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_cmdpb.GetRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string cf = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cf()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cf().data(), this->cf().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "raft_cmdpb.GetRequest.cf");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_key;
        break;
      }

      // optional bytes key = 2;
      case 2: {
        if (tag == 18) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft_cmdpb.GetRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_cmdpb.GetRequest)
  return false;
#undef DO_
}

void GetRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_cmdpb.GetRequest)
  // optional string cf = 1;
  if (has_cf()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cf().data(), this->cf().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "raft_cmdpb.GetRequest.cf");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->cf(), output);
  }

  // optional bytes key = 2;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->key(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:raft_cmdpb.GetRequest)
}

::google::protobuf::uint8* GetRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raft_cmdpb.GetRequest)
  // optional string cf = 1;
  if (has_cf()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cf().data(), this->cf().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "raft_cmdpb.GetRequest.cf");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->cf(), target);
  }

  // optional bytes key = 2;
  if (has_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->key(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft_cmdpb.GetRequest)
  return target;
}

size_t GetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_cmdpb.GetRequest)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional string cf = 1;
    if (has_cf()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cf());
    }

    // optional bytes key = 2;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->key());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_cmdpb.GetRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const GetRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_cmdpb.GetRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_cmdpb.GetRequest)
    UnsafeMergeFrom(*source);
  }
}

void GetRequest::MergeFrom(const GetRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_cmdpb.GetRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void GetRequest::UnsafeMergeFrom(const GetRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cf()) {
      set_has_cf();
      cf_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cf_);
    }
    if (from.has_key()) {
      set_has_key();
      key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void GetRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_cmdpb.GetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetRequest::CopyFrom(const GetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_cmdpb.GetRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool GetRequest::IsInitialized() const {

  return true;
}

void GetRequest::Swap(GetRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetRequest::InternalSwap(GetRequest* other) {
  cf_.Swap(&other->cf_);
  key_.Swap(&other->key_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetRequest_descriptor_;
  metadata.reflection = GetRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetRequest

// optional string cf = 1;
bool GetRequest::has_cf() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GetRequest::set_has_cf() {
  _has_bits_[0] |= 0x00000001u;
}
void GetRequest::clear_has_cf() {
  _has_bits_[0] &= ~0x00000001u;
}
void GetRequest::clear_cf() {
  cf_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_cf();
}
const ::std::string& GetRequest::cf() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.GetRequest.cf)
  return cf_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetRequest::set_cf(const ::std::string& value) {
  set_has_cf();
  cf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raft_cmdpb.GetRequest.cf)
}
void GetRequest::set_cf(const char* value) {
  set_has_cf();
  cf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raft_cmdpb.GetRequest.cf)
}
void GetRequest::set_cf(const char* value, size_t size) {
  set_has_cf();
  cf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raft_cmdpb.GetRequest.cf)
}
::std::string* GetRequest::mutable_cf() {
  set_has_cf();
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.GetRequest.cf)
  return cf_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetRequest::release_cf() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.GetRequest.cf)
  clear_has_cf();
  return cf_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetRequest::set_allocated_cf(::std::string* cf) {
  if (cf != NULL) {
    set_has_cf();
  } else {
    clear_has_cf();
  }
  cf_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cf);
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.GetRequest.cf)
}

// optional bytes key = 2;
bool GetRequest::has_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GetRequest::set_has_key() {
  _has_bits_[0] |= 0x00000002u;
}
void GetRequest::clear_has_key() {
  _has_bits_[0] &= ~0x00000002u;
}
void GetRequest::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
const ::std::string& GetRequest::key() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.GetRequest.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetRequest::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raft_cmdpb.GetRequest.key)
}
void GetRequest::set_key(const char* value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raft_cmdpb.GetRequest.key)
}
void GetRequest::set_key(const void* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raft_cmdpb.GetRequest.key)
}
::std::string* GetRequest::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.GetRequest.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetRequest::release_key() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.GetRequest.key)
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetRequest::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.GetRequest.key)
}

inline const GetRequest* GetRequest::internal_default_instance() {
  return &GetRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetResponse::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetResponse::GetResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_raft_5fcmdpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_cmdpb.GetResponse)
}

void GetResponse::InitAsDefaultInstance() {
}

GetResponse::GetResponse(const GetResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:raft_cmdpb.GetResponse)
}

void GetResponse::SharedCtor() {
  _cached_size_ = 0;
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

GetResponse::~GetResponse() {
  // @@protoc_insertion_point(destructor:raft_cmdpb.GetResponse)
  SharedDtor();
}

void GetResponse::SharedDtor() {
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GetResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetResponse_descriptor_;
}

const GetResponse& GetResponse::default_instance() {
  protobuf_InitDefaults_raft_5fcmdpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<GetResponse> GetResponse_default_instance_;

GetResponse* GetResponse::New(::google::protobuf::Arena* arena) const {
  GetResponse* n = new GetResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_cmdpb.GetResponse)
  if (has_value()) {
    value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool GetResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_cmdpb.GetResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes value = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft_cmdpb.GetResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_cmdpb.GetResponse)
  return false;
#undef DO_
}

void GetResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_cmdpb.GetResponse)
  // optional bytes value = 1;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:raft_cmdpb.GetResponse)
}

::google::protobuf::uint8* GetResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raft_cmdpb.GetResponse)
  // optional bytes value = 1;
  if (has_value()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft_cmdpb.GetResponse)
  return target;
}

size_t GetResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_cmdpb.GetResponse)
  size_t total_size = 0;

  // optional bytes value = 1;
  if (has_value()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->value());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_cmdpb.GetResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const GetResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_cmdpb.GetResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_cmdpb.GetResponse)
    UnsafeMergeFrom(*source);
  }
}

void GetResponse::MergeFrom(const GetResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_cmdpb.GetResponse)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void GetResponse::UnsafeMergeFrom(const GetResponse& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_value()) {
      set_has_value();
      value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void GetResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_cmdpb.GetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetResponse::CopyFrom(const GetResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_cmdpb.GetResponse)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool GetResponse::IsInitialized() const {

  return true;
}

void GetResponse::Swap(GetResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetResponse::InternalSwap(GetResponse* other) {
  value_.Swap(&other->value_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetResponse_descriptor_;
  metadata.reflection = GetResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetResponse

// optional bytes value = 1;
bool GetResponse::has_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GetResponse::set_has_value() {
  _has_bits_[0] |= 0x00000001u;
}
void GetResponse::clear_has_value() {
  _has_bits_[0] &= ~0x00000001u;
}
void GetResponse::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}
const ::std::string& GetResponse::value() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.GetResponse.value)
  return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetResponse::set_value(const ::std::string& value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raft_cmdpb.GetResponse.value)
}
void GetResponse::set_value(const char* value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raft_cmdpb.GetResponse.value)
}
void GetResponse::set_value(const void* value, size_t size) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raft_cmdpb.GetResponse.value)
}
::std::string* GetResponse::mutable_value() {
  set_has_value();
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.GetResponse.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetResponse::release_value() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.GetResponse.value)
  clear_has_value();
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetResponse::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    set_has_value();
  } else {
    clear_has_value();
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.GetResponse.value)
}

inline const GetResponse* GetResponse::internal_default_instance() {
  return &GetResponse_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PutRequest::kCfFieldNumber;
const int PutRequest::kKeyFieldNumber;
const int PutRequest::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PutRequest::PutRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_raft_5fcmdpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_cmdpb.PutRequest)
}

void PutRequest::InitAsDefaultInstance() {
}

PutRequest::PutRequest(const PutRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:raft_cmdpb.PutRequest)
}

void PutRequest::SharedCtor() {
  _cached_size_ = 0;
  cf_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

PutRequest::~PutRequest() {
  // @@protoc_insertion_point(destructor:raft_cmdpb.PutRequest)
  SharedDtor();
}

void PutRequest::SharedDtor() {
  cf_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PutRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PutRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PutRequest_descriptor_;
}

const PutRequest& PutRequest::default_instance() {
  protobuf_InitDefaults_raft_5fcmdpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<PutRequest> PutRequest_default_instance_;

PutRequest* PutRequest::New(::google::protobuf::Arena* arena) const {
  PutRequest* n = new PutRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PutRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_cmdpb.PutRequest)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_cf()) {
      cf_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_key()) {
      key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_value()) {
      value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool PutRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_cmdpb.PutRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string cf = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cf()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cf().data(), this->cf().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "raft_cmdpb.PutRequest.cf");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_key;
        break;
      }

      // optional bytes key = 2;
      case 2: {
        if (tag == 18) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_value;
        break;
      }

      // optional bytes value = 3;
      case 3: {
        if (tag == 26) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft_cmdpb.PutRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_cmdpb.PutRequest)
  return false;
#undef DO_
}

void PutRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_cmdpb.PutRequest)
  // optional string cf = 1;
  if (has_cf()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cf().data(), this->cf().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "raft_cmdpb.PutRequest.cf");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->cf(), output);
  }

  // optional bytes key = 2;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->key(), output);
  }

  // optional bytes value = 3;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:raft_cmdpb.PutRequest)
}

::google::protobuf::uint8* PutRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raft_cmdpb.PutRequest)
  // optional string cf = 1;
  if (has_cf()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cf().data(), this->cf().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "raft_cmdpb.PutRequest.cf");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->cf(), target);
  }

  // optional bytes key = 2;
  if (has_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->key(), target);
  }

  // optional bytes value = 3;
  if (has_value()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft_cmdpb.PutRequest)
  return target;
}

size_t PutRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_cmdpb.PutRequest)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional string cf = 1;
    if (has_cf()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cf());
    }

    // optional bytes key = 2;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->key());
    }

    // optional bytes value = 3;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->value());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PutRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_cmdpb.PutRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PutRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PutRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_cmdpb.PutRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_cmdpb.PutRequest)
    UnsafeMergeFrom(*source);
  }
}

void PutRequest::MergeFrom(const PutRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_cmdpb.PutRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void PutRequest::UnsafeMergeFrom(const PutRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cf()) {
      set_has_cf();
      cf_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cf_);
    }
    if (from.has_key()) {
      set_has_key();
      key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
    }
    if (from.has_value()) {
      set_has_value();
      value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void PutRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_cmdpb.PutRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PutRequest::CopyFrom(const PutRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_cmdpb.PutRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool PutRequest::IsInitialized() const {

  return true;
}

void PutRequest::Swap(PutRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PutRequest::InternalSwap(PutRequest* other) {
  cf_.Swap(&other->cf_);
  key_.Swap(&other->key_);
  value_.Swap(&other->value_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PutRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PutRequest_descriptor_;
  metadata.reflection = PutRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PutRequest

// optional string cf = 1;
bool PutRequest::has_cf() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PutRequest::set_has_cf() {
  _has_bits_[0] |= 0x00000001u;
}
void PutRequest::clear_has_cf() {
  _has_bits_[0] &= ~0x00000001u;
}
void PutRequest::clear_cf() {
  cf_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_cf();
}
const ::std::string& PutRequest::cf() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.PutRequest.cf)
  return cf_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PutRequest::set_cf(const ::std::string& value) {
  set_has_cf();
  cf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raft_cmdpb.PutRequest.cf)
}
void PutRequest::set_cf(const char* value) {
  set_has_cf();
  cf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raft_cmdpb.PutRequest.cf)
}
void PutRequest::set_cf(const char* value, size_t size) {
  set_has_cf();
  cf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raft_cmdpb.PutRequest.cf)
}
::std::string* PutRequest::mutable_cf() {
  set_has_cf();
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.PutRequest.cf)
  return cf_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PutRequest::release_cf() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.PutRequest.cf)
  clear_has_cf();
  return cf_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PutRequest::set_allocated_cf(::std::string* cf) {
  if (cf != NULL) {
    set_has_cf();
  } else {
    clear_has_cf();
  }
  cf_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cf);
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.PutRequest.cf)
}

// optional bytes key = 2;
bool PutRequest::has_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PutRequest::set_has_key() {
  _has_bits_[0] |= 0x00000002u;
}
void PutRequest::clear_has_key() {
  _has_bits_[0] &= ~0x00000002u;
}
void PutRequest::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
const ::std::string& PutRequest::key() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.PutRequest.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PutRequest::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raft_cmdpb.PutRequest.key)
}
void PutRequest::set_key(const char* value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raft_cmdpb.PutRequest.key)
}
void PutRequest::set_key(const void* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raft_cmdpb.PutRequest.key)
}
::std::string* PutRequest::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.PutRequest.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PutRequest::release_key() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.PutRequest.key)
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PutRequest::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.PutRequest.key)
}

// optional bytes value = 3;
bool PutRequest::has_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PutRequest::set_has_value() {
  _has_bits_[0] |= 0x00000004u;
}
void PutRequest::clear_has_value() {
  _has_bits_[0] &= ~0x00000004u;
}
void PutRequest::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}
const ::std::string& PutRequest::value() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.PutRequest.value)
  return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PutRequest::set_value(const ::std::string& value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raft_cmdpb.PutRequest.value)
}
void PutRequest::set_value(const char* value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raft_cmdpb.PutRequest.value)
}
void PutRequest::set_value(const void* value, size_t size) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raft_cmdpb.PutRequest.value)
}
::std::string* PutRequest::mutable_value() {
  set_has_value();
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.PutRequest.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PutRequest::release_value() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.PutRequest.value)
  clear_has_value();
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PutRequest::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    set_has_value();
  } else {
    clear_has_value();
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.PutRequest.value)
}

inline const PutRequest* PutRequest::internal_default_instance() {
  return &PutRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PutResponse::PutResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_raft_5fcmdpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_cmdpb.PutResponse)
}

void PutResponse::InitAsDefaultInstance() {
}

PutResponse::PutResponse(const PutResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:raft_cmdpb.PutResponse)
}

void PutResponse::SharedCtor() {
  _cached_size_ = 0;
}

PutResponse::~PutResponse() {
  // @@protoc_insertion_point(destructor:raft_cmdpb.PutResponse)
  SharedDtor();
}

void PutResponse::SharedDtor() {
}

void PutResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PutResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PutResponse_descriptor_;
}

const PutResponse& PutResponse::default_instance() {
  protobuf_InitDefaults_raft_5fcmdpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<PutResponse> PutResponse_default_instance_;

PutResponse* PutResponse::New(::google::protobuf::Arena* arena) const {
  PutResponse* n = new PutResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PutResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_cmdpb.PutResponse)
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool PutResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_cmdpb.PutResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:raft_cmdpb.PutResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_cmdpb.PutResponse)
  return false;
#undef DO_
}

void PutResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_cmdpb.PutResponse)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:raft_cmdpb.PutResponse)
}

::google::protobuf::uint8* PutResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raft_cmdpb.PutResponse)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft_cmdpb.PutResponse)
  return target;
}

size_t PutResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_cmdpb.PutResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PutResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_cmdpb.PutResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PutResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PutResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_cmdpb.PutResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_cmdpb.PutResponse)
    UnsafeMergeFrom(*source);
  }
}

void PutResponse::MergeFrom(const PutResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_cmdpb.PutResponse)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void PutResponse::UnsafeMergeFrom(const PutResponse& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void PutResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_cmdpb.PutResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PutResponse::CopyFrom(const PutResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_cmdpb.PutResponse)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool PutResponse::IsInitialized() const {

  return true;
}

void PutResponse::Swap(PutResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PutResponse::InternalSwap(PutResponse* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PutResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PutResponse_descriptor_;
  metadata.reflection = PutResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PutResponse

inline const PutResponse* PutResponse::internal_default_instance() {
  return &PutResponse_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeleteRequest::kCfFieldNumber;
const int DeleteRequest::kKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeleteRequest::DeleteRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_raft_5fcmdpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_cmdpb.DeleteRequest)
}

void DeleteRequest::InitAsDefaultInstance() {
}

DeleteRequest::DeleteRequest(const DeleteRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:raft_cmdpb.DeleteRequest)
}

void DeleteRequest::SharedCtor() {
  _cached_size_ = 0;
  cf_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

DeleteRequest::~DeleteRequest() {
  // @@protoc_insertion_point(destructor:raft_cmdpb.DeleteRequest)
  SharedDtor();
}

void DeleteRequest::SharedDtor() {
  cf_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DeleteRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeleteRequest_descriptor_;
}

const DeleteRequest& DeleteRequest::default_instance() {
  protobuf_InitDefaults_raft_5fcmdpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<DeleteRequest> DeleteRequest_default_instance_;

DeleteRequest* DeleteRequest::New(::google::protobuf::Arena* arena) const {
  DeleteRequest* n = new DeleteRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DeleteRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_cmdpb.DeleteRequest)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_cf()) {
      cf_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_key()) {
      key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool DeleteRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_cmdpb.DeleteRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string cf = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cf()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cf().data(), this->cf().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "raft_cmdpb.DeleteRequest.cf");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_key;
        break;
      }

      // optional bytes key = 2;
      case 2: {
        if (tag == 18) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft_cmdpb.DeleteRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_cmdpb.DeleteRequest)
  return false;
#undef DO_
}

void DeleteRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_cmdpb.DeleteRequest)
  // optional string cf = 1;
  if (has_cf()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cf().data(), this->cf().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "raft_cmdpb.DeleteRequest.cf");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->cf(), output);
  }

  // optional bytes key = 2;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->key(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:raft_cmdpb.DeleteRequest)
}

::google::protobuf::uint8* DeleteRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raft_cmdpb.DeleteRequest)
  // optional string cf = 1;
  if (has_cf()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cf().data(), this->cf().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "raft_cmdpb.DeleteRequest.cf");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->cf(), target);
  }

  // optional bytes key = 2;
  if (has_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->key(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft_cmdpb.DeleteRequest)
  return target;
}

size_t DeleteRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_cmdpb.DeleteRequest)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional string cf = 1;
    if (has_cf()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cf());
    }

    // optional bytes key = 2;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->key());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_cmdpb.DeleteRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const DeleteRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DeleteRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_cmdpb.DeleteRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_cmdpb.DeleteRequest)
    UnsafeMergeFrom(*source);
  }
}

void DeleteRequest::MergeFrom(const DeleteRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_cmdpb.DeleteRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void DeleteRequest::UnsafeMergeFrom(const DeleteRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cf()) {
      set_has_cf();
      cf_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cf_);
    }
    if (from.has_key()) {
      set_has_key();
      key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void DeleteRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_cmdpb.DeleteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteRequest::CopyFrom(const DeleteRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_cmdpb.DeleteRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool DeleteRequest::IsInitialized() const {

  return true;
}

void DeleteRequest::Swap(DeleteRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeleteRequest::InternalSwap(DeleteRequest* other) {
  cf_.Swap(&other->cf_);
  key_.Swap(&other->key_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DeleteRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeleteRequest_descriptor_;
  metadata.reflection = DeleteRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DeleteRequest

// optional string cf = 1;
bool DeleteRequest::has_cf() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DeleteRequest::set_has_cf() {
  _has_bits_[0] |= 0x00000001u;
}
void DeleteRequest::clear_has_cf() {
  _has_bits_[0] &= ~0x00000001u;
}
void DeleteRequest::clear_cf() {
  cf_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_cf();
}
const ::std::string& DeleteRequest::cf() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.DeleteRequest.cf)
  return cf_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeleteRequest::set_cf(const ::std::string& value) {
  set_has_cf();
  cf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raft_cmdpb.DeleteRequest.cf)
}
void DeleteRequest::set_cf(const char* value) {
  set_has_cf();
  cf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raft_cmdpb.DeleteRequest.cf)
}
void DeleteRequest::set_cf(const char* value, size_t size) {
  set_has_cf();
  cf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raft_cmdpb.DeleteRequest.cf)
}
::std::string* DeleteRequest::mutable_cf() {
  set_has_cf();
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.DeleteRequest.cf)
  return cf_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DeleteRequest::release_cf() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.DeleteRequest.cf)
  clear_has_cf();
  return cf_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeleteRequest::set_allocated_cf(::std::string* cf) {
  if (cf != NULL) {
    set_has_cf();
  } else {
    clear_has_cf();
  }
  cf_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cf);
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.DeleteRequest.cf)
}

// optional bytes key = 2;
bool DeleteRequest::has_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DeleteRequest::set_has_key() {
  _has_bits_[0] |= 0x00000002u;
}
void DeleteRequest::clear_has_key() {
  _has_bits_[0] &= ~0x00000002u;
}
void DeleteRequest::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
const ::std::string& DeleteRequest::key() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.DeleteRequest.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeleteRequest::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raft_cmdpb.DeleteRequest.key)
}
void DeleteRequest::set_key(const char* value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raft_cmdpb.DeleteRequest.key)
}
void DeleteRequest::set_key(const void* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raft_cmdpb.DeleteRequest.key)
}
::std::string* DeleteRequest::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.DeleteRequest.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DeleteRequest::release_key() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.DeleteRequest.key)
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeleteRequest::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.DeleteRequest.key)
}

inline const DeleteRequest* DeleteRequest::internal_default_instance() {
  return &DeleteRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeleteResponse::DeleteResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_raft_5fcmdpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_cmdpb.DeleteResponse)
}

void DeleteResponse::InitAsDefaultInstance() {
}

DeleteResponse::DeleteResponse(const DeleteResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:raft_cmdpb.DeleteResponse)
}

void DeleteResponse::SharedCtor() {
  _cached_size_ = 0;
}

DeleteResponse::~DeleteResponse() {
  // @@protoc_insertion_point(destructor:raft_cmdpb.DeleteResponse)
  SharedDtor();
}

void DeleteResponse::SharedDtor() {
}

void DeleteResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeleteResponse_descriptor_;
}

const DeleteResponse& DeleteResponse::default_instance() {
  protobuf_InitDefaults_raft_5fcmdpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<DeleteResponse> DeleteResponse_default_instance_;

DeleteResponse* DeleteResponse::New(::google::protobuf::Arena* arena) const {
  DeleteResponse* n = new DeleteResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DeleteResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_cmdpb.DeleteResponse)
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool DeleteResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_cmdpb.DeleteResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:raft_cmdpb.DeleteResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_cmdpb.DeleteResponse)
  return false;
#undef DO_
}

void DeleteResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_cmdpb.DeleteResponse)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:raft_cmdpb.DeleteResponse)
}

::google::protobuf::uint8* DeleteResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raft_cmdpb.DeleteResponse)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft_cmdpb.DeleteResponse)
  return target;
}

size_t DeleteResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_cmdpb.DeleteResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_cmdpb.DeleteResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const DeleteResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DeleteResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_cmdpb.DeleteResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_cmdpb.DeleteResponse)
    UnsafeMergeFrom(*source);
  }
}

void DeleteResponse::MergeFrom(const DeleteResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_cmdpb.DeleteResponse)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void DeleteResponse::UnsafeMergeFrom(const DeleteResponse& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void DeleteResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_cmdpb.DeleteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteResponse::CopyFrom(const DeleteResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_cmdpb.DeleteResponse)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool DeleteResponse::IsInitialized() const {

  return true;
}

void DeleteResponse::Swap(DeleteResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeleteResponse::InternalSwap(DeleteResponse* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DeleteResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeleteResponse_descriptor_;
  metadata.reflection = DeleteResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DeleteResponse

inline const DeleteResponse* DeleteResponse::internal_default_instance() {
  return &DeleteResponse_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SnapRequest::SnapRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_raft_5fcmdpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_cmdpb.SnapRequest)
}

void SnapRequest::InitAsDefaultInstance() {
}

SnapRequest::SnapRequest(const SnapRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:raft_cmdpb.SnapRequest)
}

void SnapRequest::SharedCtor() {
  _cached_size_ = 0;
}

SnapRequest::~SnapRequest() {
  // @@protoc_insertion_point(destructor:raft_cmdpb.SnapRequest)
  SharedDtor();
}

void SnapRequest::SharedDtor() {
}

void SnapRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SnapRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SnapRequest_descriptor_;
}

const SnapRequest& SnapRequest::default_instance() {
  protobuf_InitDefaults_raft_5fcmdpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<SnapRequest> SnapRequest_default_instance_;

SnapRequest* SnapRequest::New(::google::protobuf::Arena* arena) const {
  SnapRequest* n = new SnapRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SnapRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_cmdpb.SnapRequest)
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SnapRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_cmdpb.SnapRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:raft_cmdpb.SnapRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_cmdpb.SnapRequest)
  return false;
#undef DO_
}

void SnapRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_cmdpb.SnapRequest)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:raft_cmdpb.SnapRequest)
}

::google::protobuf::uint8* SnapRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raft_cmdpb.SnapRequest)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft_cmdpb.SnapRequest)
  return target;
}

size_t SnapRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_cmdpb.SnapRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SnapRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_cmdpb.SnapRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SnapRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SnapRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_cmdpb.SnapRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_cmdpb.SnapRequest)
    UnsafeMergeFrom(*source);
  }
}

void SnapRequest::MergeFrom(const SnapRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_cmdpb.SnapRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void SnapRequest::UnsafeMergeFrom(const SnapRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void SnapRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_cmdpb.SnapRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SnapRequest::CopyFrom(const SnapRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_cmdpb.SnapRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool SnapRequest::IsInitialized() const {

  return true;
}

void SnapRequest::Swap(SnapRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SnapRequest::InternalSwap(SnapRequest* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SnapRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SnapRequest_descriptor_;
  metadata.reflection = SnapRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SnapRequest

inline const SnapRequest* SnapRequest::internal_default_instance() {
  return &SnapRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SnapResponse::kRegionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SnapResponse::SnapResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_raft_5fcmdpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_cmdpb.SnapResponse)
}

void SnapResponse::InitAsDefaultInstance() {
  region_ = const_cast< ::metapb::Region*>(
      ::metapb::Region::internal_default_instance());
}

SnapResponse::SnapResponse(const SnapResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:raft_cmdpb.SnapResponse)
}

void SnapResponse::SharedCtor() {
  _cached_size_ = 0;
  region_ = NULL;
}

SnapResponse::~SnapResponse() {
  // @@protoc_insertion_point(destructor:raft_cmdpb.SnapResponse)
  SharedDtor();
}

void SnapResponse::SharedDtor() {
  if (this != &SnapResponse_default_instance_.get()) {
    delete region_;
  }
}

void SnapResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SnapResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SnapResponse_descriptor_;
}

const SnapResponse& SnapResponse::default_instance() {
  protobuf_InitDefaults_raft_5fcmdpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<SnapResponse> SnapResponse_default_instance_;

SnapResponse* SnapResponse::New(::google::protobuf::Arena* arena) const {
  SnapResponse* n = new SnapResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SnapResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_cmdpb.SnapResponse)
  if (has_region()) {
    if (region_ != NULL) region_->::metapb::Region::Clear();
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SnapResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_cmdpb.SnapResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .metapb.Region region = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_region()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft_cmdpb.SnapResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_cmdpb.SnapResponse)
  return false;
#undef DO_
}

void SnapResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_cmdpb.SnapResponse)
  // optional .metapb.Region region = 1;
  if (has_region()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->region_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:raft_cmdpb.SnapResponse)
}

::google::protobuf::uint8* SnapResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raft_cmdpb.SnapResponse)
  // optional .metapb.Region region = 1;
  if (has_region()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->region_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft_cmdpb.SnapResponse)
  return target;
}

size_t SnapResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_cmdpb.SnapResponse)
  size_t total_size = 0;

  // optional .metapb.Region region = 1;
  if (has_region()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->region_);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SnapResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_cmdpb.SnapResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SnapResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SnapResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_cmdpb.SnapResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_cmdpb.SnapResponse)
    UnsafeMergeFrom(*source);
  }
}

void SnapResponse::MergeFrom(const SnapResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_cmdpb.SnapResponse)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void SnapResponse::UnsafeMergeFrom(const SnapResponse& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_region()) {
      mutable_region()->::metapb::Region::MergeFrom(from.region());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void SnapResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_cmdpb.SnapResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SnapResponse::CopyFrom(const SnapResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_cmdpb.SnapResponse)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool SnapResponse::IsInitialized() const {

  return true;
}

void SnapResponse::Swap(SnapResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SnapResponse::InternalSwap(SnapResponse* other) {
  std::swap(region_, other->region_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SnapResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SnapResponse_descriptor_;
  metadata.reflection = SnapResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SnapResponse

// optional .metapb.Region region = 1;
bool SnapResponse::has_region() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SnapResponse::set_has_region() {
  _has_bits_[0] |= 0x00000001u;
}
void SnapResponse::clear_has_region() {
  _has_bits_[0] &= ~0x00000001u;
}
void SnapResponse::clear_region() {
  if (region_ != NULL) region_->::metapb::Region::Clear();
  clear_has_region();
}
const ::metapb::Region& SnapResponse::region() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.SnapResponse.region)
  return region_ != NULL ? *region_
                         : *::metapb::Region::internal_default_instance();
}
::metapb::Region* SnapResponse::mutable_region() {
  set_has_region();
  if (region_ == NULL) {
    region_ = new ::metapb::Region;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.SnapResponse.region)
  return region_;
}
::metapb::Region* SnapResponse::release_region() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.SnapResponse.region)
  clear_has_region();
  ::metapb::Region* temp = region_;
  region_ = NULL;
  return temp;
}
void SnapResponse::set_allocated_region(::metapb::Region* region) {
  delete region_;
  region_ = region;
  if (region) {
    set_has_region();
  } else {
    clear_has_region();
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.SnapResponse.region)
}

inline const SnapResponse* SnapResponse::internal_default_instance() {
  return &SnapResponse_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Request::kCmdTypeFieldNumber;
const int Request::kGetFieldNumber;
const int Request::kPutFieldNumber;
const int Request::kDeleteFieldNumber;
const int Request::kSnapFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Request::Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_raft_5fcmdpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_cmdpb.Request)
}

void Request::InitAsDefaultInstance() {
  get_ = const_cast< ::raft_cmdpb::GetRequest*>(
      ::raft_cmdpb::GetRequest::internal_default_instance());
  put_ = const_cast< ::raft_cmdpb::PutRequest*>(
      ::raft_cmdpb::PutRequest::internal_default_instance());
  delete__ = const_cast< ::raft_cmdpb::DeleteRequest*>(
      ::raft_cmdpb::DeleteRequest::internal_default_instance());
  snap_ = const_cast< ::raft_cmdpb::SnapRequest*>(
      ::raft_cmdpb::SnapRequest::internal_default_instance());
}

Request::Request(const Request& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:raft_cmdpb.Request)
}

void Request::SharedCtor() {
  _cached_size_ = 0;
  get_ = NULL;
  put_ = NULL;
  delete__ = NULL;
  snap_ = NULL;
  cmd_type_ = 0;
}

Request::~Request() {
  // @@protoc_insertion_point(destructor:raft_cmdpb.Request)
  SharedDtor();
}

void Request::SharedDtor() {
  if (this != &Request_default_instance_.get()) {
    delete get_;
    delete put_;
    delete delete__;
    delete snap_;
  }
}

void Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_descriptor_;
}

const Request& Request::default_instance() {
  protobuf_InitDefaults_raft_5fcmdpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Request> Request_default_instance_;

Request* Request::New(::google::protobuf::Arena* arena) const {
  Request* n = new Request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Request::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_cmdpb.Request)
  if (_has_bits_[0 / 32] & 31u) {
    cmd_type_ = 0;
    if (has_get()) {
      if (get_ != NULL) get_->::raft_cmdpb::GetRequest::Clear();
    }
    if (has_put()) {
      if (put_ != NULL) put_->::raft_cmdpb::PutRequest::Clear();
    }
    if (has_delete_()) {
      if (delete__ != NULL) delete__->::raft_cmdpb::DeleteRequest::Clear();
    }
    if (has_snap()) {
      if (snap_ != NULL) snap_->::raft_cmdpb::SnapRequest::Clear();
    }
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_cmdpb.Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .raft_cmdpb.CmdType cmd_type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::raft_cmdpb::CmdType_IsValid(value)) {
            set_cmd_type(static_cast< ::raft_cmdpb::CmdType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_get;
        break;
      }

      // optional .raft_cmdpb.GetRequest get = 2;
      case 2: {
        if (tag == 18) {
         parse_get:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_get()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_put;
        break;
      }

      // optional .raft_cmdpb.PutRequest put = 4;
      case 4: {
        if (tag == 34) {
         parse_put:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_put()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_delete;
        break;
      }

      // optional .raft_cmdpb.DeleteRequest delete = 5;
      case 5: {
        if (tag == 42) {
         parse_delete:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_delete_()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_snap;
        break;
      }

      // optional .raft_cmdpb.SnapRequest snap = 6;
      case 6: {
        if (tag == 50) {
         parse_snap:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_snap()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft_cmdpb.Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_cmdpb.Request)
  return false;
#undef DO_
}

void Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_cmdpb.Request)
  // optional .raft_cmdpb.CmdType cmd_type = 1;
  if (has_cmd_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd_type(), output);
  }

  // optional .raft_cmdpb.GetRequest get = 2;
  if (has_get()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->get_, output);
  }

  // optional .raft_cmdpb.PutRequest put = 4;
  if (has_put()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->put_, output);
  }

  // optional .raft_cmdpb.DeleteRequest delete = 5;
  if (has_delete_()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->delete__, output);
  }

  // optional .raft_cmdpb.SnapRequest snap = 6;
  if (has_snap()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->snap_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:raft_cmdpb.Request)
}

::google::protobuf::uint8* Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raft_cmdpb.Request)
  // optional .raft_cmdpb.CmdType cmd_type = 1;
  if (has_cmd_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd_type(), target);
  }

  // optional .raft_cmdpb.GetRequest get = 2;
  if (has_get()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->get_, false, target);
  }

  // optional .raft_cmdpb.PutRequest put = 4;
  if (has_put()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->put_, false, target);
  }

  // optional .raft_cmdpb.DeleteRequest delete = 5;
  if (has_delete_()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->delete__, false, target);
  }

  // optional .raft_cmdpb.SnapRequest snap = 6;
  if (has_snap()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->snap_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft_cmdpb.Request)
  return target;
}

size_t Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_cmdpb.Request)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 31u) {
    // optional .raft_cmdpb.CmdType cmd_type = 1;
    if (has_cmd_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd_type());
    }

    // optional .raft_cmdpb.GetRequest get = 2;
    if (has_get()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->get_);
    }

    // optional .raft_cmdpb.PutRequest put = 4;
    if (has_put()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->put_);
    }

    // optional .raft_cmdpb.DeleteRequest delete = 5;
    if (has_delete_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->delete__);
    }

    // optional .raft_cmdpb.SnapRequest snap = 6;
    if (has_snap()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->snap_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_cmdpb.Request)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_cmdpb.Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_cmdpb.Request)
    UnsafeMergeFrom(*source);
  }
}

void Request::MergeFrom(const Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_cmdpb.Request)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Request::UnsafeMergeFrom(const Request& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd_type()) {
      set_cmd_type(from.cmd_type());
    }
    if (from.has_get()) {
      mutable_get()->::raft_cmdpb::GetRequest::MergeFrom(from.get());
    }
    if (from.has_put()) {
      mutable_put()->::raft_cmdpb::PutRequest::MergeFrom(from.put());
    }
    if (from.has_delete_()) {
      mutable_delete_()->::raft_cmdpb::DeleteRequest::MergeFrom(from.delete_());
    }
    if (from.has_snap()) {
      mutable_snap()->::raft_cmdpb::SnapRequest::MergeFrom(from.snap());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_cmdpb.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request::CopyFrom(const Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_cmdpb.Request)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Request::IsInitialized() const {

  return true;
}

void Request::Swap(Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Request::InternalSwap(Request* other) {
  std::swap(cmd_type_, other->cmd_type_);
  std::swap(get_, other->get_);
  std::swap(put_, other->put_);
  std::swap(delete__, other->delete__);
  std::swap(snap_, other->snap_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Request_descriptor_;
  metadata.reflection = Request_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Request

// optional .raft_cmdpb.CmdType cmd_type = 1;
bool Request::has_cmd_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Request::set_has_cmd_type() {
  _has_bits_[0] |= 0x00000001u;
}
void Request::clear_has_cmd_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void Request::clear_cmd_type() {
  cmd_type_ = 0;
  clear_has_cmd_type();
}
::raft_cmdpb::CmdType Request::cmd_type() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.Request.cmd_type)
  return static_cast< ::raft_cmdpb::CmdType >(cmd_type_);
}
void Request::set_cmd_type(::raft_cmdpb::CmdType value) {
  assert(::raft_cmdpb::CmdType_IsValid(value));
  set_has_cmd_type();
  cmd_type_ = value;
  // @@protoc_insertion_point(field_set:raft_cmdpb.Request.cmd_type)
}

// optional .raft_cmdpb.GetRequest get = 2;
bool Request::has_get() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Request::set_has_get() {
  _has_bits_[0] |= 0x00000002u;
}
void Request::clear_has_get() {
  _has_bits_[0] &= ~0x00000002u;
}
void Request::clear_get() {
  if (get_ != NULL) get_->::raft_cmdpb::GetRequest::Clear();
  clear_has_get();
}
const ::raft_cmdpb::GetRequest& Request::get() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.Request.get)
  return get_ != NULL ? *get_
                         : *::raft_cmdpb::GetRequest::internal_default_instance();
}
::raft_cmdpb::GetRequest* Request::mutable_get() {
  set_has_get();
  if (get_ == NULL) {
    get_ = new ::raft_cmdpb::GetRequest;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.Request.get)
  return get_;
}
::raft_cmdpb::GetRequest* Request::release_get() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.Request.get)
  clear_has_get();
  ::raft_cmdpb::GetRequest* temp = get_;
  get_ = NULL;
  return temp;
}
void Request::set_allocated_get(::raft_cmdpb::GetRequest* get) {
  delete get_;
  get_ = get;
  if (get) {
    set_has_get();
  } else {
    clear_has_get();
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.Request.get)
}

// optional .raft_cmdpb.PutRequest put = 4;
bool Request::has_put() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Request::set_has_put() {
  _has_bits_[0] |= 0x00000004u;
}
void Request::clear_has_put() {
  _has_bits_[0] &= ~0x00000004u;
}
void Request::clear_put() {
  if (put_ != NULL) put_->::raft_cmdpb::PutRequest::Clear();
  clear_has_put();
}
const ::raft_cmdpb::PutRequest& Request::put() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.Request.put)
  return put_ != NULL ? *put_
                         : *::raft_cmdpb::PutRequest::internal_default_instance();
}
::raft_cmdpb::PutRequest* Request::mutable_put() {
  set_has_put();
  if (put_ == NULL) {
    put_ = new ::raft_cmdpb::PutRequest;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.Request.put)
  return put_;
}
::raft_cmdpb::PutRequest* Request::release_put() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.Request.put)
  clear_has_put();
  ::raft_cmdpb::PutRequest* temp = put_;
  put_ = NULL;
  return temp;
}
void Request::set_allocated_put(::raft_cmdpb::PutRequest* put) {
  delete put_;
  put_ = put;
  if (put) {
    set_has_put();
  } else {
    clear_has_put();
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.Request.put)
}

// optional .raft_cmdpb.DeleteRequest delete = 5;
bool Request::has_delete_() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Request::set_has_delete_() {
  _has_bits_[0] |= 0x00000008u;
}
void Request::clear_has_delete_() {
  _has_bits_[0] &= ~0x00000008u;
}
void Request::clear_delete_() {
  if (delete__ != NULL) delete__->::raft_cmdpb::DeleteRequest::Clear();
  clear_has_delete_();
}
const ::raft_cmdpb::DeleteRequest& Request::delete_() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.Request.delete)
  return delete__ != NULL ? *delete__
                         : *::raft_cmdpb::DeleteRequest::internal_default_instance();
}
::raft_cmdpb::DeleteRequest* Request::mutable_delete_() {
  set_has_delete_();
  if (delete__ == NULL) {
    delete__ = new ::raft_cmdpb::DeleteRequest;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.Request.delete)
  return delete__;
}
::raft_cmdpb::DeleteRequest* Request::release_delete_() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.Request.delete)
  clear_has_delete_();
  ::raft_cmdpb::DeleteRequest* temp = delete__;
  delete__ = NULL;
  return temp;
}
void Request::set_allocated_delete_(::raft_cmdpb::DeleteRequest* delete_) {
  delete delete__;
  delete__ = delete_;
  if (delete_) {
    set_has_delete_();
  } else {
    clear_has_delete_();
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.Request.delete)
}

// optional .raft_cmdpb.SnapRequest snap = 6;
bool Request::has_snap() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Request::set_has_snap() {
  _has_bits_[0] |= 0x00000010u;
}
void Request::clear_has_snap() {
  _has_bits_[0] &= ~0x00000010u;
}
void Request::clear_snap() {
  if (snap_ != NULL) snap_->::raft_cmdpb::SnapRequest::Clear();
  clear_has_snap();
}
const ::raft_cmdpb::SnapRequest& Request::snap() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.Request.snap)
  return snap_ != NULL ? *snap_
                         : *::raft_cmdpb::SnapRequest::internal_default_instance();
}
::raft_cmdpb::SnapRequest* Request::mutable_snap() {
  set_has_snap();
  if (snap_ == NULL) {
    snap_ = new ::raft_cmdpb::SnapRequest;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.Request.snap)
  return snap_;
}
::raft_cmdpb::SnapRequest* Request::release_snap() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.Request.snap)
  clear_has_snap();
  ::raft_cmdpb::SnapRequest* temp = snap_;
  snap_ = NULL;
  return temp;
}
void Request::set_allocated_snap(::raft_cmdpb::SnapRequest* snap) {
  delete snap_;
  snap_ = snap;
  if (snap) {
    set_has_snap();
  } else {
    clear_has_snap();
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.Request.snap)
}

inline const Request* Request::internal_default_instance() {
  return &Request_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Response::kCmdTypeFieldNumber;
const int Response::kGetFieldNumber;
const int Response::kPutFieldNumber;
const int Response::kDeleteFieldNumber;
const int Response::kSnapFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Response::Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_raft_5fcmdpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_cmdpb.Response)
}

void Response::InitAsDefaultInstance() {
  get_ = const_cast< ::raft_cmdpb::GetResponse*>(
      ::raft_cmdpb::GetResponse::internal_default_instance());
  put_ = const_cast< ::raft_cmdpb::PutResponse*>(
      ::raft_cmdpb::PutResponse::internal_default_instance());
  delete__ = const_cast< ::raft_cmdpb::DeleteResponse*>(
      ::raft_cmdpb::DeleteResponse::internal_default_instance());
  snap_ = const_cast< ::raft_cmdpb::SnapResponse*>(
      ::raft_cmdpb::SnapResponse::internal_default_instance());
}

Response::Response(const Response& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:raft_cmdpb.Response)
}

void Response::SharedCtor() {
  _cached_size_ = 0;
  get_ = NULL;
  put_ = NULL;
  delete__ = NULL;
  snap_ = NULL;
  cmd_type_ = 0;
}

Response::~Response() {
  // @@protoc_insertion_point(destructor:raft_cmdpb.Response)
  SharedDtor();
}

void Response::SharedDtor() {
  if (this != &Response_default_instance_.get()) {
    delete get_;
    delete put_;
    delete delete__;
    delete snap_;
  }
}

void Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Response_descriptor_;
}

const Response& Response::default_instance() {
  protobuf_InitDefaults_raft_5fcmdpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Response> Response_default_instance_;

Response* Response::New(::google::protobuf::Arena* arena) const {
  Response* n = new Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Response::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_cmdpb.Response)
  if (_has_bits_[0 / 32] & 31u) {
    cmd_type_ = 0;
    if (has_get()) {
      if (get_ != NULL) get_->::raft_cmdpb::GetResponse::Clear();
    }
    if (has_put()) {
      if (put_ != NULL) put_->::raft_cmdpb::PutResponse::Clear();
    }
    if (has_delete_()) {
      if (delete__ != NULL) delete__->::raft_cmdpb::DeleteResponse::Clear();
    }
    if (has_snap()) {
      if (snap_ != NULL) snap_->::raft_cmdpb::SnapResponse::Clear();
    }
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_cmdpb.Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .raft_cmdpb.CmdType cmd_type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::raft_cmdpb::CmdType_IsValid(value)) {
            set_cmd_type(static_cast< ::raft_cmdpb::CmdType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_get;
        break;
      }

      // optional .raft_cmdpb.GetResponse get = 2;
      case 2: {
        if (tag == 18) {
         parse_get:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_get()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_put;
        break;
      }

      // optional .raft_cmdpb.PutResponse put = 4;
      case 4: {
        if (tag == 34) {
         parse_put:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_put()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_delete;
        break;
      }

      // optional .raft_cmdpb.DeleteResponse delete = 5;
      case 5: {
        if (tag == 42) {
         parse_delete:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_delete_()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_snap;
        break;
      }

      // optional .raft_cmdpb.SnapResponse snap = 6;
      case 6: {
        if (tag == 50) {
         parse_snap:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_snap()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft_cmdpb.Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_cmdpb.Response)
  return false;
#undef DO_
}

void Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_cmdpb.Response)
  // optional .raft_cmdpb.CmdType cmd_type = 1;
  if (has_cmd_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd_type(), output);
  }

  // optional .raft_cmdpb.GetResponse get = 2;
  if (has_get()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->get_, output);
  }

  // optional .raft_cmdpb.PutResponse put = 4;
  if (has_put()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->put_, output);
  }

  // optional .raft_cmdpb.DeleteResponse delete = 5;
  if (has_delete_()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->delete__, output);
  }

  // optional .raft_cmdpb.SnapResponse snap = 6;
  if (has_snap()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->snap_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:raft_cmdpb.Response)
}

::google::protobuf::uint8* Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raft_cmdpb.Response)
  // optional .raft_cmdpb.CmdType cmd_type = 1;
  if (has_cmd_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd_type(), target);
  }

  // optional .raft_cmdpb.GetResponse get = 2;
  if (has_get()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->get_, false, target);
  }

  // optional .raft_cmdpb.PutResponse put = 4;
  if (has_put()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->put_, false, target);
  }

  // optional .raft_cmdpb.DeleteResponse delete = 5;
  if (has_delete_()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->delete__, false, target);
  }

  // optional .raft_cmdpb.SnapResponse snap = 6;
  if (has_snap()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->snap_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft_cmdpb.Response)
  return target;
}

size_t Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_cmdpb.Response)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 31u) {
    // optional .raft_cmdpb.CmdType cmd_type = 1;
    if (has_cmd_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd_type());
    }

    // optional .raft_cmdpb.GetResponse get = 2;
    if (has_get()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->get_);
    }

    // optional .raft_cmdpb.PutResponse put = 4;
    if (has_put()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->put_);
    }

    // optional .raft_cmdpb.DeleteResponse delete = 5;
    if (has_delete_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->delete__);
    }

    // optional .raft_cmdpb.SnapResponse snap = 6;
    if (has_snap()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->snap_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_cmdpb.Response)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_cmdpb.Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_cmdpb.Response)
    UnsafeMergeFrom(*source);
  }
}

void Response::MergeFrom(const Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_cmdpb.Response)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Response::UnsafeMergeFrom(const Response& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd_type()) {
      set_cmd_type(from.cmd_type());
    }
    if (from.has_get()) {
      mutable_get()->::raft_cmdpb::GetResponse::MergeFrom(from.get());
    }
    if (from.has_put()) {
      mutable_put()->::raft_cmdpb::PutResponse::MergeFrom(from.put());
    }
    if (from.has_delete_()) {
      mutable_delete_()->::raft_cmdpb::DeleteResponse::MergeFrom(from.delete_());
    }
    if (from.has_snap()) {
      mutable_snap()->::raft_cmdpb::SnapResponse::MergeFrom(from.snap());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_cmdpb.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Response::CopyFrom(const Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_cmdpb.Response)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Response::IsInitialized() const {

  return true;
}

void Response::Swap(Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Response::InternalSwap(Response* other) {
  std::swap(cmd_type_, other->cmd_type_);
  std::swap(get_, other->get_);
  std::swap(put_, other->put_);
  std::swap(delete__, other->delete__);
  std::swap(snap_, other->snap_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Response_descriptor_;
  metadata.reflection = Response_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Response

// optional .raft_cmdpb.CmdType cmd_type = 1;
bool Response::has_cmd_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Response::set_has_cmd_type() {
  _has_bits_[0] |= 0x00000001u;
}
void Response::clear_has_cmd_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void Response::clear_cmd_type() {
  cmd_type_ = 0;
  clear_has_cmd_type();
}
::raft_cmdpb::CmdType Response::cmd_type() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.Response.cmd_type)
  return static_cast< ::raft_cmdpb::CmdType >(cmd_type_);
}
void Response::set_cmd_type(::raft_cmdpb::CmdType value) {
  assert(::raft_cmdpb::CmdType_IsValid(value));
  set_has_cmd_type();
  cmd_type_ = value;
  // @@protoc_insertion_point(field_set:raft_cmdpb.Response.cmd_type)
}

// optional .raft_cmdpb.GetResponse get = 2;
bool Response::has_get() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Response::set_has_get() {
  _has_bits_[0] |= 0x00000002u;
}
void Response::clear_has_get() {
  _has_bits_[0] &= ~0x00000002u;
}
void Response::clear_get() {
  if (get_ != NULL) get_->::raft_cmdpb::GetResponse::Clear();
  clear_has_get();
}
const ::raft_cmdpb::GetResponse& Response::get() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.Response.get)
  return get_ != NULL ? *get_
                         : *::raft_cmdpb::GetResponse::internal_default_instance();
}
::raft_cmdpb::GetResponse* Response::mutable_get() {
  set_has_get();
  if (get_ == NULL) {
    get_ = new ::raft_cmdpb::GetResponse;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.Response.get)
  return get_;
}
::raft_cmdpb::GetResponse* Response::release_get() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.Response.get)
  clear_has_get();
  ::raft_cmdpb::GetResponse* temp = get_;
  get_ = NULL;
  return temp;
}
void Response::set_allocated_get(::raft_cmdpb::GetResponse* get) {
  delete get_;
  get_ = get;
  if (get) {
    set_has_get();
  } else {
    clear_has_get();
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.Response.get)
}

// optional .raft_cmdpb.PutResponse put = 4;
bool Response::has_put() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Response::set_has_put() {
  _has_bits_[0] |= 0x00000004u;
}
void Response::clear_has_put() {
  _has_bits_[0] &= ~0x00000004u;
}
void Response::clear_put() {
  if (put_ != NULL) put_->::raft_cmdpb::PutResponse::Clear();
  clear_has_put();
}
const ::raft_cmdpb::PutResponse& Response::put() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.Response.put)
  return put_ != NULL ? *put_
                         : *::raft_cmdpb::PutResponse::internal_default_instance();
}
::raft_cmdpb::PutResponse* Response::mutable_put() {
  set_has_put();
  if (put_ == NULL) {
    put_ = new ::raft_cmdpb::PutResponse;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.Response.put)
  return put_;
}
::raft_cmdpb::PutResponse* Response::release_put() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.Response.put)
  clear_has_put();
  ::raft_cmdpb::PutResponse* temp = put_;
  put_ = NULL;
  return temp;
}
void Response::set_allocated_put(::raft_cmdpb::PutResponse* put) {
  delete put_;
  put_ = put;
  if (put) {
    set_has_put();
  } else {
    clear_has_put();
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.Response.put)
}

// optional .raft_cmdpb.DeleteResponse delete = 5;
bool Response::has_delete_() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Response::set_has_delete_() {
  _has_bits_[0] |= 0x00000008u;
}
void Response::clear_has_delete_() {
  _has_bits_[0] &= ~0x00000008u;
}
void Response::clear_delete_() {
  if (delete__ != NULL) delete__->::raft_cmdpb::DeleteResponse::Clear();
  clear_has_delete_();
}
const ::raft_cmdpb::DeleteResponse& Response::delete_() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.Response.delete)
  return delete__ != NULL ? *delete__
                         : *::raft_cmdpb::DeleteResponse::internal_default_instance();
}
::raft_cmdpb::DeleteResponse* Response::mutable_delete_() {
  set_has_delete_();
  if (delete__ == NULL) {
    delete__ = new ::raft_cmdpb::DeleteResponse;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.Response.delete)
  return delete__;
}
::raft_cmdpb::DeleteResponse* Response::release_delete_() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.Response.delete)
  clear_has_delete_();
  ::raft_cmdpb::DeleteResponse* temp = delete__;
  delete__ = NULL;
  return temp;
}
void Response::set_allocated_delete_(::raft_cmdpb::DeleteResponse* delete_) {
  delete delete__;
  delete__ = delete_;
  if (delete_) {
    set_has_delete_();
  } else {
    clear_has_delete_();
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.Response.delete)
}

// optional .raft_cmdpb.SnapResponse snap = 6;
bool Response::has_snap() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Response::set_has_snap() {
  _has_bits_[0] |= 0x00000010u;
}
void Response::clear_has_snap() {
  _has_bits_[0] &= ~0x00000010u;
}
void Response::clear_snap() {
  if (snap_ != NULL) snap_->::raft_cmdpb::SnapResponse::Clear();
  clear_has_snap();
}
const ::raft_cmdpb::SnapResponse& Response::snap() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.Response.snap)
  return snap_ != NULL ? *snap_
                         : *::raft_cmdpb::SnapResponse::internal_default_instance();
}
::raft_cmdpb::SnapResponse* Response::mutable_snap() {
  set_has_snap();
  if (snap_ == NULL) {
    snap_ = new ::raft_cmdpb::SnapResponse;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.Response.snap)
  return snap_;
}
::raft_cmdpb::SnapResponse* Response::release_snap() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.Response.snap)
  clear_has_snap();
  ::raft_cmdpb::SnapResponse* temp = snap_;
  snap_ = NULL;
  return temp;
}
void Response::set_allocated_snap(::raft_cmdpb::SnapResponse* snap) {
  delete snap_;
  snap_ = snap;
  if (snap) {
    set_has_snap();
  } else {
    clear_has_snap();
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.Response.snap)
}

inline const Response* Response::internal_default_instance() {
  return &Response_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChangePeerRequest::kChangeTypeFieldNumber;
const int ChangePeerRequest::kPeerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChangePeerRequest::ChangePeerRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_raft_5fcmdpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_cmdpb.ChangePeerRequest)
}

void ChangePeerRequest::InitAsDefaultInstance() {
  peer_ = const_cast< ::metapb::Peer*>(
      ::metapb::Peer::internal_default_instance());
}

ChangePeerRequest::ChangePeerRequest(const ChangePeerRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:raft_cmdpb.ChangePeerRequest)
}

void ChangePeerRequest::SharedCtor() {
  _cached_size_ = 0;
  peer_ = NULL;
  change_type_ = 0;
}

ChangePeerRequest::~ChangePeerRequest() {
  // @@protoc_insertion_point(destructor:raft_cmdpb.ChangePeerRequest)
  SharedDtor();
}

void ChangePeerRequest::SharedDtor() {
  if (this != &ChangePeerRequest_default_instance_.get()) {
    delete peer_;
  }
}

void ChangePeerRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChangePeerRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChangePeerRequest_descriptor_;
}

const ChangePeerRequest& ChangePeerRequest::default_instance() {
  protobuf_InitDefaults_raft_5fcmdpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ChangePeerRequest> ChangePeerRequest_default_instance_;

ChangePeerRequest* ChangePeerRequest::New(::google::protobuf::Arena* arena) const {
  ChangePeerRequest* n = new ChangePeerRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChangePeerRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_cmdpb.ChangePeerRequest)
  if (_has_bits_[0 / 32] & 3u) {
    change_type_ = 0;
    if (has_peer()) {
      if (peer_ != NULL) peer_->::metapb::Peer::Clear();
    }
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ChangePeerRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_cmdpb.ChangePeerRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .eraftpb.ConfChangeType change_type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::eraftpb::ConfChangeType_IsValid(value)) {
            set_change_type(static_cast< ::eraftpb::ConfChangeType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_peer;
        break;
      }

      // optional .metapb.Peer peer = 2;
      case 2: {
        if (tag == 18) {
         parse_peer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_peer()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft_cmdpb.ChangePeerRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_cmdpb.ChangePeerRequest)
  return false;
#undef DO_
}

void ChangePeerRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_cmdpb.ChangePeerRequest)
  // optional .eraftpb.ConfChangeType change_type = 1;
  if (has_change_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->change_type(), output);
  }

  // optional .metapb.Peer peer = 2;
  if (has_peer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->peer_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:raft_cmdpb.ChangePeerRequest)
}

::google::protobuf::uint8* ChangePeerRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raft_cmdpb.ChangePeerRequest)
  // optional .eraftpb.ConfChangeType change_type = 1;
  if (has_change_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->change_type(), target);
  }

  // optional .metapb.Peer peer = 2;
  if (has_peer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->peer_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft_cmdpb.ChangePeerRequest)
  return target;
}

size_t ChangePeerRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_cmdpb.ChangePeerRequest)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional .eraftpb.ConfChangeType change_type = 1;
    if (has_change_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->change_type());
    }

    // optional .metapb.Peer peer = 2;
    if (has_peer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->peer_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChangePeerRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_cmdpb.ChangePeerRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ChangePeerRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChangePeerRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_cmdpb.ChangePeerRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_cmdpb.ChangePeerRequest)
    UnsafeMergeFrom(*source);
  }
}

void ChangePeerRequest::MergeFrom(const ChangePeerRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_cmdpb.ChangePeerRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ChangePeerRequest::UnsafeMergeFrom(const ChangePeerRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_change_type()) {
      set_change_type(from.change_type());
    }
    if (from.has_peer()) {
      mutable_peer()->::metapb::Peer::MergeFrom(from.peer());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void ChangePeerRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_cmdpb.ChangePeerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangePeerRequest::CopyFrom(const ChangePeerRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_cmdpb.ChangePeerRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ChangePeerRequest::IsInitialized() const {

  return true;
}

void ChangePeerRequest::Swap(ChangePeerRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChangePeerRequest::InternalSwap(ChangePeerRequest* other) {
  std::swap(change_type_, other->change_type_);
  std::swap(peer_, other->peer_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChangePeerRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChangePeerRequest_descriptor_;
  metadata.reflection = ChangePeerRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChangePeerRequest

// optional .eraftpb.ConfChangeType change_type = 1;
bool ChangePeerRequest::has_change_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ChangePeerRequest::set_has_change_type() {
  _has_bits_[0] |= 0x00000001u;
}
void ChangePeerRequest::clear_has_change_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void ChangePeerRequest::clear_change_type() {
  change_type_ = 0;
  clear_has_change_type();
}
::eraftpb::ConfChangeType ChangePeerRequest::change_type() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.ChangePeerRequest.change_type)
  return static_cast< ::eraftpb::ConfChangeType >(change_type_);
}
void ChangePeerRequest::set_change_type(::eraftpb::ConfChangeType value) {
  assert(::eraftpb::ConfChangeType_IsValid(value));
  set_has_change_type();
  change_type_ = value;
  // @@protoc_insertion_point(field_set:raft_cmdpb.ChangePeerRequest.change_type)
}

// optional .metapb.Peer peer = 2;
bool ChangePeerRequest::has_peer() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ChangePeerRequest::set_has_peer() {
  _has_bits_[0] |= 0x00000002u;
}
void ChangePeerRequest::clear_has_peer() {
  _has_bits_[0] &= ~0x00000002u;
}
void ChangePeerRequest::clear_peer() {
  if (peer_ != NULL) peer_->::metapb::Peer::Clear();
  clear_has_peer();
}
const ::metapb::Peer& ChangePeerRequest::peer() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.ChangePeerRequest.peer)
  return peer_ != NULL ? *peer_
                         : *::metapb::Peer::internal_default_instance();
}
::metapb::Peer* ChangePeerRequest::mutable_peer() {
  set_has_peer();
  if (peer_ == NULL) {
    peer_ = new ::metapb::Peer;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.ChangePeerRequest.peer)
  return peer_;
}
::metapb::Peer* ChangePeerRequest::release_peer() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.ChangePeerRequest.peer)
  clear_has_peer();
  ::metapb::Peer* temp = peer_;
  peer_ = NULL;
  return temp;
}
void ChangePeerRequest::set_allocated_peer(::metapb::Peer* peer) {
  delete peer_;
  peer_ = peer;
  if (peer) {
    set_has_peer();
  } else {
    clear_has_peer();
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.ChangePeerRequest.peer)
}

inline const ChangePeerRequest* ChangePeerRequest::internal_default_instance() {
  return &ChangePeerRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChangePeerResponse::kRegionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChangePeerResponse::ChangePeerResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_raft_5fcmdpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_cmdpb.ChangePeerResponse)
}

void ChangePeerResponse::InitAsDefaultInstance() {
  region_ = const_cast< ::metapb::Region*>(
      ::metapb::Region::internal_default_instance());
}

ChangePeerResponse::ChangePeerResponse(const ChangePeerResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:raft_cmdpb.ChangePeerResponse)
}

void ChangePeerResponse::SharedCtor() {
  _cached_size_ = 0;
  region_ = NULL;
}

ChangePeerResponse::~ChangePeerResponse() {
  // @@protoc_insertion_point(destructor:raft_cmdpb.ChangePeerResponse)
  SharedDtor();
}

void ChangePeerResponse::SharedDtor() {
  if (this != &ChangePeerResponse_default_instance_.get()) {
    delete region_;
  }
}

void ChangePeerResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChangePeerResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChangePeerResponse_descriptor_;
}

const ChangePeerResponse& ChangePeerResponse::default_instance() {
  protobuf_InitDefaults_raft_5fcmdpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ChangePeerResponse> ChangePeerResponse_default_instance_;

ChangePeerResponse* ChangePeerResponse::New(::google::protobuf::Arena* arena) const {
  ChangePeerResponse* n = new ChangePeerResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChangePeerResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_cmdpb.ChangePeerResponse)
  if (has_region()) {
    if (region_ != NULL) region_->::metapb::Region::Clear();
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ChangePeerResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_cmdpb.ChangePeerResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .metapb.Region region = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_region()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft_cmdpb.ChangePeerResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_cmdpb.ChangePeerResponse)
  return false;
#undef DO_
}

void ChangePeerResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_cmdpb.ChangePeerResponse)
  // optional .metapb.Region region = 1;
  if (has_region()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->region_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:raft_cmdpb.ChangePeerResponse)
}

::google::protobuf::uint8* ChangePeerResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raft_cmdpb.ChangePeerResponse)
  // optional .metapb.Region region = 1;
  if (has_region()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->region_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft_cmdpb.ChangePeerResponse)
  return target;
}

size_t ChangePeerResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_cmdpb.ChangePeerResponse)
  size_t total_size = 0;

  // optional .metapb.Region region = 1;
  if (has_region()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->region_);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChangePeerResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_cmdpb.ChangePeerResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ChangePeerResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChangePeerResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_cmdpb.ChangePeerResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_cmdpb.ChangePeerResponse)
    UnsafeMergeFrom(*source);
  }
}

void ChangePeerResponse::MergeFrom(const ChangePeerResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_cmdpb.ChangePeerResponse)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ChangePeerResponse::UnsafeMergeFrom(const ChangePeerResponse& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_region()) {
      mutable_region()->::metapb::Region::MergeFrom(from.region());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void ChangePeerResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_cmdpb.ChangePeerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangePeerResponse::CopyFrom(const ChangePeerResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_cmdpb.ChangePeerResponse)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ChangePeerResponse::IsInitialized() const {

  return true;
}

void ChangePeerResponse::Swap(ChangePeerResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChangePeerResponse::InternalSwap(ChangePeerResponse* other) {
  std::swap(region_, other->region_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChangePeerResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChangePeerResponse_descriptor_;
  metadata.reflection = ChangePeerResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChangePeerResponse

// optional .metapb.Region region = 1;
bool ChangePeerResponse::has_region() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ChangePeerResponse::set_has_region() {
  _has_bits_[0] |= 0x00000001u;
}
void ChangePeerResponse::clear_has_region() {
  _has_bits_[0] &= ~0x00000001u;
}
void ChangePeerResponse::clear_region() {
  if (region_ != NULL) region_->::metapb::Region::Clear();
  clear_has_region();
}
const ::metapb::Region& ChangePeerResponse::region() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.ChangePeerResponse.region)
  return region_ != NULL ? *region_
                         : *::metapb::Region::internal_default_instance();
}
::metapb::Region* ChangePeerResponse::mutable_region() {
  set_has_region();
  if (region_ == NULL) {
    region_ = new ::metapb::Region;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.ChangePeerResponse.region)
  return region_;
}
::metapb::Region* ChangePeerResponse::release_region() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.ChangePeerResponse.region)
  clear_has_region();
  ::metapb::Region* temp = region_;
  region_ = NULL;
  return temp;
}
void ChangePeerResponse::set_allocated_region(::metapb::Region* region) {
  delete region_;
  region_ = region;
  if (region) {
    set_has_region();
  } else {
    clear_has_region();
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.ChangePeerResponse.region)
}

inline const ChangePeerResponse* ChangePeerResponse::internal_default_instance() {
  return &ChangePeerResponse_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SplitRequest::kSplitKeyFieldNumber;
const int SplitRequest::kNewRegionIdFieldNumber;
const int SplitRequest::kNewPeerIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SplitRequest::SplitRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_raft_5fcmdpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_cmdpb.SplitRequest)
}

void SplitRequest::InitAsDefaultInstance() {
}

SplitRequest::SplitRequest(const SplitRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:raft_cmdpb.SplitRequest)
}

void SplitRequest::SharedCtor() {
  _cached_size_ = 0;
  split_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  new_region_id_ = GOOGLE_ULONGLONG(0);
}

SplitRequest::~SplitRequest() {
  // @@protoc_insertion_point(destructor:raft_cmdpb.SplitRequest)
  SharedDtor();
}

void SplitRequest::SharedDtor() {
  split_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SplitRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SplitRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SplitRequest_descriptor_;
}

const SplitRequest& SplitRequest::default_instance() {
  protobuf_InitDefaults_raft_5fcmdpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<SplitRequest> SplitRequest_default_instance_;

SplitRequest* SplitRequest::New(::google::protobuf::Arena* arena) const {
  SplitRequest* n = new SplitRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SplitRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_cmdpb.SplitRequest)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_split_key()) {
      split_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    new_region_id_ = GOOGLE_ULONGLONG(0);
  }
  new_peer_ids_.Clear();
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SplitRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_cmdpb.SplitRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes split_key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_split_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_new_region_id;
        break;
      }

      // optional uint64 new_region_id = 2;
      case 2: {
        if (tag == 16) {
         parse_new_region_id:
          set_has_new_region_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &new_region_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_new_peer_ids;
        break;
      }

      // repeated uint64 new_peer_ids = 3;
      case 3: {
        if (tag == 24) {
         parse_new_peer_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 24, input, this->mutable_new_peer_ids())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_new_peer_ids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_new_peer_ids;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft_cmdpb.SplitRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_cmdpb.SplitRequest)
  return false;
#undef DO_
}

void SplitRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_cmdpb.SplitRequest)
  // optional bytes split_key = 1;
  if (has_split_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->split_key(), output);
  }

  // optional uint64 new_region_id = 2;
  if (has_new_region_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->new_region_id(), output);
  }

  // repeated uint64 new_peer_ids = 3;
  for (int i = 0; i < this->new_peer_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      3, this->new_peer_ids(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:raft_cmdpb.SplitRequest)
}

::google::protobuf::uint8* SplitRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raft_cmdpb.SplitRequest)
  // optional bytes split_key = 1;
  if (has_split_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->split_key(), target);
  }

  // optional uint64 new_region_id = 2;
  if (has_new_region_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->new_region_id(), target);
  }

  // repeated uint64 new_peer_ids = 3;
  for (int i = 0; i < this->new_peer_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(3, this->new_peer_ids(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft_cmdpb.SplitRequest)
  return target;
}

size_t SplitRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_cmdpb.SplitRequest)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional bytes split_key = 1;
    if (has_split_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->split_key());
    }

    // optional uint64 new_region_id = 2;
    if (has_new_region_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->new_region_id());
    }

  }
  // repeated uint64 new_peer_ids = 3;
  {
    size_t data_size = 0;
    unsigned int count = this->new_peer_ids_size();
    for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->new_peer_ids(i));
    }
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->new_peer_ids_size());
    total_size += data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SplitRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_cmdpb.SplitRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SplitRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SplitRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_cmdpb.SplitRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_cmdpb.SplitRequest)
    UnsafeMergeFrom(*source);
  }
}

void SplitRequest::MergeFrom(const SplitRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_cmdpb.SplitRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void SplitRequest::UnsafeMergeFrom(const SplitRequest& from) {
  GOOGLE_DCHECK(&from != this);
  new_peer_ids_.UnsafeMergeFrom(from.new_peer_ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_split_key()) {
      set_has_split_key();
      split_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.split_key_);
    }
    if (from.has_new_region_id()) {
      set_new_region_id(from.new_region_id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void SplitRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_cmdpb.SplitRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SplitRequest::CopyFrom(const SplitRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_cmdpb.SplitRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool SplitRequest::IsInitialized() const {

  return true;
}

void SplitRequest::Swap(SplitRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SplitRequest::InternalSwap(SplitRequest* other) {
  split_key_.Swap(&other->split_key_);
  std::swap(new_region_id_, other->new_region_id_);
  new_peer_ids_.UnsafeArenaSwap(&other->new_peer_ids_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SplitRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SplitRequest_descriptor_;
  metadata.reflection = SplitRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SplitRequest

// optional bytes split_key = 1;
bool SplitRequest::has_split_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SplitRequest::set_has_split_key() {
  _has_bits_[0] |= 0x00000001u;
}
void SplitRequest::clear_has_split_key() {
  _has_bits_[0] &= ~0x00000001u;
}
void SplitRequest::clear_split_key() {
  split_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_split_key();
}
const ::std::string& SplitRequest::split_key() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.SplitRequest.split_key)
  return split_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SplitRequest::set_split_key(const ::std::string& value) {
  set_has_split_key();
  split_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raft_cmdpb.SplitRequest.split_key)
}
void SplitRequest::set_split_key(const char* value) {
  set_has_split_key();
  split_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raft_cmdpb.SplitRequest.split_key)
}
void SplitRequest::set_split_key(const void* value, size_t size) {
  set_has_split_key();
  split_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raft_cmdpb.SplitRequest.split_key)
}
::std::string* SplitRequest::mutable_split_key() {
  set_has_split_key();
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.SplitRequest.split_key)
  return split_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SplitRequest::release_split_key() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.SplitRequest.split_key)
  clear_has_split_key();
  return split_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SplitRequest::set_allocated_split_key(::std::string* split_key) {
  if (split_key != NULL) {
    set_has_split_key();
  } else {
    clear_has_split_key();
  }
  split_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), split_key);
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.SplitRequest.split_key)
}

// optional uint64 new_region_id = 2;
bool SplitRequest::has_new_region_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SplitRequest::set_has_new_region_id() {
  _has_bits_[0] |= 0x00000002u;
}
void SplitRequest::clear_has_new_region_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void SplitRequest::clear_new_region_id() {
  new_region_id_ = GOOGLE_ULONGLONG(0);
  clear_has_new_region_id();
}
::google::protobuf::uint64 SplitRequest::new_region_id() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.SplitRequest.new_region_id)
  return new_region_id_;
}
void SplitRequest::set_new_region_id(::google::protobuf::uint64 value) {
  set_has_new_region_id();
  new_region_id_ = value;
  // @@protoc_insertion_point(field_set:raft_cmdpb.SplitRequest.new_region_id)
}

// repeated uint64 new_peer_ids = 3;
int SplitRequest::new_peer_ids_size() const {
  return new_peer_ids_.size();
}
void SplitRequest::clear_new_peer_ids() {
  new_peer_ids_.Clear();
}
::google::protobuf::uint64 SplitRequest::new_peer_ids(int index) const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.SplitRequest.new_peer_ids)
  return new_peer_ids_.Get(index);
}
void SplitRequest::set_new_peer_ids(int index, ::google::protobuf::uint64 value) {
  new_peer_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:raft_cmdpb.SplitRequest.new_peer_ids)
}
void SplitRequest::add_new_peer_ids(::google::protobuf::uint64 value) {
  new_peer_ids_.Add(value);
  // @@protoc_insertion_point(field_add:raft_cmdpb.SplitRequest.new_peer_ids)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
SplitRequest::new_peer_ids() const {
  // @@protoc_insertion_point(field_list:raft_cmdpb.SplitRequest.new_peer_ids)
  return new_peer_ids_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
SplitRequest::mutable_new_peer_ids() {
  // @@protoc_insertion_point(field_mutable_list:raft_cmdpb.SplitRequest.new_peer_ids)
  return &new_peer_ids_;
}

inline const SplitRequest* SplitRequest::internal_default_instance() {
  return &SplitRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SplitResponse::kLeftFieldNumber;
const int SplitResponse::kRightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SplitResponse::SplitResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_raft_5fcmdpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_cmdpb.SplitResponse)
}

void SplitResponse::InitAsDefaultInstance() {
  left_ = const_cast< ::metapb::Region*>(
      ::metapb::Region::internal_default_instance());
  right_ = const_cast< ::metapb::Region*>(
      ::metapb::Region::internal_default_instance());
}

SplitResponse::SplitResponse(const SplitResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:raft_cmdpb.SplitResponse)
}

void SplitResponse::SharedCtor() {
  _cached_size_ = 0;
  left_ = NULL;
  right_ = NULL;
}

SplitResponse::~SplitResponse() {
  // @@protoc_insertion_point(destructor:raft_cmdpb.SplitResponse)
  SharedDtor();
}

void SplitResponse::SharedDtor() {
  if (this != &SplitResponse_default_instance_.get()) {
    delete left_;
    delete right_;
  }
}

void SplitResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SplitResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SplitResponse_descriptor_;
}

const SplitResponse& SplitResponse::default_instance() {
  protobuf_InitDefaults_raft_5fcmdpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<SplitResponse> SplitResponse_default_instance_;

SplitResponse* SplitResponse::New(::google::protobuf::Arena* arena) const {
  SplitResponse* n = new SplitResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SplitResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_cmdpb.SplitResponse)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_left()) {
      if (left_ != NULL) left_->::metapb::Region::Clear();
    }
    if (has_right()) {
      if (right_ != NULL) right_->::metapb::Region::Clear();
    }
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SplitResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_cmdpb.SplitResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .metapb.Region left = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_left()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_right;
        break;
      }

      // optional .metapb.Region right = 2;
      case 2: {
        if (tag == 18) {
         parse_right:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_right()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft_cmdpb.SplitResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_cmdpb.SplitResponse)
  return false;
#undef DO_
}

void SplitResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_cmdpb.SplitResponse)
  // optional .metapb.Region left = 1;
  if (has_left()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->left_, output);
  }

  // optional .metapb.Region right = 2;
  if (has_right()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->right_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:raft_cmdpb.SplitResponse)
}

::google::protobuf::uint8* SplitResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raft_cmdpb.SplitResponse)
  // optional .metapb.Region left = 1;
  if (has_left()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->left_, false, target);
  }

  // optional .metapb.Region right = 2;
  if (has_right()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->right_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft_cmdpb.SplitResponse)
  return target;
}

size_t SplitResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_cmdpb.SplitResponse)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional .metapb.Region left = 1;
    if (has_left()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->left_);
    }

    // optional .metapb.Region right = 2;
    if (has_right()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->right_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SplitResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_cmdpb.SplitResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SplitResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SplitResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_cmdpb.SplitResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_cmdpb.SplitResponse)
    UnsafeMergeFrom(*source);
  }
}

void SplitResponse::MergeFrom(const SplitResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_cmdpb.SplitResponse)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void SplitResponse::UnsafeMergeFrom(const SplitResponse& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_left()) {
      mutable_left()->::metapb::Region::MergeFrom(from.left());
    }
    if (from.has_right()) {
      mutable_right()->::metapb::Region::MergeFrom(from.right());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void SplitResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_cmdpb.SplitResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SplitResponse::CopyFrom(const SplitResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_cmdpb.SplitResponse)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool SplitResponse::IsInitialized() const {

  return true;
}

void SplitResponse::Swap(SplitResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SplitResponse::InternalSwap(SplitResponse* other) {
  std::swap(left_, other->left_);
  std::swap(right_, other->right_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SplitResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SplitResponse_descriptor_;
  metadata.reflection = SplitResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SplitResponse

// optional .metapb.Region left = 1;
bool SplitResponse::has_left() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SplitResponse::set_has_left() {
  _has_bits_[0] |= 0x00000001u;
}
void SplitResponse::clear_has_left() {
  _has_bits_[0] &= ~0x00000001u;
}
void SplitResponse::clear_left() {
  if (left_ != NULL) left_->::metapb::Region::Clear();
  clear_has_left();
}
const ::metapb::Region& SplitResponse::left() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.SplitResponse.left)
  return left_ != NULL ? *left_
                         : *::metapb::Region::internal_default_instance();
}
::metapb::Region* SplitResponse::mutable_left() {
  set_has_left();
  if (left_ == NULL) {
    left_ = new ::metapb::Region;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.SplitResponse.left)
  return left_;
}
::metapb::Region* SplitResponse::release_left() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.SplitResponse.left)
  clear_has_left();
  ::metapb::Region* temp = left_;
  left_ = NULL;
  return temp;
}
void SplitResponse::set_allocated_left(::metapb::Region* left) {
  delete left_;
  left_ = left;
  if (left) {
    set_has_left();
  } else {
    clear_has_left();
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.SplitResponse.left)
}

// optional .metapb.Region right = 2;
bool SplitResponse::has_right() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SplitResponse::set_has_right() {
  _has_bits_[0] |= 0x00000002u;
}
void SplitResponse::clear_has_right() {
  _has_bits_[0] &= ~0x00000002u;
}
void SplitResponse::clear_right() {
  if (right_ != NULL) right_->::metapb::Region::Clear();
  clear_has_right();
}
const ::metapb::Region& SplitResponse::right() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.SplitResponse.right)
  return right_ != NULL ? *right_
                         : *::metapb::Region::internal_default_instance();
}
::metapb::Region* SplitResponse::mutable_right() {
  set_has_right();
  if (right_ == NULL) {
    right_ = new ::metapb::Region;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.SplitResponse.right)
  return right_;
}
::metapb::Region* SplitResponse::release_right() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.SplitResponse.right)
  clear_has_right();
  ::metapb::Region* temp = right_;
  right_ = NULL;
  return temp;
}
void SplitResponse::set_allocated_right(::metapb::Region* right) {
  delete right_;
  right_ = right;
  if (right) {
    set_has_right();
  } else {
    clear_has_right();
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.SplitResponse.right)
}

inline const SplitResponse* SplitResponse::internal_default_instance() {
  return &SplitResponse_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CompactLogRequest::kCompactIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CompactLogRequest::CompactLogRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_raft_5fcmdpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_cmdpb.CompactLogRequest)
}

void CompactLogRequest::InitAsDefaultInstance() {
}

CompactLogRequest::CompactLogRequest(const CompactLogRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:raft_cmdpb.CompactLogRequest)
}

void CompactLogRequest::SharedCtor() {
  _cached_size_ = 0;
  compact_index_ = GOOGLE_ULONGLONG(0);
}

CompactLogRequest::~CompactLogRequest() {
  // @@protoc_insertion_point(destructor:raft_cmdpb.CompactLogRequest)
  SharedDtor();
}

void CompactLogRequest::SharedDtor() {
}

void CompactLogRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CompactLogRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CompactLogRequest_descriptor_;
}

const CompactLogRequest& CompactLogRequest::default_instance() {
  protobuf_InitDefaults_raft_5fcmdpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<CompactLogRequest> CompactLogRequest_default_instance_;

CompactLogRequest* CompactLogRequest::New(::google::protobuf::Arena* arena) const {
  CompactLogRequest* n = new CompactLogRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CompactLogRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_cmdpb.CompactLogRequest)
  compact_index_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CompactLogRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_cmdpb.CompactLogRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 compact_index = 1;
      case 1: {
        if (tag == 8) {
          set_has_compact_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &compact_index_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft_cmdpb.CompactLogRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_cmdpb.CompactLogRequest)
  return false;
#undef DO_
}

void CompactLogRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_cmdpb.CompactLogRequest)
  // optional uint64 compact_index = 1;
  if (has_compact_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->compact_index(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:raft_cmdpb.CompactLogRequest)
}

::google::protobuf::uint8* CompactLogRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raft_cmdpb.CompactLogRequest)
  // optional uint64 compact_index = 1;
  if (has_compact_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->compact_index(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft_cmdpb.CompactLogRequest)
  return target;
}

size_t CompactLogRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_cmdpb.CompactLogRequest)
  size_t total_size = 0;

  // optional uint64 compact_index = 1;
  if (has_compact_index()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->compact_index());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CompactLogRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_cmdpb.CompactLogRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CompactLogRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CompactLogRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_cmdpb.CompactLogRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_cmdpb.CompactLogRequest)
    UnsafeMergeFrom(*source);
  }
}

void CompactLogRequest::MergeFrom(const CompactLogRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_cmdpb.CompactLogRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void CompactLogRequest::UnsafeMergeFrom(const CompactLogRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_compact_index()) {
      set_compact_index(from.compact_index());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void CompactLogRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_cmdpb.CompactLogRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CompactLogRequest::CopyFrom(const CompactLogRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_cmdpb.CompactLogRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool CompactLogRequest::IsInitialized() const {

  return true;
}

void CompactLogRequest::Swap(CompactLogRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CompactLogRequest::InternalSwap(CompactLogRequest* other) {
  std::swap(compact_index_, other->compact_index_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CompactLogRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CompactLogRequest_descriptor_;
  metadata.reflection = CompactLogRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CompactLogRequest

// optional uint64 compact_index = 1;
bool CompactLogRequest::has_compact_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CompactLogRequest::set_has_compact_index() {
  _has_bits_[0] |= 0x00000001u;
}
void CompactLogRequest::clear_has_compact_index() {
  _has_bits_[0] &= ~0x00000001u;
}
void CompactLogRequest::clear_compact_index() {
  compact_index_ = GOOGLE_ULONGLONG(0);
  clear_has_compact_index();
}
::google::protobuf::uint64 CompactLogRequest::compact_index() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.CompactLogRequest.compact_index)
  return compact_index_;
}
void CompactLogRequest::set_compact_index(::google::protobuf::uint64 value) {
  set_has_compact_index();
  compact_index_ = value;
  // @@protoc_insertion_point(field_set:raft_cmdpb.CompactLogRequest.compact_index)
}

inline const CompactLogRequest* CompactLogRequest::internal_default_instance() {
  return &CompactLogRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CompactLogResponse::CompactLogResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_raft_5fcmdpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_cmdpb.CompactLogResponse)
}

void CompactLogResponse::InitAsDefaultInstance() {
}

CompactLogResponse::CompactLogResponse(const CompactLogResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:raft_cmdpb.CompactLogResponse)
}

void CompactLogResponse::SharedCtor() {
  _cached_size_ = 0;
}

CompactLogResponse::~CompactLogResponse() {
  // @@protoc_insertion_point(destructor:raft_cmdpb.CompactLogResponse)
  SharedDtor();
}

void CompactLogResponse::SharedDtor() {
}

void CompactLogResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CompactLogResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CompactLogResponse_descriptor_;
}

const CompactLogResponse& CompactLogResponse::default_instance() {
  protobuf_InitDefaults_raft_5fcmdpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<CompactLogResponse> CompactLogResponse_default_instance_;

CompactLogResponse* CompactLogResponse::New(::google::protobuf::Arena* arena) const {
  CompactLogResponse* n = new CompactLogResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CompactLogResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_cmdpb.CompactLogResponse)
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CompactLogResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_cmdpb.CompactLogResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:raft_cmdpb.CompactLogResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_cmdpb.CompactLogResponse)
  return false;
#undef DO_
}

void CompactLogResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_cmdpb.CompactLogResponse)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:raft_cmdpb.CompactLogResponse)
}

::google::protobuf::uint8* CompactLogResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raft_cmdpb.CompactLogResponse)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft_cmdpb.CompactLogResponse)
  return target;
}

size_t CompactLogResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_cmdpb.CompactLogResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CompactLogResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_cmdpb.CompactLogResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CompactLogResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CompactLogResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_cmdpb.CompactLogResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_cmdpb.CompactLogResponse)
    UnsafeMergeFrom(*source);
  }
}

void CompactLogResponse::MergeFrom(const CompactLogResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_cmdpb.CompactLogResponse)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void CompactLogResponse::UnsafeMergeFrom(const CompactLogResponse& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void CompactLogResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_cmdpb.CompactLogResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CompactLogResponse::CopyFrom(const CompactLogResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_cmdpb.CompactLogResponse)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool CompactLogResponse::IsInitialized() const {

  return true;
}

void CompactLogResponse::Swap(CompactLogResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CompactLogResponse::InternalSwap(CompactLogResponse* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CompactLogResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CompactLogResponse_descriptor_;
  metadata.reflection = CompactLogResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CompactLogResponse

inline const CompactLogResponse* CompactLogResponse::internal_default_instance() {
  return &CompactLogResponse_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransferLeaderRequest::kPeerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransferLeaderRequest::TransferLeaderRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_raft_5fcmdpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_cmdpb.TransferLeaderRequest)
}

void TransferLeaderRequest::InitAsDefaultInstance() {
  peer_ = const_cast< ::metapb::Peer*>(
      ::metapb::Peer::internal_default_instance());
}

TransferLeaderRequest::TransferLeaderRequest(const TransferLeaderRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:raft_cmdpb.TransferLeaderRequest)
}

void TransferLeaderRequest::SharedCtor() {
  _cached_size_ = 0;
  peer_ = NULL;
}

TransferLeaderRequest::~TransferLeaderRequest() {
  // @@protoc_insertion_point(destructor:raft_cmdpb.TransferLeaderRequest)
  SharedDtor();
}

void TransferLeaderRequest::SharedDtor() {
  if (this != &TransferLeaderRequest_default_instance_.get()) {
    delete peer_;
  }
}

void TransferLeaderRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransferLeaderRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransferLeaderRequest_descriptor_;
}

const TransferLeaderRequest& TransferLeaderRequest::default_instance() {
  protobuf_InitDefaults_raft_5fcmdpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TransferLeaderRequest> TransferLeaderRequest_default_instance_;

TransferLeaderRequest* TransferLeaderRequest::New(::google::protobuf::Arena* arena) const {
  TransferLeaderRequest* n = new TransferLeaderRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TransferLeaderRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_cmdpb.TransferLeaderRequest)
  if (has_peer()) {
    if (peer_ != NULL) peer_->::metapb::Peer::Clear();
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TransferLeaderRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_cmdpb.TransferLeaderRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .metapb.Peer peer = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_peer()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft_cmdpb.TransferLeaderRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_cmdpb.TransferLeaderRequest)
  return false;
#undef DO_
}

void TransferLeaderRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_cmdpb.TransferLeaderRequest)
  // optional .metapb.Peer peer = 1;
  if (has_peer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->peer_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:raft_cmdpb.TransferLeaderRequest)
}

::google::protobuf::uint8* TransferLeaderRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raft_cmdpb.TransferLeaderRequest)
  // optional .metapb.Peer peer = 1;
  if (has_peer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->peer_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft_cmdpb.TransferLeaderRequest)
  return target;
}

size_t TransferLeaderRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_cmdpb.TransferLeaderRequest)
  size_t total_size = 0;

  // optional .metapb.Peer peer = 1;
  if (has_peer()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->peer_);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransferLeaderRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_cmdpb.TransferLeaderRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TransferLeaderRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TransferLeaderRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_cmdpb.TransferLeaderRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_cmdpb.TransferLeaderRequest)
    UnsafeMergeFrom(*source);
  }
}

void TransferLeaderRequest::MergeFrom(const TransferLeaderRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_cmdpb.TransferLeaderRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TransferLeaderRequest::UnsafeMergeFrom(const TransferLeaderRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_peer()) {
      mutable_peer()->::metapb::Peer::MergeFrom(from.peer());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void TransferLeaderRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_cmdpb.TransferLeaderRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransferLeaderRequest::CopyFrom(const TransferLeaderRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_cmdpb.TransferLeaderRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TransferLeaderRequest::IsInitialized() const {

  return true;
}

void TransferLeaderRequest::Swap(TransferLeaderRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransferLeaderRequest::InternalSwap(TransferLeaderRequest* other) {
  std::swap(peer_, other->peer_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TransferLeaderRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TransferLeaderRequest_descriptor_;
  metadata.reflection = TransferLeaderRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TransferLeaderRequest

// optional .metapb.Peer peer = 1;
bool TransferLeaderRequest::has_peer() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TransferLeaderRequest::set_has_peer() {
  _has_bits_[0] |= 0x00000001u;
}
void TransferLeaderRequest::clear_has_peer() {
  _has_bits_[0] &= ~0x00000001u;
}
void TransferLeaderRequest::clear_peer() {
  if (peer_ != NULL) peer_->::metapb::Peer::Clear();
  clear_has_peer();
}
const ::metapb::Peer& TransferLeaderRequest::peer() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.TransferLeaderRequest.peer)
  return peer_ != NULL ? *peer_
                         : *::metapb::Peer::internal_default_instance();
}
::metapb::Peer* TransferLeaderRequest::mutable_peer() {
  set_has_peer();
  if (peer_ == NULL) {
    peer_ = new ::metapb::Peer;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.TransferLeaderRequest.peer)
  return peer_;
}
::metapb::Peer* TransferLeaderRequest::release_peer() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.TransferLeaderRequest.peer)
  clear_has_peer();
  ::metapb::Peer* temp = peer_;
  peer_ = NULL;
  return temp;
}
void TransferLeaderRequest::set_allocated_peer(::metapb::Peer* peer) {
  delete peer_;
  peer_ = peer;
  if (peer) {
    set_has_peer();
  } else {
    clear_has_peer();
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.TransferLeaderRequest.peer)
}

inline const TransferLeaderRequest* TransferLeaderRequest::internal_default_instance() {
  return &TransferLeaderRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransferLeaderResponse::TransferLeaderResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_raft_5fcmdpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_cmdpb.TransferLeaderResponse)
}

void TransferLeaderResponse::InitAsDefaultInstance() {
}

TransferLeaderResponse::TransferLeaderResponse(const TransferLeaderResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:raft_cmdpb.TransferLeaderResponse)
}

void TransferLeaderResponse::SharedCtor() {
  _cached_size_ = 0;
}

TransferLeaderResponse::~TransferLeaderResponse() {
  // @@protoc_insertion_point(destructor:raft_cmdpb.TransferLeaderResponse)
  SharedDtor();
}

void TransferLeaderResponse::SharedDtor() {
}

void TransferLeaderResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransferLeaderResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransferLeaderResponse_descriptor_;
}

const TransferLeaderResponse& TransferLeaderResponse::default_instance() {
  protobuf_InitDefaults_raft_5fcmdpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TransferLeaderResponse> TransferLeaderResponse_default_instance_;

TransferLeaderResponse* TransferLeaderResponse::New(::google::protobuf::Arena* arena) const {
  TransferLeaderResponse* n = new TransferLeaderResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TransferLeaderResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_cmdpb.TransferLeaderResponse)
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TransferLeaderResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_cmdpb.TransferLeaderResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:raft_cmdpb.TransferLeaderResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_cmdpb.TransferLeaderResponse)
  return false;
#undef DO_
}

void TransferLeaderResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_cmdpb.TransferLeaderResponse)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:raft_cmdpb.TransferLeaderResponse)
}

::google::protobuf::uint8* TransferLeaderResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raft_cmdpb.TransferLeaderResponse)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft_cmdpb.TransferLeaderResponse)
  return target;
}

size_t TransferLeaderResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_cmdpb.TransferLeaderResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransferLeaderResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_cmdpb.TransferLeaderResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TransferLeaderResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TransferLeaderResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_cmdpb.TransferLeaderResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_cmdpb.TransferLeaderResponse)
    UnsafeMergeFrom(*source);
  }
}

void TransferLeaderResponse::MergeFrom(const TransferLeaderResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_cmdpb.TransferLeaderResponse)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TransferLeaderResponse::UnsafeMergeFrom(const TransferLeaderResponse& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void TransferLeaderResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_cmdpb.TransferLeaderResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransferLeaderResponse::CopyFrom(const TransferLeaderResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_cmdpb.TransferLeaderResponse)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TransferLeaderResponse::IsInitialized() const {

  return true;
}

void TransferLeaderResponse::Swap(TransferLeaderResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransferLeaderResponse::InternalSwap(TransferLeaderResponse* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TransferLeaderResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TransferLeaderResponse_descriptor_;
  metadata.reflection = TransferLeaderResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TransferLeaderResponse

inline const TransferLeaderResponse* TransferLeaderResponse::internal_default_instance() {
  return &TransferLeaderResponse_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VerifyHashRequest::kIndexFieldNumber;
const int VerifyHashRequest::kHashFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VerifyHashRequest::VerifyHashRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_raft_5fcmdpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_cmdpb.VerifyHashRequest)
}

void VerifyHashRequest::InitAsDefaultInstance() {
}

VerifyHashRequest::VerifyHashRequest(const VerifyHashRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:raft_cmdpb.VerifyHashRequest)
}

void VerifyHashRequest::SharedCtor() {
  _cached_size_ = 0;
  hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  index_ = GOOGLE_ULONGLONG(0);
}

VerifyHashRequest::~VerifyHashRequest() {
  // @@protoc_insertion_point(destructor:raft_cmdpb.VerifyHashRequest)
  SharedDtor();
}

void VerifyHashRequest::SharedDtor() {
  hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void VerifyHashRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VerifyHashRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VerifyHashRequest_descriptor_;
}

const VerifyHashRequest& VerifyHashRequest::default_instance() {
  protobuf_InitDefaults_raft_5fcmdpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<VerifyHashRequest> VerifyHashRequest_default_instance_;

VerifyHashRequest* VerifyHashRequest::New(::google::protobuf::Arena* arena) const {
  VerifyHashRequest* n = new VerifyHashRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VerifyHashRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_cmdpb.VerifyHashRequest)
  if (_has_bits_[0 / 32] & 3u) {
    index_ = GOOGLE_ULONGLONG(0);
    if (has_hash()) {
      hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool VerifyHashRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_cmdpb.VerifyHashRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 index = 1;
      case 1: {
        if (tag == 8) {
          set_has_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &index_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_hash;
        break;
      }

      // optional bytes hash = 2;
      case 2: {
        if (tag == 18) {
         parse_hash:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_hash()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft_cmdpb.VerifyHashRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_cmdpb.VerifyHashRequest)
  return false;
#undef DO_
}

void VerifyHashRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_cmdpb.VerifyHashRequest)
  // optional uint64 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->index(), output);
  }

  // optional bytes hash = 2;
  if (has_hash()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->hash(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:raft_cmdpb.VerifyHashRequest)
}

::google::protobuf::uint8* VerifyHashRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raft_cmdpb.VerifyHashRequest)
  // optional uint64 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->index(), target);
  }

  // optional bytes hash = 2;
  if (has_hash()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->hash(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft_cmdpb.VerifyHashRequest)
  return target;
}

size_t VerifyHashRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_cmdpb.VerifyHashRequest)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional uint64 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->index());
    }

    // optional bytes hash = 2;
    if (has_hash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->hash());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VerifyHashRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_cmdpb.VerifyHashRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const VerifyHashRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VerifyHashRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_cmdpb.VerifyHashRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_cmdpb.VerifyHashRequest)
    UnsafeMergeFrom(*source);
  }
}

void VerifyHashRequest::MergeFrom(const VerifyHashRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_cmdpb.VerifyHashRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void VerifyHashRequest::UnsafeMergeFrom(const VerifyHashRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_hash()) {
      set_has_hash();
      hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hash_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void VerifyHashRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_cmdpb.VerifyHashRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VerifyHashRequest::CopyFrom(const VerifyHashRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_cmdpb.VerifyHashRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool VerifyHashRequest::IsInitialized() const {

  return true;
}

void VerifyHashRequest::Swap(VerifyHashRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VerifyHashRequest::InternalSwap(VerifyHashRequest* other) {
  std::swap(index_, other->index_);
  hash_.Swap(&other->hash_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VerifyHashRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VerifyHashRequest_descriptor_;
  metadata.reflection = VerifyHashRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VerifyHashRequest

// optional uint64 index = 1;
bool VerifyHashRequest::has_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void VerifyHashRequest::set_has_index() {
  _has_bits_[0] |= 0x00000001u;
}
void VerifyHashRequest::clear_has_index() {
  _has_bits_[0] &= ~0x00000001u;
}
void VerifyHashRequest::clear_index() {
  index_ = GOOGLE_ULONGLONG(0);
  clear_has_index();
}
::google::protobuf::uint64 VerifyHashRequest::index() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.VerifyHashRequest.index)
  return index_;
}
void VerifyHashRequest::set_index(::google::protobuf::uint64 value) {
  set_has_index();
  index_ = value;
  // @@protoc_insertion_point(field_set:raft_cmdpb.VerifyHashRequest.index)
}

// optional bytes hash = 2;
bool VerifyHashRequest::has_hash() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void VerifyHashRequest::set_has_hash() {
  _has_bits_[0] |= 0x00000002u;
}
void VerifyHashRequest::clear_has_hash() {
  _has_bits_[0] &= ~0x00000002u;
}
void VerifyHashRequest::clear_hash() {
  hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_hash();
}
const ::std::string& VerifyHashRequest::hash() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.VerifyHashRequest.hash)
  return hash_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VerifyHashRequest::set_hash(const ::std::string& value) {
  set_has_hash();
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raft_cmdpb.VerifyHashRequest.hash)
}
void VerifyHashRequest::set_hash(const char* value) {
  set_has_hash();
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raft_cmdpb.VerifyHashRequest.hash)
}
void VerifyHashRequest::set_hash(const void* value, size_t size) {
  set_has_hash();
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raft_cmdpb.VerifyHashRequest.hash)
}
::std::string* VerifyHashRequest::mutable_hash() {
  set_has_hash();
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.VerifyHashRequest.hash)
  return hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VerifyHashRequest::release_hash() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.VerifyHashRequest.hash)
  clear_has_hash();
  return hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VerifyHashRequest::set_allocated_hash(::std::string* hash) {
  if (hash != NULL) {
    set_has_hash();
  } else {
    clear_has_hash();
  }
  hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hash);
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.VerifyHashRequest.hash)
}

inline const VerifyHashRequest* VerifyHashRequest::internal_default_instance() {
  return &VerifyHashRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VerifyHashResponse::VerifyHashResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_raft_5fcmdpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_cmdpb.VerifyHashResponse)
}

void VerifyHashResponse::InitAsDefaultInstance() {
}

VerifyHashResponse::VerifyHashResponse(const VerifyHashResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:raft_cmdpb.VerifyHashResponse)
}

void VerifyHashResponse::SharedCtor() {
  _cached_size_ = 0;
}

VerifyHashResponse::~VerifyHashResponse() {
  // @@protoc_insertion_point(destructor:raft_cmdpb.VerifyHashResponse)
  SharedDtor();
}

void VerifyHashResponse::SharedDtor() {
}

void VerifyHashResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VerifyHashResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VerifyHashResponse_descriptor_;
}

const VerifyHashResponse& VerifyHashResponse::default_instance() {
  protobuf_InitDefaults_raft_5fcmdpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<VerifyHashResponse> VerifyHashResponse_default_instance_;

VerifyHashResponse* VerifyHashResponse::New(::google::protobuf::Arena* arena) const {
  VerifyHashResponse* n = new VerifyHashResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VerifyHashResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_cmdpb.VerifyHashResponse)
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool VerifyHashResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_cmdpb.VerifyHashResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:raft_cmdpb.VerifyHashResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_cmdpb.VerifyHashResponse)
  return false;
#undef DO_
}

void VerifyHashResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_cmdpb.VerifyHashResponse)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:raft_cmdpb.VerifyHashResponse)
}

::google::protobuf::uint8* VerifyHashResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raft_cmdpb.VerifyHashResponse)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft_cmdpb.VerifyHashResponse)
  return target;
}

size_t VerifyHashResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_cmdpb.VerifyHashResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VerifyHashResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_cmdpb.VerifyHashResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const VerifyHashResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VerifyHashResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_cmdpb.VerifyHashResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_cmdpb.VerifyHashResponse)
    UnsafeMergeFrom(*source);
  }
}

void VerifyHashResponse::MergeFrom(const VerifyHashResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_cmdpb.VerifyHashResponse)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void VerifyHashResponse::UnsafeMergeFrom(const VerifyHashResponse& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void VerifyHashResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_cmdpb.VerifyHashResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VerifyHashResponse::CopyFrom(const VerifyHashResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_cmdpb.VerifyHashResponse)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool VerifyHashResponse::IsInitialized() const {

  return true;
}

void VerifyHashResponse::Swap(VerifyHashResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VerifyHashResponse::InternalSwap(VerifyHashResponse* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VerifyHashResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VerifyHashResponse_descriptor_;
  metadata.reflection = VerifyHashResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VerifyHashResponse

inline const VerifyHashResponse* VerifyHashResponse::internal_default_instance() {
  return &VerifyHashResponse_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AdminRequest::kCmdTypeFieldNumber;
const int AdminRequest::kChangePeerFieldNumber;
const int AdminRequest::kSplitFieldNumber;
const int AdminRequest::kCompactLogFieldNumber;
const int AdminRequest::kTransferLeaderFieldNumber;
const int AdminRequest::kVerifyHashFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AdminRequest::AdminRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_raft_5fcmdpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_cmdpb.AdminRequest)
}

void AdminRequest::InitAsDefaultInstance() {
  change_peer_ = const_cast< ::raft_cmdpb::ChangePeerRequest*>(
      ::raft_cmdpb::ChangePeerRequest::internal_default_instance());
  split_ = const_cast< ::raft_cmdpb::SplitRequest*>(
      ::raft_cmdpb::SplitRequest::internal_default_instance());
  compact_log_ = const_cast< ::raft_cmdpb::CompactLogRequest*>(
      ::raft_cmdpb::CompactLogRequest::internal_default_instance());
  transfer_leader_ = const_cast< ::raft_cmdpb::TransferLeaderRequest*>(
      ::raft_cmdpb::TransferLeaderRequest::internal_default_instance());
  verify_hash_ = const_cast< ::raft_cmdpb::VerifyHashRequest*>(
      ::raft_cmdpb::VerifyHashRequest::internal_default_instance());
}

AdminRequest::AdminRequest(const AdminRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:raft_cmdpb.AdminRequest)
}

void AdminRequest::SharedCtor() {
  _cached_size_ = 0;
  change_peer_ = NULL;
  split_ = NULL;
  compact_log_ = NULL;
  transfer_leader_ = NULL;
  verify_hash_ = NULL;
  cmd_type_ = 0;
}

AdminRequest::~AdminRequest() {
  // @@protoc_insertion_point(destructor:raft_cmdpb.AdminRequest)
  SharedDtor();
}

void AdminRequest::SharedDtor() {
  if (this != &AdminRequest_default_instance_.get()) {
    delete change_peer_;
    delete split_;
    delete compact_log_;
    delete transfer_leader_;
    delete verify_hash_;
  }
}

void AdminRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AdminRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AdminRequest_descriptor_;
}

const AdminRequest& AdminRequest::default_instance() {
  protobuf_InitDefaults_raft_5fcmdpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<AdminRequest> AdminRequest_default_instance_;

AdminRequest* AdminRequest::New(::google::protobuf::Arena* arena) const {
  AdminRequest* n = new AdminRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AdminRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_cmdpb.AdminRequest)
  if (_has_bits_[0 / 32] & 63u) {
    cmd_type_ = 0;
    if (has_change_peer()) {
      if (change_peer_ != NULL) change_peer_->::raft_cmdpb::ChangePeerRequest::Clear();
    }
    if (has_split()) {
      if (split_ != NULL) split_->::raft_cmdpb::SplitRequest::Clear();
    }
    if (has_compact_log()) {
      if (compact_log_ != NULL) compact_log_->::raft_cmdpb::CompactLogRequest::Clear();
    }
    if (has_transfer_leader()) {
      if (transfer_leader_ != NULL) transfer_leader_->::raft_cmdpb::TransferLeaderRequest::Clear();
    }
    if (has_verify_hash()) {
      if (verify_hash_ != NULL) verify_hash_->::raft_cmdpb::VerifyHashRequest::Clear();
    }
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool AdminRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_cmdpb.AdminRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .raft_cmdpb.AdminCmdType cmd_type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::raft_cmdpb::AdminCmdType_IsValid(value)) {
            set_cmd_type(static_cast< ::raft_cmdpb::AdminCmdType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_change_peer;
        break;
      }

      // optional .raft_cmdpb.ChangePeerRequest change_peer = 2;
      case 2: {
        if (tag == 18) {
         parse_change_peer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_change_peer()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_split;
        break;
      }

      // optional .raft_cmdpb.SplitRequest split = 3;
      case 3: {
        if (tag == 26) {
         parse_split:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_split()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_compact_log;
        break;
      }

      // optional .raft_cmdpb.CompactLogRequest compact_log = 4;
      case 4: {
        if (tag == 34) {
         parse_compact_log:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_compact_log()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_transfer_leader;
        break;
      }

      // optional .raft_cmdpb.TransferLeaderRequest transfer_leader = 5;
      case 5: {
        if (tag == 42) {
         parse_transfer_leader:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transfer_leader()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_verify_hash;
        break;
      }

      // optional .raft_cmdpb.VerifyHashRequest verify_hash = 6;
      case 6: {
        if (tag == 50) {
         parse_verify_hash:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_verify_hash()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft_cmdpb.AdminRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_cmdpb.AdminRequest)
  return false;
#undef DO_
}

void AdminRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_cmdpb.AdminRequest)
  // optional .raft_cmdpb.AdminCmdType cmd_type = 1;
  if (has_cmd_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd_type(), output);
  }

  // optional .raft_cmdpb.ChangePeerRequest change_peer = 2;
  if (has_change_peer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->change_peer_, output);
  }

  // optional .raft_cmdpb.SplitRequest split = 3;
  if (has_split()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->split_, output);
  }

  // optional .raft_cmdpb.CompactLogRequest compact_log = 4;
  if (has_compact_log()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->compact_log_, output);
  }

  // optional .raft_cmdpb.TransferLeaderRequest transfer_leader = 5;
  if (has_transfer_leader()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->transfer_leader_, output);
  }

  // optional .raft_cmdpb.VerifyHashRequest verify_hash = 6;
  if (has_verify_hash()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->verify_hash_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:raft_cmdpb.AdminRequest)
}

::google::protobuf::uint8* AdminRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raft_cmdpb.AdminRequest)
  // optional .raft_cmdpb.AdminCmdType cmd_type = 1;
  if (has_cmd_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd_type(), target);
  }

  // optional .raft_cmdpb.ChangePeerRequest change_peer = 2;
  if (has_change_peer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->change_peer_, false, target);
  }

  // optional .raft_cmdpb.SplitRequest split = 3;
  if (has_split()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->split_, false, target);
  }

  // optional .raft_cmdpb.CompactLogRequest compact_log = 4;
  if (has_compact_log()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->compact_log_, false, target);
  }

  // optional .raft_cmdpb.TransferLeaderRequest transfer_leader = 5;
  if (has_transfer_leader()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->transfer_leader_, false, target);
  }

  // optional .raft_cmdpb.VerifyHashRequest verify_hash = 6;
  if (has_verify_hash()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->verify_hash_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft_cmdpb.AdminRequest)
  return target;
}

size_t AdminRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_cmdpb.AdminRequest)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 63u) {
    // optional .raft_cmdpb.AdminCmdType cmd_type = 1;
    if (has_cmd_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd_type());
    }

    // optional .raft_cmdpb.ChangePeerRequest change_peer = 2;
    if (has_change_peer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->change_peer_);
    }

    // optional .raft_cmdpb.SplitRequest split = 3;
    if (has_split()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->split_);
    }

    // optional .raft_cmdpb.CompactLogRequest compact_log = 4;
    if (has_compact_log()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->compact_log_);
    }

    // optional .raft_cmdpb.TransferLeaderRequest transfer_leader = 5;
    if (has_transfer_leader()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->transfer_leader_);
    }

    // optional .raft_cmdpb.VerifyHashRequest verify_hash = 6;
    if (has_verify_hash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->verify_hash_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AdminRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_cmdpb.AdminRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const AdminRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AdminRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_cmdpb.AdminRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_cmdpb.AdminRequest)
    UnsafeMergeFrom(*source);
  }
}

void AdminRequest::MergeFrom(const AdminRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_cmdpb.AdminRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void AdminRequest::UnsafeMergeFrom(const AdminRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd_type()) {
      set_cmd_type(from.cmd_type());
    }
    if (from.has_change_peer()) {
      mutable_change_peer()->::raft_cmdpb::ChangePeerRequest::MergeFrom(from.change_peer());
    }
    if (from.has_split()) {
      mutable_split()->::raft_cmdpb::SplitRequest::MergeFrom(from.split());
    }
    if (from.has_compact_log()) {
      mutable_compact_log()->::raft_cmdpb::CompactLogRequest::MergeFrom(from.compact_log());
    }
    if (from.has_transfer_leader()) {
      mutable_transfer_leader()->::raft_cmdpb::TransferLeaderRequest::MergeFrom(from.transfer_leader());
    }
    if (from.has_verify_hash()) {
      mutable_verify_hash()->::raft_cmdpb::VerifyHashRequest::MergeFrom(from.verify_hash());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void AdminRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_cmdpb.AdminRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AdminRequest::CopyFrom(const AdminRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_cmdpb.AdminRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool AdminRequest::IsInitialized() const {

  return true;
}

void AdminRequest::Swap(AdminRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AdminRequest::InternalSwap(AdminRequest* other) {
  std::swap(cmd_type_, other->cmd_type_);
  std::swap(change_peer_, other->change_peer_);
  std::swap(split_, other->split_);
  std::swap(compact_log_, other->compact_log_);
  std::swap(transfer_leader_, other->transfer_leader_);
  std::swap(verify_hash_, other->verify_hash_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AdminRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AdminRequest_descriptor_;
  metadata.reflection = AdminRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AdminRequest

// optional .raft_cmdpb.AdminCmdType cmd_type = 1;
bool AdminRequest::has_cmd_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void AdminRequest::set_has_cmd_type() {
  _has_bits_[0] |= 0x00000001u;
}
void AdminRequest::clear_has_cmd_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void AdminRequest::clear_cmd_type() {
  cmd_type_ = 0;
  clear_has_cmd_type();
}
::raft_cmdpb::AdminCmdType AdminRequest::cmd_type() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.AdminRequest.cmd_type)
  return static_cast< ::raft_cmdpb::AdminCmdType >(cmd_type_);
}
void AdminRequest::set_cmd_type(::raft_cmdpb::AdminCmdType value) {
  assert(::raft_cmdpb::AdminCmdType_IsValid(value));
  set_has_cmd_type();
  cmd_type_ = value;
  // @@protoc_insertion_point(field_set:raft_cmdpb.AdminRequest.cmd_type)
}

// optional .raft_cmdpb.ChangePeerRequest change_peer = 2;
bool AdminRequest::has_change_peer() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void AdminRequest::set_has_change_peer() {
  _has_bits_[0] |= 0x00000002u;
}
void AdminRequest::clear_has_change_peer() {
  _has_bits_[0] &= ~0x00000002u;
}
void AdminRequest::clear_change_peer() {
  if (change_peer_ != NULL) change_peer_->::raft_cmdpb::ChangePeerRequest::Clear();
  clear_has_change_peer();
}
const ::raft_cmdpb::ChangePeerRequest& AdminRequest::change_peer() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.AdminRequest.change_peer)
  return change_peer_ != NULL ? *change_peer_
                         : *::raft_cmdpb::ChangePeerRequest::internal_default_instance();
}
::raft_cmdpb::ChangePeerRequest* AdminRequest::mutable_change_peer() {
  set_has_change_peer();
  if (change_peer_ == NULL) {
    change_peer_ = new ::raft_cmdpb::ChangePeerRequest;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.AdminRequest.change_peer)
  return change_peer_;
}
::raft_cmdpb::ChangePeerRequest* AdminRequest::release_change_peer() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.AdminRequest.change_peer)
  clear_has_change_peer();
  ::raft_cmdpb::ChangePeerRequest* temp = change_peer_;
  change_peer_ = NULL;
  return temp;
}
void AdminRequest::set_allocated_change_peer(::raft_cmdpb::ChangePeerRequest* change_peer) {
  delete change_peer_;
  change_peer_ = change_peer;
  if (change_peer) {
    set_has_change_peer();
  } else {
    clear_has_change_peer();
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.AdminRequest.change_peer)
}

// optional .raft_cmdpb.SplitRequest split = 3;
bool AdminRequest::has_split() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void AdminRequest::set_has_split() {
  _has_bits_[0] |= 0x00000004u;
}
void AdminRequest::clear_has_split() {
  _has_bits_[0] &= ~0x00000004u;
}
void AdminRequest::clear_split() {
  if (split_ != NULL) split_->::raft_cmdpb::SplitRequest::Clear();
  clear_has_split();
}
const ::raft_cmdpb::SplitRequest& AdminRequest::split() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.AdminRequest.split)
  return split_ != NULL ? *split_
                         : *::raft_cmdpb::SplitRequest::internal_default_instance();
}
::raft_cmdpb::SplitRequest* AdminRequest::mutable_split() {
  set_has_split();
  if (split_ == NULL) {
    split_ = new ::raft_cmdpb::SplitRequest;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.AdminRequest.split)
  return split_;
}
::raft_cmdpb::SplitRequest* AdminRequest::release_split() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.AdminRequest.split)
  clear_has_split();
  ::raft_cmdpb::SplitRequest* temp = split_;
  split_ = NULL;
  return temp;
}
void AdminRequest::set_allocated_split(::raft_cmdpb::SplitRequest* split) {
  delete split_;
  split_ = split;
  if (split) {
    set_has_split();
  } else {
    clear_has_split();
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.AdminRequest.split)
}

// optional .raft_cmdpb.CompactLogRequest compact_log = 4;
bool AdminRequest::has_compact_log() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void AdminRequest::set_has_compact_log() {
  _has_bits_[0] |= 0x00000008u;
}
void AdminRequest::clear_has_compact_log() {
  _has_bits_[0] &= ~0x00000008u;
}
void AdminRequest::clear_compact_log() {
  if (compact_log_ != NULL) compact_log_->::raft_cmdpb::CompactLogRequest::Clear();
  clear_has_compact_log();
}
const ::raft_cmdpb::CompactLogRequest& AdminRequest::compact_log() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.AdminRequest.compact_log)
  return compact_log_ != NULL ? *compact_log_
                         : *::raft_cmdpb::CompactLogRequest::internal_default_instance();
}
::raft_cmdpb::CompactLogRequest* AdminRequest::mutable_compact_log() {
  set_has_compact_log();
  if (compact_log_ == NULL) {
    compact_log_ = new ::raft_cmdpb::CompactLogRequest;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.AdminRequest.compact_log)
  return compact_log_;
}
::raft_cmdpb::CompactLogRequest* AdminRequest::release_compact_log() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.AdminRequest.compact_log)
  clear_has_compact_log();
  ::raft_cmdpb::CompactLogRequest* temp = compact_log_;
  compact_log_ = NULL;
  return temp;
}
void AdminRequest::set_allocated_compact_log(::raft_cmdpb::CompactLogRequest* compact_log) {
  delete compact_log_;
  compact_log_ = compact_log;
  if (compact_log) {
    set_has_compact_log();
  } else {
    clear_has_compact_log();
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.AdminRequest.compact_log)
}

// optional .raft_cmdpb.TransferLeaderRequest transfer_leader = 5;
bool AdminRequest::has_transfer_leader() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void AdminRequest::set_has_transfer_leader() {
  _has_bits_[0] |= 0x00000010u;
}
void AdminRequest::clear_has_transfer_leader() {
  _has_bits_[0] &= ~0x00000010u;
}
void AdminRequest::clear_transfer_leader() {
  if (transfer_leader_ != NULL) transfer_leader_->::raft_cmdpb::TransferLeaderRequest::Clear();
  clear_has_transfer_leader();
}
const ::raft_cmdpb::TransferLeaderRequest& AdminRequest::transfer_leader() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.AdminRequest.transfer_leader)
  return transfer_leader_ != NULL ? *transfer_leader_
                         : *::raft_cmdpb::TransferLeaderRequest::internal_default_instance();
}
::raft_cmdpb::TransferLeaderRequest* AdminRequest::mutable_transfer_leader() {
  set_has_transfer_leader();
  if (transfer_leader_ == NULL) {
    transfer_leader_ = new ::raft_cmdpb::TransferLeaderRequest;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.AdminRequest.transfer_leader)
  return transfer_leader_;
}
::raft_cmdpb::TransferLeaderRequest* AdminRequest::release_transfer_leader() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.AdminRequest.transfer_leader)
  clear_has_transfer_leader();
  ::raft_cmdpb::TransferLeaderRequest* temp = transfer_leader_;
  transfer_leader_ = NULL;
  return temp;
}
void AdminRequest::set_allocated_transfer_leader(::raft_cmdpb::TransferLeaderRequest* transfer_leader) {
  delete transfer_leader_;
  transfer_leader_ = transfer_leader;
  if (transfer_leader) {
    set_has_transfer_leader();
  } else {
    clear_has_transfer_leader();
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.AdminRequest.transfer_leader)
}

// optional .raft_cmdpb.VerifyHashRequest verify_hash = 6;
bool AdminRequest::has_verify_hash() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void AdminRequest::set_has_verify_hash() {
  _has_bits_[0] |= 0x00000020u;
}
void AdminRequest::clear_has_verify_hash() {
  _has_bits_[0] &= ~0x00000020u;
}
void AdminRequest::clear_verify_hash() {
  if (verify_hash_ != NULL) verify_hash_->::raft_cmdpb::VerifyHashRequest::Clear();
  clear_has_verify_hash();
}
const ::raft_cmdpb::VerifyHashRequest& AdminRequest::verify_hash() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.AdminRequest.verify_hash)
  return verify_hash_ != NULL ? *verify_hash_
                         : *::raft_cmdpb::VerifyHashRequest::internal_default_instance();
}
::raft_cmdpb::VerifyHashRequest* AdminRequest::mutable_verify_hash() {
  set_has_verify_hash();
  if (verify_hash_ == NULL) {
    verify_hash_ = new ::raft_cmdpb::VerifyHashRequest;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.AdminRequest.verify_hash)
  return verify_hash_;
}
::raft_cmdpb::VerifyHashRequest* AdminRequest::release_verify_hash() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.AdminRequest.verify_hash)
  clear_has_verify_hash();
  ::raft_cmdpb::VerifyHashRequest* temp = verify_hash_;
  verify_hash_ = NULL;
  return temp;
}
void AdminRequest::set_allocated_verify_hash(::raft_cmdpb::VerifyHashRequest* verify_hash) {
  delete verify_hash_;
  verify_hash_ = verify_hash;
  if (verify_hash) {
    set_has_verify_hash();
  } else {
    clear_has_verify_hash();
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.AdminRequest.verify_hash)
}

inline const AdminRequest* AdminRequest::internal_default_instance() {
  return &AdminRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AdminResponse::kCmdTypeFieldNumber;
const int AdminResponse::kChangePeerFieldNumber;
const int AdminResponse::kSplitFieldNumber;
const int AdminResponse::kCompactLogFieldNumber;
const int AdminResponse::kTransferLeaderFieldNumber;
const int AdminResponse::kVerifyHashFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AdminResponse::AdminResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_raft_5fcmdpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_cmdpb.AdminResponse)
}

void AdminResponse::InitAsDefaultInstance() {
  change_peer_ = const_cast< ::raft_cmdpb::ChangePeerResponse*>(
      ::raft_cmdpb::ChangePeerResponse::internal_default_instance());
  split_ = const_cast< ::raft_cmdpb::SplitResponse*>(
      ::raft_cmdpb::SplitResponse::internal_default_instance());
  compact_log_ = const_cast< ::raft_cmdpb::CompactLogResponse*>(
      ::raft_cmdpb::CompactLogResponse::internal_default_instance());
  transfer_leader_ = const_cast< ::raft_cmdpb::TransferLeaderResponse*>(
      ::raft_cmdpb::TransferLeaderResponse::internal_default_instance());
  verify_hash_ = const_cast< ::raft_cmdpb::VerifyHashResponse*>(
      ::raft_cmdpb::VerifyHashResponse::internal_default_instance());
}

AdminResponse::AdminResponse(const AdminResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:raft_cmdpb.AdminResponse)
}

void AdminResponse::SharedCtor() {
  _cached_size_ = 0;
  change_peer_ = NULL;
  split_ = NULL;
  compact_log_ = NULL;
  transfer_leader_ = NULL;
  verify_hash_ = NULL;
  cmd_type_ = 0;
}

AdminResponse::~AdminResponse() {
  // @@protoc_insertion_point(destructor:raft_cmdpb.AdminResponse)
  SharedDtor();
}

void AdminResponse::SharedDtor() {
  if (this != &AdminResponse_default_instance_.get()) {
    delete change_peer_;
    delete split_;
    delete compact_log_;
    delete transfer_leader_;
    delete verify_hash_;
  }
}

void AdminResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AdminResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AdminResponse_descriptor_;
}

const AdminResponse& AdminResponse::default_instance() {
  protobuf_InitDefaults_raft_5fcmdpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<AdminResponse> AdminResponse_default_instance_;

AdminResponse* AdminResponse::New(::google::protobuf::Arena* arena) const {
  AdminResponse* n = new AdminResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AdminResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_cmdpb.AdminResponse)
  if (_has_bits_[0 / 32] & 63u) {
    cmd_type_ = 0;
    if (has_change_peer()) {
      if (change_peer_ != NULL) change_peer_->::raft_cmdpb::ChangePeerResponse::Clear();
    }
    if (has_split()) {
      if (split_ != NULL) split_->::raft_cmdpb::SplitResponse::Clear();
    }
    if (has_compact_log()) {
      if (compact_log_ != NULL) compact_log_->::raft_cmdpb::CompactLogResponse::Clear();
    }
    if (has_transfer_leader()) {
      if (transfer_leader_ != NULL) transfer_leader_->::raft_cmdpb::TransferLeaderResponse::Clear();
    }
    if (has_verify_hash()) {
      if (verify_hash_ != NULL) verify_hash_->::raft_cmdpb::VerifyHashResponse::Clear();
    }
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool AdminResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_cmdpb.AdminResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .raft_cmdpb.AdminCmdType cmd_type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::raft_cmdpb::AdminCmdType_IsValid(value)) {
            set_cmd_type(static_cast< ::raft_cmdpb::AdminCmdType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_change_peer;
        break;
      }

      // optional .raft_cmdpb.ChangePeerResponse change_peer = 2;
      case 2: {
        if (tag == 18) {
         parse_change_peer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_change_peer()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_split;
        break;
      }

      // optional .raft_cmdpb.SplitResponse split = 3;
      case 3: {
        if (tag == 26) {
         parse_split:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_split()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_compact_log;
        break;
      }

      // optional .raft_cmdpb.CompactLogResponse compact_log = 4;
      case 4: {
        if (tag == 34) {
         parse_compact_log:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_compact_log()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_transfer_leader;
        break;
      }

      // optional .raft_cmdpb.TransferLeaderResponse transfer_leader = 5;
      case 5: {
        if (tag == 42) {
         parse_transfer_leader:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transfer_leader()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_verify_hash;
        break;
      }

      // optional .raft_cmdpb.VerifyHashResponse verify_hash = 6;
      case 6: {
        if (tag == 50) {
         parse_verify_hash:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_verify_hash()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft_cmdpb.AdminResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_cmdpb.AdminResponse)
  return false;
#undef DO_
}

void AdminResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_cmdpb.AdminResponse)
  // optional .raft_cmdpb.AdminCmdType cmd_type = 1;
  if (has_cmd_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd_type(), output);
  }

  // optional .raft_cmdpb.ChangePeerResponse change_peer = 2;
  if (has_change_peer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->change_peer_, output);
  }

  // optional .raft_cmdpb.SplitResponse split = 3;
  if (has_split()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->split_, output);
  }

  // optional .raft_cmdpb.CompactLogResponse compact_log = 4;
  if (has_compact_log()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->compact_log_, output);
  }

  // optional .raft_cmdpb.TransferLeaderResponse transfer_leader = 5;
  if (has_transfer_leader()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->transfer_leader_, output);
  }

  // optional .raft_cmdpb.VerifyHashResponse verify_hash = 6;
  if (has_verify_hash()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->verify_hash_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:raft_cmdpb.AdminResponse)
}

::google::protobuf::uint8* AdminResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raft_cmdpb.AdminResponse)
  // optional .raft_cmdpb.AdminCmdType cmd_type = 1;
  if (has_cmd_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd_type(), target);
  }

  // optional .raft_cmdpb.ChangePeerResponse change_peer = 2;
  if (has_change_peer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->change_peer_, false, target);
  }

  // optional .raft_cmdpb.SplitResponse split = 3;
  if (has_split()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->split_, false, target);
  }

  // optional .raft_cmdpb.CompactLogResponse compact_log = 4;
  if (has_compact_log()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->compact_log_, false, target);
  }

  // optional .raft_cmdpb.TransferLeaderResponse transfer_leader = 5;
  if (has_transfer_leader()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->transfer_leader_, false, target);
  }

  // optional .raft_cmdpb.VerifyHashResponse verify_hash = 6;
  if (has_verify_hash()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->verify_hash_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft_cmdpb.AdminResponse)
  return target;
}

size_t AdminResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_cmdpb.AdminResponse)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 63u) {
    // optional .raft_cmdpb.AdminCmdType cmd_type = 1;
    if (has_cmd_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd_type());
    }

    // optional .raft_cmdpb.ChangePeerResponse change_peer = 2;
    if (has_change_peer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->change_peer_);
    }

    // optional .raft_cmdpb.SplitResponse split = 3;
    if (has_split()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->split_);
    }

    // optional .raft_cmdpb.CompactLogResponse compact_log = 4;
    if (has_compact_log()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->compact_log_);
    }

    // optional .raft_cmdpb.TransferLeaderResponse transfer_leader = 5;
    if (has_transfer_leader()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->transfer_leader_);
    }

    // optional .raft_cmdpb.VerifyHashResponse verify_hash = 6;
    if (has_verify_hash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->verify_hash_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AdminResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_cmdpb.AdminResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const AdminResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AdminResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_cmdpb.AdminResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_cmdpb.AdminResponse)
    UnsafeMergeFrom(*source);
  }
}

void AdminResponse::MergeFrom(const AdminResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_cmdpb.AdminResponse)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void AdminResponse::UnsafeMergeFrom(const AdminResponse& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd_type()) {
      set_cmd_type(from.cmd_type());
    }
    if (from.has_change_peer()) {
      mutable_change_peer()->::raft_cmdpb::ChangePeerResponse::MergeFrom(from.change_peer());
    }
    if (from.has_split()) {
      mutable_split()->::raft_cmdpb::SplitResponse::MergeFrom(from.split());
    }
    if (from.has_compact_log()) {
      mutable_compact_log()->::raft_cmdpb::CompactLogResponse::MergeFrom(from.compact_log());
    }
    if (from.has_transfer_leader()) {
      mutable_transfer_leader()->::raft_cmdpb::TransferLeaderResponse::MergeFrom(from.transfer_leader());
    }
    if (from.has_verify_hash()) {
      mutable_verify_hash()->::raft_cmdpb::VerifyHashResponse::MergeFrom(from.verify_hash());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void AdminResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_cmdpb.AdminResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AdminResponse::CopyFrom(const AdminResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_cmdpb.AdminResponse)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool AdminResponse::IsInitialized() const {

  return true;
}

void AdminResponse::Swap(AdminResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AdminResponse::InternalSwap(AdminResponse* other) {
  std::swap(cmd_type_, other->cmd_type_);
  std::swap(change_peer_, other->change_peer_);
  std::swap(split_, other->split_);
  std::swap(compact_log_, other->compact_log_);
  std::swap(transfer_leader_, other->transfer_leader_);
  std::swap(verify_hash_, other->verify_hash_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AdminResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AdminResponse_descriptor_;
  metadata.reflection = AdminResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AdminResponse

// optional .raft_cmdpb.AdminCmdType cmd_type = 1;
bool AdminResponse::has_cmd_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void AdminResponse::set_has_cmd_type() {
  _has_bits_[0] |= 0x00000001u;
}
void AdminResponse::clear_has_cmd_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void AdminResponse::clear_cmd_type() {
  cmd_type_ = 0;
  clear_has_cmd_type();
}
::raft_cmdpb::AdminCmdType AdminResponse::cmd_type() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.AdminResponse.cmd_type)
  return static_cast< ::raft_cmdpb::AdminCmdType >(cmd_type_);
}
void AdminResponse::set_cmd_type(::raft_cmdpb::AdminCmdType value) {
  assert(::raft_cmdpb::AdminCmdType_IsValid(value));
  set_has_cmd_type();
  cmd_type_ = value;
  // @@protoc_insertion_point(field_set:raft_cmdpb.AdminResponse.cmd_type)
}

// optional .raft_cmdpb.ChangePeerResponse change_peer = 2;
bool AdminResponse::has_change_peer() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void AdminResponse::set_has_change_peer() {
  _has_bits_[0] |= 0x00000002u;
}
void AdminResponse::clear_has_change_peer() {
  _has_bits_[0] &= ~0x00000002u;
}
void AdminResponse::clear_change_peer() {
  if (change_peer_ != NULL) change_peer_->::raft_cmdpb::ChangePeerResponse::Clear();
  clear_has_change_peer();
}
const ::raft_cmdpb::ChangePeerResponse& AdminResponse::change_peer() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.AdminResponse.change_peer)
  return change_peer_ != NULL ? *change_peer_
                         : *::raft_cmdpb::ChangePeerResponse::internal_default_instance();
}
::raft_cmdpb::ChangePeerResponse* AdminResponse::mutable_change_peer() {
  set_has_change_peer();
  if (change_peer_ == NULL) {
    change_peer_ = new ::raft_cmdpb::ChangePeerResponse;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.AdminResponse.change_peer)
  return change_peer_;
}
::raft_cmdpb::ChangePeerResponse* AdminResponse::release_change_peer() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.AdminResponse.change_peer)
  clear_has_change_peer();
  ::raft_cmdpb::ChangePeerResponse* temp = change_peer_;
  change_peer_ = NULL;
  return temp;
}
void AdminResponse::set_allocated_change_peer(::raft_cmdpb::ChangePeerResponse* change_peer) {
  delete change_peer_;
  change_peer_ = change_peer;
  if (change_peer) {
    set_has_change_peer();
  } else {
    clear_has_change_peer();
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.AdminResponse.change_peer)
}

// optional .raft_cmdpb.SplitResponse split = 3;
bool AdminResponse::has_split() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void AdminResponse::set_has_split() {
  _has_bits_[0] |= 0x00000004u;
}
void AdminResponse::clear_has_split() {
  _has_bits_[0] &= ~0x00000004u;
}
void AdminResponse::clear_split() {
  if (split_ != NULL) split_->::raft_cmdpb::SplitResponse::Clear();
  clear_has_split();
}
const ::raft_cmdpb::SplitResponse& AdminResponse::split() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.AdminResponse.split)
  return split_ != NULL ? *split_
                         : *::raft_cmdpb::SplitResponse::internal_default_instance();
}
::raft_cmdpb::SplitResponse* AdminResponse::mutable_split() {
  set_has_split();
  if (split_ == NULL) {
    split_ = new ::raft_cmdpb::SplitResponse;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.AdminResponse.split)
  return split_;
}
::raft_cmdpb::SplitResponse* AdminResponse::release_split() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.AdminResponse.split)
  clear_has_split();
  ::raft_cmdpb::SplitResponse* temp = split_;
  split_ = NULL;
  return temp;
}
void AdminResponse::set_allocated_split(::raft_cmdpb::SplitResponse* split) {
  delete split_;
  split_ = split;
  if (split) {
    set_has_split();
  } else {
    clear_has_split();
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.AdminResponse.split)
}

// optional .raft_cmdpb.CompactLogResponse compact_log = 4;
bool AdminResponse::has_compact_log() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void AdminResponse::set_has_compact_log() {
  _has_bits_[0] |= 0x00000008u;
}
void AdminResponse::clear_has_compact_log() {
  _has_bits_[0] &= ~0x00000008u;
}
void AdminResponse::clear_compact_log() {
  if (compact_log_ != NULL) compact_log_->::raft_cmdpb::CompactLogResponse::Clear();
  clear_has_compact_log();
}
const ::raft_cmdpb::CompactLogResponse& AdminResponse::compact_log() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.AdminResponse.compact_log)
  return compact_log_ != NULL ? *compact_log_
                         : *::raft_cmdpb::CompactLogResponse::internal_default_instance();
}
::raft_cmdpb::CompactLogResponse* AdminResponse::mutable_compact_log() {
  set_has_compact_log();
  if (compact_log_ == NULL) {
    compact_log_ = new ::raft_cmdpb::CompactLogResponse;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.AdminResponse.compact_log)
  return compact_log_;
}
::raft_cmdpb::CompactLogResponse* AdminResponse::release_compact_log() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.AdminResponse.compact_log)
  clear_has_compact_log();
  ::raft_cmdpb::CompactLogResponse* temp = compact_log_;
  compact_log_ = NULL;
  return temp;
}
void AdminResponse::set_allocated_compact_log(::raft_cmdpb::CompactLogResponse* compact_log) {
  delete compact_log_;
  compact_log_ = compact_log;
  if (compact_log) {
    set_has_compact_log();
  } else {
    clear_has_compact_log();
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.AdminResponse.compact_log)
}

// optional .raft_cmdpb.TransferLeaderResponse transfer_leader = 5;
bool AdminResponse::has_transfer_leader() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void AdminResponse::set_has_transfer_leader() {
  _has_bits_[0] |= 0x00000010u;
}
void AdminResponse::clear_has_transfer_leader() {
  _has_bits_[0] &= ~0x00000010u;
}
void AdminResponse::clear_transfer_leader() {
  if (transfer_leader_ != NULL) transfer_leader_->::raft_cmdpb::TransferLeaderResponse::Clear();
  clear_has_transfer_leader();
}
const ::raft_cmdpb::TransferLeaderResponse& AdminResponse::transfer_leader() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.AdminResponse.transfer_leader)
  return transfer_leader_ != NULL ? *transfer_leader_
                         : *::raft_cmdpb::TransferLeaderResponse::internal_default_instance();
}
::raft_cmdpb::TransferLeaderResponse* AdminResponse::mutable_transfer_leader() {
  set_has_transfer_leader();
  if (transfer_leader_ == NULL) {
    transfer_leader_ = new ::raft_cmdpb::TransferLeaderResponse;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.AdminResponse.transfer_leader)
  return transfer_leader_;
}
::raft_cmdpb::TransferLeaderResponse* AdminResponse::release_transfer_leader() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.AdminResponse.transfer_leader)
  clear_has_transfer_leader();
  ::raft_cmdpb::TransferLeaderResponse* temp = transfer_leader_;
  transfer_leader_ = NULL;
  return temp;
}
void AdminResponse::set_allocated_transfer_leader(::raft_cmdpb::TransferLeaderResponse* transfer_leader) {
  delete transfer_leader_;
  transfer_leader_ = transfer_leader;
  if (transfer_leader) {
    set_has_transfer_leader();
  } else {
    clear_has_transfer_leader();
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.AdminResponse.transfer_leader)
}

// optional .raft_cmdpb.VerifyHashResponse verify_hash = 6;
bool AdminResponse::has_verify_hash() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void AdminResponse::set_has_verify_hash() {
  _has_bits_[0] |= 0x00000020u;
}
void AdminResponse::clear_has_verify_hash() {
  _has_bits_[0] &= ~0x00000020u;
}
void AdminResponse::clear_verify_hash() {
  if (verify_hash_ != NULL) verify_hash_->::raft_cmdpb::VerifyHashResponse::Clear();
  clear_has_verify_hash();
}
const ::raft_cmdpb::VerifyHashResponse& AdminResponse::verify_hash() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.AdminResponse.verify_hash)
  return verify_hash_ != NULL ? *verify_hash_
                         : *::raft_cmdpb::VerifyHashResponse::internal_default_instance();
}
::raft_cmdpb::VerifyHashResponse* AdminResponse::mutable_verify_hash() {
  set_has_verify_hash();
  if (verify_hash_ == NULL) {
    verify_hash_ = new ::raft_cmdpb::VerifyHashResponse;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.AdminResponse.verify_hash)
  return verify_hash_;
}
::raft_cmdpb::VerifyHashResponse* AdminResponse::release_verify_hash() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.AdminResponse.verify_hash)
  clear_has_verify_hash();
  ::raft_cmdpb::VerifyHashResponse* temp = verify_hash_;
  verify_hash_ = NULL;
  return temp;
}
void AdminResponse::set_allocated_verify_hash(::raft_cmdpb::VerifyHashResponse* verify_hash) {
  delete verify_hash_;
  verify_hash_ = verify_hash;
  if (verify_hash) {
    set_has_verify_hash();
  } else {
    clear_has_verify_hash();
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.AdminResponse.verify_hash)
}

inline const AdminResponse* AdminResponse::internal_default_instance() {
  return &AdminResponse_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RegionLeaderRequest::RegionLeaderRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_raft_5fcmdpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_cmdpb.RegionLeaderRequest)
}

void RegionLeaderRequest::InitAsDefaultInstance() {
}

RegionLeaderRequest::RegionLeaderRequest(const RegionLeaderRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:raft_cmdpb.RegionLeaderRequest)
}

void RegionLeaderRequest::SharedCtor() {
  _cached_size_ = 0;
}

RegionLeaderRequest::~RegionLeaderRequest() {
  // @@protoc_insertion_point(destructor:raft_cmdpb.RegionLeaderRequest)
  SharedDtor();
}

void RegionLeaderRequest::SharedDtor() {
}

void RegionLeaderRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegionLeaderRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegionLeaderRequest_descriptor_;
}

const RegionLeaderRequest& RegionLeaderRequest::default_instance() {
  protobuf_InitDefaults_raft_5fcmdpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<RegionLeaderRequest> RegionLeaderRequest_default_instance_;

RegionLeaderRequest* RegionLeaderRequest::New(::google::protobuf::Arena* arena) const {
  RegionLeaderRequest* n = new RegionLeaderRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RegionLeaderRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_cmdpb.RegionLeaderRequest)
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RegionLeaderRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_cmdpb.RegionLeaderRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:raft_cmdpb.RegionLeaderRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_cmdpb.RegionLeaderRequest)
  return false;
#undef DO_
}

void RegionLeaderRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_cmdpb.RegionLeaderRequest)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:raft_cmdpb.RegionLeaderRequest)
}

::google::protobuf::uint8* RegionLeaderRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raft_cmdpb.RegionLeaderRequest)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft_cmdpb.RegionLeaderRequest)
  return target;
}

size_t RegionLeaderRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_cmdpb.RegionLeaderRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegionLeaderRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_cmdpb.RegionLeaderRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RegionLeaderRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RegionLeaderRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_cmdpb.RegionLeaderRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_cmdpb.RegionLeaderRequest)
    UnsafeMergeFrom(*source);
  }
}

void RegionLeaderRequest::MergeFrom(const RegionLeaderRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_cmdpb.RegionLeaderRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void RegionLeaderRequest::UnsafeMergeFrom(const RegionLeaderRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void RegionLeaderRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_cmdpb.RegionLeaderRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegionLeaderRequest::CopyFrom(const RegionLeaderRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_cmdpb.RegionLeaderRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool RegionLeaderRequest::IsInitialized() const {

  return true;
}

void RegionLeaderRequest::Swap(RegionLeaderRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RegionLeaderRequest::InternalSwap(RegionLeaderRequest* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RegionLeaderRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RegionLeaderRequest_descriptor_;
  metadata.reflection = RegionLeaderRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RegionLeaderRequest

inline const RegionLeaderRequest* RegionLeaderRequest::internal_default_instance() {
  return &RegionLeaderRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RegionLeaderResponse::kLeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RegionLeaderResponse::RegionLeaderResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_raft_5fcmdpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_cmdpb.RegionLeaderResponse)
}

void RegionLeaderResponse::InitAsDefaultInstance() {
  leader_ = const_cast< ::metapb::Peer*>(
      ::metapb::Peer::internal_default_instance());
}

RegionLeaderResponse::RegionLeaderResponse(const RegionLeaderResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:raft_cmdpb.RegionLeaderResponse)
}

void RegionLeaderResponse::SharedCtor() {
  _cached_size_ = 0;
  leader_ = NULL;
}

RegionLeaderResponse::~RegionLeaderResponse() {
  // @@protoc_insertion_point(destructor:raft_cmdpb.RegionLeaderResponse)
  SharedDtor();
}

void RegionLeaderResponse::SharedDtor() {
  if (this != &RegionLeaderResponse_default_instance_.get()) {
    delete leader_;
  }
}

void RegionLeaderResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegionLeaderResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegionLeaderResponse_descriptor_;
}

const RegionLeaderResponse& RegionLeaderResponse::default_instance() {
  protobuf_InitDefaults_raft_5fcmdpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<RegionLeaderResponse> RegionLeaderResponse_default_instance_;

RegionLeaderResponse* RegionLeaderResponse::New(::google::protobuf::Arena* arena) const {
  RegionLeaderResponse* n = new RegionLeaderResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RegionLeaderResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_cmdpb.RegionLeaderResponse)
  if (has_leader()) {
    if (leader_ != NULL) leader_->::metapb::Peer::Clear();
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RegionLeaderResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_cmdpb.RegionLeaderResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .metapb.Peer leader = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_leader()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft_cmdpb.RegionLeaderResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_cmdpb.RegionLeaderResponse)
  return false;
#undef DO_
}

void RegionLeaderResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_cmdpb.RegionLeaderResponse)
  // optional .metapb.Peer leader = 1;
  if (has_leader()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->leader_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:raft_cmdpb.RegionLeaderResponse)
}

::google::protobuf::uint8* RegionLeaderResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raft_cmdpb.RegionLeaderResponse)
  // optional .metapb.Peer leader = 1;
  if (has_leader()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->leader_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft_cmdpb.RegionLeaderResponse)
  return target;
}

size_t RegionLeaderResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_cmdpb.RegionLeaderResponse)
  size_t total_size = 0;

  // optional .metapb.Peer leader = 1;
  if (has_leader()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->leader_);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegionLeaderResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_cmdpb.RegionLeaderResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RegionLeaderResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RegionLeaderResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_cmdpb.RegionLeaderResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_cmdpb.RegionLeaderResponse)
    UnsafeMergeFrom(*source);
  }
}

void RegionLeaderResponse::MergeFrom(const RegionLeaderResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_cmdpb.RegionLeaderResponse)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void RegionLeaderResponse::UnsafeMergeFrom(const RegionLeaderResponse& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_leader()) {
      mutable_leader()->::metapb::Peer::MergeFrom(from.leader());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void RegionLeaderResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_cmdpb.RegionLeaderResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegionLeaderResponse::CopyFrom(const RegionLeaderResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_cmdpb.RegionLeaderResponse)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool RegionLeaderResponse::IsInitialized() const {

  return true;
}

void RegionLeaderResponse::Swap(RegionLeaderResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RegionLeaderResponse::InternalSwap(RegionLeaderResponse* other) {
  std::swap(leader_, other->leader_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RegionLeaderResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RegionLeaderResponse_descriptor_;
  metadata.reflection = RegionLeaderResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RegionLeaderResponse

// optional .metapb.Peer leader = 1;
bool RegionLeaderResponse::has_leader() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RegionLeaderResponse::set_has_leader() {
  _has_bits_[0] |= 0x00000001u;
}
void RegionLeaderResponse::clear_has_leader() {
  _has_bits_[0] &= ~0x00000001u;
}
void RegionLeaderResponse::clear_leader() {
  if (leader_ != NULL) leader_->::metapb::Peer::Clear();
  clear_has_leader();
}
const ::metapb::Peer& RegionLeaderResponse::leader() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.RegionLeaderResponse.leader)
  return leader_ != NULL ? *leader_
                         : *::metapb::Peer::internal_default_instance();
}
::metapb::Peer* RegionLeaderResponse::mutable_leader() {
  set_has_leader();
  if (leader_ == NULL) {
    leader_ = new ::metapb::Peer;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.RegionLeaderResponse.leader)
  return leader_;
}
::metapb::Peer* RegionLeaderResponse::release_leader() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.RegionLeaderResponse.leader)
  clear_has_leader();
  ::metapb::Peer* temp = leader_;
  leader_ = NULL;
  return temp;
}
void RegionLeaderResponse::set_allocated_leader(::metapb::Peer* leader) {
  delete leader_;
  leader_ = leader;
  if (leader) {
    set_has_leader();
  } else {
    clear_has_leader();
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.RegionLeaderResponse.leader)
}

inline const RegionLeaderResponse* RegionLeaderResponse::internal_default_instance() {
  return &RegionLeaderResponse_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RegionDetailRequest::RegionDetailRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_raft_5fcmdpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_cmdpb.RegionDetailRequest)
}

void RegionDetailRequest::InitAsDefaultInstance() {
}

RegionDetailRequest::RegionDetailRequest(const RegionDetailRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:raft_cmdpb.RegionDetailRequest)
}

void RegionDetailRequest::SharedCtor() {
  _cached_size_ = 0;
}

RegionDetailRequest::~RegionDetailRequest() {
  // @@protoc_insertion_point(destructor:raft_cmdpb.RegionDetailRequest)
  SharedDtor();
}

void RegionDetailRequest::SharedDtor() {
}

void RegionDetailRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegionDetailRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegionDetailRequest_descriptor_;
}

const RegionDetailRequest& RegionDetailRequest::default_instance() {
  protobuf_InitDefaults_raft_5fcmdpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<RegionDetailRequest> RegionDetailRequest_default_instance_;

RegionDetailRequest* RegionDetailRequest::New(::google::protobuf::Arena* arena) const {
  RegionDetailRequest* n = new RegionDetailRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RegionDetailRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_cmdpb.RegionDetailRequest)
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RegionDetailRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_cmdpb.RegionDetailRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:raft_cmdpb.RegionDetailRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_cmdpb.RegionDetailRequest)
  return false;
#undef DO_
}

void RegionDetailRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_cmdpb.RegionDetailRequest)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:raft_cmdpb.RegionDetailRequest)
}

::google::protobuf::uint8* RegionDetailRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raft_cmdpb.RegionDetailRequest)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft_cmdpb.RegionDetailRequest)
  return target;
}

size_t RegionDetailRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_cmdpb.RegionDetailRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegionDetailRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_cmdpb.RegionDetailRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RegionDetailRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RegionDetailRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_cmdpb.RegionDetailRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_cmdpb.RegionDetailRequest)
    UnsafeMergeFrom(*source);
  }
}

void RegionDetailRequest::MergeFrom(const RegionDetailRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_cmdpb.RegionDetailRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void RegionDetailRequest::UnsafeMergeFrom(const RegionDetailRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void RegionDetailRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_cmdpb.RegionDetailRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegionDetailRequest::CopyFrom(const RegionDetailRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_cmdpb.RegionDetailRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool RegionDetailRequest::IsInitialized() const {

  return true;
}

void RegionDetailRequest::Swap(RegionDetailRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RegionDetailRequest::InternalSwap(RegionDetailRequest* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RegionDetailRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RegionDetailRequest_descriptor_;
  metadata.reflection = RegionDetailRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RegionDetailRequest

inline const RegionDetailRequest* RegionDetailRequest::internal_default_instance() {
  return &RegionDetailRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RegionDetailResponse::kRegionFieldNumber;
const int RegionDetailResponse::kLeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RegionDetailResponse::RegionDetailResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_raft_5fcmdpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_cmdpb.RegionDetailResponse)
}

void RegionDetailResponse::InitAsDefaultInstance() {
  region_ = const_cast< ::metapb::Region*>(
      ::metapb::Region::internal_default_instance());
  leader_ = const_cast< ::metapb::Peer*>(
      ::metapb::Peer::internal_default_instance());
}

RegionDetailResponse::RegionDetailResponse(const RegionDetailResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:raft_cmdpb.RegionDetailResponse)
}

void RegionDetailResponse::SharedCtor() {
  _cached_size_ = 0;
  region_ = NULL;
  leader_ = NULL;
}

RegionDetailResponse::~RegionDetailResponse() {
  // @@protoc_insertion_point(destructor:raft_cmdpb.RegionDetailResponse)
  SharedDtor();
}

void RegionDetailResponse::SharedDtor() {
  if (this != &RegionDetailResponse_default_instance_.get()) {
    delete region_;
    delete leader_;
  }
}

void RegionDetailResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegionDetailResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegionDetailResponse_descriptor_;
}

const RegionDetailResponse& RegionDetailResponse::default_instance() {
  protobuf_InitDefaults_raft_5fcmdpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<RegionDetailResponse> RegionDetailResponse_default_instance_;

RegionDetailResponse* RegionDetailResponse::New(::google::protobuf::Arena* arena) const {
  RegionDetailResponse* n = new RegionDetailResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RegionDetailResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_cmdpb.RegionDetailResponse)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_region()) {
      if (region_ != NULL) region_->::metapb::Region::Clear();
    }
    if (has_leader()) {
      if (leader_ != NULL) leader_->::metapb::Peer::Clear();
    }
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RegionDetailResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_cmdpb.RegionDetailResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .metapb.Region region = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_region()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_leader;
        break;
      }

      // optional .metapb.Peer leader = 2;
      case 2: {
        if (tag == 18) {
         parse_leader:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_leader()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft_cmdpb.RegionDetailResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_cmdpb.RegionDetailResponse)
  return false;
#undef DO_
}

void RegionDetailResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_cmdpb.RegionDetailResponse)
  // optional .metapb.Region region = 1;
  if (has_region()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->region_, output);
  }

  // optional .metapb.Peer leader = 2;
  if (has_leader()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->leader_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:raft_cmdpb.RegionDetailResponse)
}

::google::protobuf::uint8* RegionDetailResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raft_cmdpb.RegionDetailResponse)
  // optional .metapb.Region region = 1;
  if (has_region()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->region_, false, target);
  }

  // optional .metapb.Peer leader = 2;
  if (has_leader()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->leader_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft_cmdpb.RegionDetailResponse)
  return target;
}

size_t RegionDetailResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_cmdpb.RegionDetailResponse)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional .metapb.Region region = 1;
    if (has_region()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->region_);
    }

    // optional .metapb.Peer leader = 2;
    if (has_leader()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->leader_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegionDetailResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_cmdpb.RegionDetailResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RegionDetailResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RegionDetailResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_cmdpb.RegionDetailResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_cmdpb.RegionDetailResponse)
    UnsafeMergeFrom(*source);
  }
}

void RegionDetailResponse::MergeFrom(const RegionDetailResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_cmdpb.RegionDetailResponse)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void RegionDetailResponse::UnsafeMergeFrom(const RegionDetailResponse& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_region()) {
      mutable_region()->::metapb::Region::MergeFrom(from.region());
    }
    if (from.has_leader()) {
      mutable_leader()->::metapb::Peer::MergeFrom(from.leader());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void RegionDetailResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_cmdpb.RegionDetailResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegionDetailResponse::CopyFrom(const RegionDetailResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_cmdpb.RegionDetailResponse)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool RegionDetailResponse::IsInitialized() const {

  return true;
}

void RegionDetailResponse::Swap(RegionDetailResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RegionDetailResponse::InternalSwap(RegionDetailResponse* other) {
  std::swap(region_, other->region_);
  std::swap(leader_, other->leader_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RegionDetailResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RegionDetailResponse_descriptor_;
  metadata.reflection = RegionDetailResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RegionDetailResponse

// optional .metapb.Region region = 1;
bool RegionDetailResponse::has_region() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RegionDetailResponse::set_has_region() {
  _has_bits_[0] |= 0x00000001u;
}
void RegionDetailResponse::clear_has_region() {
  _has_bits_[0] &= ~0x00000001u;
}
void RegionDetailResponse::clear_region() {
  if (region_ != NULL) region_->::metapb::Region::Clear();
  clear_has_region();
}
const ::metapb::Region& RegionDetailResponse::region() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.RegionDetailResponse.region)
  return region_ != NULL ? *region_
                         : *::metapb::Region::internal_default_instance();
}
::metapb::Region* RegionDetailResponse::mutable_region() {
  set_has_region();
  if (region_ == NULL) {
    region_ = new ::metapb::Region;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.RegionDetailResponse.region)
  return region_;
}
::metapb::Region* RegionDetailResponse::release_region() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.RegionDetailResponse.region)
  clear_has_region();
  ::metapb::Region* temp = region_;
  region_ = NULL;
  return temp;
}
void RegionDetailResponse::set_allocated_region(::metapb::Region* region) {
  delete region_;
  region_ = region;
  if (region) {
    set_has_region();
  } else {
    clear_has_region();
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.RegionDetailResponse.region)
}

// optional .metapb.Peer leader = 2;
bool RegionDetailResponse::has_leader() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RegionDetailResponse::set_has_leader() {
  _has_bits_[0] |= 0x00000002u;
}
void RegionDetailResponse::clear_has_leader() {
  _has_bits_[0] &= ~0x00000002u;
}
void RegionDetailResponse::clear_leader() {
  if (leader_ != NULL) leader_->::metapb::Peer::Clear();
  clear_has_leader();
}
const ::metapb::Peer& RegionDetailResponse::leader() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.RegionDetailResponse.leader)
  return leader_ != NULL ? *leader_
                         : *::metapb::Peer::internal_default_instance();
}
::metapb::Peer* RegionDetailResponse::mutable_leader() {
  set_has_leader();
  if (leader_ == NULL) {
    leader_ = new ::metapb::Peer;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.RegionDetailResponse.leader)
  return leader_;
}
::metapb::Peer* RegionDetailResponse::release_leader() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.RegionDetailResponse.leader)
  clear_has_leader();
  ::metapb::Peer* temp = leader_;
  leader_ = NULL;
  return temp;
}
void RegionDetailResponse::set_allocated_leader(::metapb::Peer* leader) {
  delete leader_;
  leader_ = leader;
  if (leader) {
    set_has_leader();
  } else {
    clear_has_leader();
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.RegionDetailResponse.leader)
}

inline const RegionDetailResponse* RegionDetailResponse::internal_default_instance() {
  return &RegionDetailResponse_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StatusRequest::kCmdTypeFieldNumber;
const int StatusRequest::kRegionLeaderFieldNumber;
const int StatusRequest::kRegionDetailFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StatusRequest::StatusRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_raft_5fcmdpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_cmdpb.StatusRequest)
}

void StatusRequest::InitAsDefaultInstance() {
  region_leader_ = const_cast< ::raft_cmdpb::RegionLeaderRequest*>(
      ::raft_cmdpb::RegionLeaderRequest::internal_default_instance());
  region_detail_ = const_cast< ::raft_cmdpb::RegionDetailRequest*>(
      ::raft_cmdpb::RegionDetailRequest::internal_default_instance());
}

StatusRequest::StatusRequest(const StatusRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:raft_cmdpb.StatusRequest)
}

void StatusRequest::SharedCtor() {
  _cached_size_ = 0;
  region_leader_ = NULL;
  region_detail_ = NULL;
  cmd_type_ = 0;
}

StatusRequest::~StatusRequest() {
  // @@protoc_insertion_point(destructor:raft_cmdpb.StatusRequest)
  SharedDtor();
}

void StatusRequest::SharedDtor() {
  if (this != &StatusRequest_default_instance_.get()) {
    delete region_leader_;
    delete region_detail_;
  }
}

void StatusRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StatusRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StatusRequest_descriptor_;
}

const StatusRequest& StatusRequest::default_instance() {
  protobuf_InitDefaults_raft_5fcmdpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<StatusRequest> StatusRequest_default_instance_;

StatusRequest* StatusRequest::New(::google::protobuf::Arena* arena) const {
  StatusRequest* n = new StatusRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StatusRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_cmdpb.StatusRequest)
  if (_has_bits_[0 / 32] & 7u) {
    cmd_type_ = 0;
    if (has_region_leader()) {
      if (region_leader_ != NULL) region_leader_->::raft_cmdpb::RegionLeaderRequest::Clear();
    }
    if (has_region_detail()) {
      if (region_detail_ != NULL) region_detail_->::raft_cmdpb::RegionDetailRequest::Clear();
    }
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool StatusRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_cmdpb.StatusRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .raft_cmdpb.StatusCmdType cmd_type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::raft_cmdpb::StatusCmdType_IsValid(value)) {
            set_cmd_type(static_cast< ::raft_cmdpb::StatusCmdType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_region_leader;
        break;
      }

      // optional .raft_cmdpb.RegionLeaderRequest region_leader = 2;
      case 2: {
        if (tag == 18) {
         parse_region_leader:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_region_leader()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_region_detail;
        break;
      }

      // optional .raft_cmdpb.RegionDetailRequest region_detail = 3;
      case 3: {
        if (tag == 26) {
         parse_region_detail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_region_detail()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft_cmdpb.StatusRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_cmdpb.StatusRequest)
  return false;
#undef DO_
}

void StatusRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_cmdpb.StatusRequest)
  // optional .raft_cmdpb.StatusCmdType cmd_type = 1;
  if (has_cmd_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd_type(), output);
  }

  // optional .raft_cmdpb.RegionLeaderRequest region_leader = 2;
  if (has_region_leader()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->region_leader_, output);
  }

  // optional .raft_cmdpb.RegionDetailRequest region_detail = 3;
  if (has_region_detail()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->region_detail_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:raft_cmdpb.StatusRequest)
}

::google::protobuf::uint8* StatusRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raft_cmdpb.StatusRequest)
  // optional .raft_cmdpb.StatusCmdType cmd_type = 1;
  if (has_cmd_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd_type(), target);
  }

  // optional .raft_cmdpb.RegionLeaderRequest region_leader = 2;
  if (has_region_leader()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->region_leader_, false, target);
  }

  // optional .raft_cmdpb.RegionDetailRequest region_detail = 3;
  if (has_region_detail()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->region_detail_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft_cmdpb.StatusRequest)
  return target;
}

size_t StatusRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_cmdpb.StatusRequest)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional .raft_cmdpb.StatusCmdType cmd_type = 1;
    if (has_cmd_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd_type());
    }

    // optional .raft_cmdpb.RegionLeaderRequest region_leader = 2;
    if (has_region_leader()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->region_leader_);
    }

    // optional .raft_cmdpb.RegionDetailRequest region_detail = 3;
    if (has_region_detail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->region_detail_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StatusRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_cmdpb.StatusRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const StatusRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StatusRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_cmdpb.StatusRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_cmdpb.StatusRequest)
    UnsafeMergeFrom(*source);
  }
}

void StatusRequest::MergeFrom(const StatusRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_cmdpb.StatusRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void StatusRequest::UnsafeMergeFrom(const StatusRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd_type()) {
      set_cmd_type(from.cmd_type());
    }
    if (from.has_region_leader()) {
      mutable_region_leader()->::raft_cmdpb::RegionLeaderRequest::MergeFrom(from.region_leader());
    }
    if (from.has_region_detail()) {
      mutable_region_detail()->::raft_cmdpb::RegionDetailRequest::MergeFrom(from.region_detail());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void StatusRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_cmdpb.StatusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StatusRequest::CopyFrom(const StatusRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_cmdpb.StatusRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool StatusRequest::IsInitialized() const {

  return true;
}

void StatusRequest::Swap(StatusRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StatusRequest::InternalSwap(StatusRequest* other) {
  std::swap(cmd_type_, other->cmd_type_);
  std::swap(region_leader_, other->region_leader_);
  std::swap(region_detail_, other->region_detail_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StatusRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StatusRequest_descriptor_;
  metadata.reflection = StatusRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StatusRequest

// optional .raft_cmdpb.StatusCmdType cmd_type = 1;
bool StatusRequest::has_cmd_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void StatusRequest::set_has_cmd_type() {
  _has_bits_[0] |= 0x00000001u;
}
void StatusRequest::clear_has_cmd_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void StatusRequest::clear_cmd_type() {
  cmd_type_ = 0;
  clear_has_cmd_type();
}
::raft_cmdpb::StatusCmdType StatusRequest::cmd_type() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.StatusRequest.cmd_type)
  return static_cast< ::raft_cmdpb::StatusCmdType >(cmd_type_);
}
void StatusRequest::set_cmd_type(::raft_cmdpb::StatusCmdType value) {
  assert(::raft_cmdpb::StatusCmdType_IsValid(value));
  set_has_cmd_type();
  cmd_type_ = value;
  // @@protoc_insertion_point(field_set:raft_cmdpb.StatusRequest.cmd_type)
}

// optional .raft_cmdpb.RegionLeaderRequest region_leader = 2;
bool StatusRequest::has_region_leader() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void StatusRequest::set_has_region_leader() {
  _has_bits_[0] |= 0x00000002u;
}
void StatusRequest::clear_has_region_leader() {
  _has_bits_[0] &= ~0x00000002u;
}
void StatusRequest::clear_region_leader() {
  if (region_leader_ != NULL) region_leader_->::raft_cmdpb::RegionLeaderRequest::Clear();
  clear_has_region_leader();
}
const ::raft_cmdpb::RegionLeaderRequest& StatusRequest::region_leader() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.StatusRequest.region_leader)
  return region_leader_ != NULL ? *region_leader_
                         : *::raft_cmdpb::RegionLeaderRequest::internal_default_instance();
}
::raft_cmdpb::RegionLeaderRequest* StatusRequest::mutable_region_leader() {
  set_has_region_leader();
  if (region_leader_ == NULL) {
    region_leader_ = new ::raft_cmdpb::RegionLeaderRequest;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.StatusRequest.region_leader)
  return region_leader_;
}
::raft_cmdpb::RegionLeaderRequest* StatusRequest::release_region_leader() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.StatusRequest.region_leader)
  clear_has_region_leader();
  ::raft_cmdpb::RegionLeaderRequest* temp = region_leader_;
  region_leader_ = NULL;
  return temp;
}
void StatusRequest::set_allocated_region_leader(::raft_cmdpb::RegionLeaderRequest* region_leader) {
  delete region_leader_;
  region_leader_ = region_leader;
  if (region_leader) {
    set_has_region_leader();
  } else {
    clear_has_region_leader();
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.StatusRequest.region_leader)
}

// optional .raft_cmdpb.RegionDetailRequest region_detail = 3;
bool StatusRequest::has_region_detail() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void StatusRequest::set_has_region_detail() {
  _has_bits_[0] |= 0x00000004u;
}
void StatusRequest::clear_has_region_detail() {
  _has_bits_[0] &= ~0x00000004u;
}
void StatusRequest::clear_region_detail() {
  if (region_detail_ != NULL) region_detail_->::raft_cmdpb::RegionDetailRequest::Clear();
  clear_has_region_detail();
}
const ::raft_cmdpb::RegionDetailRequest& StatusRequest::region_detail() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.StatusRequest.region_detail)
  return region_detail_ != NULL ? *region_detail_
                         : *::raft_cmdpb::RegionDetailRequest::internal_default_instance();
}
::raft_cmdpb::RegionDetailRequest* StatusRequest::mutable_region_detail() {
  set_has_region_detail();
  if (region_detail_ == NULL) {
    region_detail_ = new ::raft_cmdpb::RegionDetailRequest;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.StatusRequest.region_detail)
  return region_detail_;
}
::raft_cmdpb::RegionDetailRequest* StatusRequest::release_region_detail() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.StatusRequest.region_detail)
  clear_has_region_detail();
  ::raft_cmdpb::RegionDetailRequest* temp = region_detail_;
  region_detail_ = NULL;
  return temp;
}
void StatusRequest::set_allocated_region_detail(::raft_cmdpb::RegionDetailRequest* region_detail) {
  delete region_detail_;
  region_detail_ = region_detail;
  if (region_detail) {
    set_has_region_detail();
  } else {
    clear_has_region_detail();
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.StatusRequest.region_detail)
}

inline const StatusRequest* StatusRequest::internal_default_instance() {
  return &StatusRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StatusResponse::kCmdTypeFieldNumber;
const int StatusResponse::kRegionLeaderFieldNumber;
const int StatusResponse::kRegionDetailFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StatusResponse::StatusResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_raft_5fcmdpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_cmdpb.StatusResponse)
}

void StatusResponse::InitAsDefaultInstance() {
  region_leader_ = const_cast< ::raft_cmdpb::RegionLeaderResponse*>(
      ::raft_cmdpb::RegionLeaderResponse::internal_default_instance());
  region_detail_ = const_cast< ::raft_cmdpb::RegionDetailResponse*>(
      ::raft_cmdpb::RegionDetailResponse::internal_default_instance());
}

StatusResponse::StatusResponse(const StatusResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:raft_cmdpb.StatusResponse)
}

void StatusResponse::SharedCtor() {
  _cached_size_ = 0;
  region_leader_ = NULL;
  region_detail_ = NULL;
  cmd_type_ = 0;
}

StatusResponse::~StatusResponse() {
  // @@protoc_insertion_point(destructor:raft_cmdpb.StatusResponse)
  SharedDtor();
}

void StatusResponse::SharedDtor() {
  if (this != &StatusResponse_default_instance_.get()) {
    delete region_leader_;
    delete region_detail_;
  }
}

void StatusResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StatusResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StatusResponse_descriptor_;
}

const StatusResponse& StatusResponse::default_instance() {
  protobuf_InitDefaults_raft_5fcmdpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<StatusResponse> StatusResponse_default_instance_;

StatusResponse* StatusResponse::New(::google::protobuf::Arena* arena) const {
  StatusResponse* n = new StatusResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StatusResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_cmdpb.StatusResponse)
  if (_has_bits_[0 / 32] & 7u) {
    cmd_type_ = 0;
    if (has_region_leader()) {
      if (region_leader_ != NULL) region_leader_->::raft_cmdpb::RegionLeaderResponse::Clear();
    }
    if (has_region_detail()) {
      if (region_detail_ != NULL) region_detail_->::raft_cmdpb::RegionDetailResponse::Clear();
    }
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool StatusResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_cmdpb.StatusResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .raft_cmdpb.StatusCmdType cmd_type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::raft_cmdpb::StatusCmdType_IsValid(value)) {
            set_cmd_type(static_cast< ::raft_cmdpb::StatusCmdType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_region_leader;
        break;
      }

      // optional .raft_cmdpb.RegionLeaderResponse region_leader = 2;
      case 2: {
        if (tag == 18) {
         parse_region_leader:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_region_leader()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_region_detail;
        break;
      }

      // optional .raft_cmdpb.RegionDetailResponse region_detail = 3;
      case 3: {
        if (tag == 26) {
         parse_region_detail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_region_detail()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft_cmdpb.StatusResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_cmdpb.StatusResponse)
  return false;
#undef DO_
}

void StatusResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_cmdpb.StatusResponse)
  // optional .raft_cmdpb.StatusCmdType cmd_type = 1;
  if (has_cmd_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd_type(), output);
  }

  // optional .raft_cmdpb.RegionLeaderResponse region_leader = 2;
  if (has_region_leader()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->region_leader_, output);
  }

  // optional .raft_cmdpb.RegionDetailResponse region_detail = 3;
  if (has_region_detail()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->region_detail_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:raft_cmdpb.StatusResponse)
}

::google::protobuf::uint8* StatusResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raft_cmdpb.StatusResponse)
  // optional .raft_cmdpb.StatusCmdType cmd_type = 1;
  if (has_cmd_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd_type(), target);
  }

  // optional .raft_cmdpb.RegionLeaderResponse region_leader = 2;
  if (has_region_leader()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->region_leader_, false, target);
  }

  // optional .raft_cmdpb.RegionDetailResponse region_detail = 3;
  if (has_region_detail()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->region_detail_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft_cmdpb.StatusResponse)
  return target;
}

size_t StatusResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_cmdpb.StatusResponse)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional .raft_cmdpb.StatusCmdType cmd_type = 1;
    if (has_cmd_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd_type());
    }

    // optional .raft_cmdpb.RegionLeaderResponse region_leader = 2;
    if (has_region_leader()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->region_leader_);
    }

    // optional .raft_cmdpb.RegionDetailResponse region_detail = 3;
    if (has_region_detail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->region_detail_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StatusResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_cmdpb.StatusResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const StatusResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StatusResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_cmdpb.StatusResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_cmdpb.StatusResponse)
    UnsafeMergeFrom(*source);
  }
}

void StatusResponse::MergeFrom(const StatusResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_cmdpb.StatusResponse)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void StatusResponse::UnsafeMergeFrom(const StatusResponse& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd_type()) {
      set_cmd_type(from.cmd_type());
    }
    if (from.has_region_leader()) {
      mutable_region_leader()->::raft_cmdpb::RegionLeaderResponse::MergeFrom(from.region_leader());
    }
    if (from.has_region_detail()) {
      mutable_region_detail()->::raft_cmdpb::RegionDetailResponse::MergeFrom(from.region_detail());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void StatusResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_cmdpb.StatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StatusResponse::CopyFrom(const StatusResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_cmdpb.StatusResponse)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool StatusResponse::IsInitialized() const {

  return true;
}

void StatusResponse::Swap(StatusResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StatusResponse::InternalSwap(StatusResponse* other) {
  std::swap(cmd_type_, other->cmd_type_);
  std::swap(region_leader_, other->region_leader_);
  std::swap(region_detail_, other->region_detail_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StatusResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StatusResponse_descriptor_;
  metadata.reflection = StatusResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StatusResponse

// optional .raft_cmdpb.StatusCmdType cmd_type = 1;
bool StatusResponse::has_cmd_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void StatusResponse::set_has_cmd_type() {
  _has_bits_[0] |= 0x00000001u;
}
void StatusResponse::clear_has_cmd_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void StatusResponse::clear_cmd_type() {
  cmd_type_ = 0;
  clear_has_cmd_type();
}
::raft_cmdpb::StatusCmdType StatusResponse::cmd_type() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.StatusResponse.cmd_type)
  return static_cast< ::raft_cmdpb::StatusCmdType >(cmd_type_);
}
void StatusResponse::set_cmd_type(::raft_cmdpb::StatusCmdType value) {
  assert(::raft_cmdpb::StatusCmdType_IsValid(value));
  set_has_cmd_type();
  cmd_type_ = value;
  // @@protoc_insertion_point(field_set:raft_cmdpb.StatusResponse.cmd_type)
}

// optional .raft_cmdpb.RegionLeaderResponse region_leader = 2;
bool StatusResponse::has_region_leader() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void StatusResponse::set_has_region_leader() {
  _has_bits_[0] |= 0x00000002u;
}
void StatusResponse::clear_has_region_leader() {
  _has_bits_[0] &= ~0x00000002u;
}
void StatusResponse::clear_region_leader() {
  if (region_leader_ != NULL) region_leader_->::raft_cmdpb::RegionLeaderResponse::Clear();
  clear_has_region_leader();
}
const ::raft_cmdpb::RegionLeaderResponse& StatusResponse::region_leader() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.StatusResponse.region_leader)
  return region_leader_ != NULL ? *region_leader_
                         : *::raft_cmdpb::RegionLeaderResponse::internal_default_instance();
}
::raft_cmdpb::RegionLeaderResponse* StatusResponse::mutable_region_leader() {
  set_has_region_leader();
  if (region_leader_ == NULL) {
    region_leader_ = new ::raft_cmdpb::RegionLeaderResponse;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.StatusResponse.region_leader)
  return region_leader_;
}
::raft_cmdpb::RegionLeaderResponse* StatusResponse::release_region_leader() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.StatusResponse.region_leader)
  clear_has_region_leader();
  ::raft_cmdpb::RegionLeaderResponse* temp = region_leader_;
  region_leader_ = NULL;
  return temp;
}
void StatusResponse::set_allocated_region_leader(::raft_cmdpb::RegionLeaderResponse* region_leader) {
  delete region_leader_;
  region_leader_ = region_leader;
  if (region_leader) {
    set_has_region_leader();
  } else {
    clear_has_region_leader();
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.StatusResponse.region_leader)
}

// optional .raft_cmdpb.RegionDetailResponse region_detail = 3;
bool StatusResponse::has_region_detail() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void StatusResponse::set_has_region_detail() {
  _has_bits_[0] |= 0x00000004u;
}
void StatusResponse::clear_has_region_detail() {
  _has_bits_[0] &= ~0x00000004u;
}
void StatusResponse::clear_region_detail() {
  if (region_detail_ != NULL) region_detail_->::raft_cmdpb::RegionDetailResponse::Clear();
  clear_has_region_detail();
}
const ::raft_cmdpb::RegionDetailResponse& StatusResponse::region_detail() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.StatusResponse.region_detail)
  return region_detail_ != NULL ? *region_detail_
                         : *::raft_cmdpb::RegionDetailResponse::internal_default_instance();
}
::raft_cmdpb::RegionDetailResponse* StatusResponse::mutable_region_detail() {
  set_has_region_detail();
  if (region_detail_ == NULL) {
    region_detail_ = new ::raft_cmdpb::RegionDetailResponse;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.StatusResponse.region_detail)
  return region_detail_;
}
::raft_cmdpb::RegionDetailResponse* StatusResponse::release_region_detail() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.StatusResponse.region_detail)
  clear_has_region_detail();
  ::raft_cmdpb::RegionDetailResponse* temp = region_detail_;
  region_detail_ = NULL;
  return temp;
}
void StatusResponse::set_allocated_region_detail(::raft_cmdpb::RegionDetailResponse* region_detail) {
  delete region_detail_;
  region_detail_ = region_detail;
  if (region_detail) {
    set_has_region_detail();
  } else {
    clear_has_region_detail();
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.StatusResponse.region_detail)
}

inline const StatusResponse* StatusResponse::internal_default_instance() {
  return &StatusResponse_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RaftRequestHeader::kRegionIdFieldNumber;
const int RaftRequestHeader::kPeerFieldNumber;
const int RaftRequestHeader::kReadQuorumFieldNumber;
const int RaftRequestHeader::kUuidFieldNumber;
const int RaftRequestHeader::kRegionEpochFieldNumber;
const int RaftRequestHeader::kTermFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RaftRequestHeader::RaftRequestHeader()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_raft_5fcmdpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_cmdpb.RaftRequestHeader)
}

void RaftRequestHeader::InitAsDefaultInstance() {
  peer_ = const_cast< ::metapb::Peer*>(
      ::metapb::Peer::internal_default_instance());
  region_epoch_ = const_cast< ::metapb::RegionEpoch*>(
      ::metapb::RegionEpoch::internal_default_instance());
}

RaftRequestHeader::RaftRequestHeader(const RaftRequestHeader& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:raft_cmdpb.RaftRequestHeader)
}

void RaftRequestHeader::SharedCtor() {
  _cached_size_ = 0;
  uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  peer_ = NULL;
  region_epoch_ = NULL;
  ::memset(&region_id_, 0, reinterpret_cast<char*>(&read_quorum_) -
    reinterpret_cast<char*>(&region_id_) + sizeof(read_quorum_));
}

RaftRequestHeader::~RaftRequestHeader() {
  // @@protoc_insertion_point(destructor:raft_cmdpb.RaftRequestHeader)
  SharedDtor();
}

void RaftRequestHeader::SharedDtor() {
  uuid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != &RaftRequestHeader_default_instance_.get()) {
    delete peer_;
    delete region_epoch_;
  }
}

void RaftRequestHeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RaftRequestHeader::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RaftRequestHeader_descriptor_;
}

const RaftRequestHeader& RaftRequestHeader::default_instance() {
  protobuf_InitDefaults_raft_5fcmdpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<RaftRequestHeader> RaftRequestHeader_default_instance_;

RaftRequestHeader* RaftRequestHeader::New(::google::protobuf::Arena* arena) const {
  RaftRequestHeader* n = new RaftRequestHeader;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RaftRequestHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_cmdpb.RaftRequestHeader)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(RaftRequestHeader, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<RaftRequestHeader*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 63u) {
    ZR_(region_id_, read_quorum_);
    if (has_peer()) {
      if (peer_ != NULL) peer_->::metapb::Peer::Clear();
    }
    if (has_uuid()) {
      uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_region_epoch()) {
      if (region_epoch_ != NULL) region_epoch_->::metapb::RegionEpoch::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RaftRequestHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_cmdpb.RaftRequestHeader)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 region_id = 1;
      case 1: {
        if (tag == 8) {
          set_has_region_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &region_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_peer;
        break;
      }

      // optional .metapb.Peer peer = 2;
      case 2: {
        if (tag == 18) {
         parse_peer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_peer()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_read_quorum;
        break;
      }

      // optional bool read_quorum = 3;
      case 3: {
        if (tag == 24) {
         parse_read_quorum:
          set_has_read_quorum();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &read_quorum_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_uuid;
        break;
      }

      // optional bytes uuid = 4;
      case 4: {
        if (tag == 34) {
         parse_uuid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_uuid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_region_epoch;
        break;
      }

      // optional .metapb.RegionEpoch region_epoch = 5;
      case 5: {
        if (tag == 42) {
         parse_region_epoch:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_region_epoch()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_term;
        break;
      }

      // optional uint64 term = 6;
      case 6: {
        if (tag == 48) {
         parse_term:
          set_has_term();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &term_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft_cmdpb.RaftRequestHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_cmdpb.RaftRequestHeader)
  return false;
#undef DO_
}

void RaftRequestHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_cmdpb.RaftRequestHeader)
  // optional uint64 region_id = 1;
  if (has_region_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->region_id(), output);
  }

  // optional .metapb.Peer peer = 2;
  if (has_peer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->peer_, output);
  }

  // optional bool read_quorum = 3;
  if (has_read_quorum()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->read_quorum(), output);
  }

  // optional bytes uuid = 4;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->uuid(), output);
  }

  // optional .metapb.RegionEpoch region_epoch = 5;
  if (has_region_epoch()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->region_epoch_, output);
  }

  // optional uint64 term = 6;
  if (has_term()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->term(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:raft_cmdpb.RaftRequestHeader)
}

::google::protobuf::uint8* RaftRequestHeader::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raft_cmdpb.RaftRequestHeader)
  // optional uint64 region_id = 1;
  if (has_region_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->region_id(), target);
  }

  // optional .metapb.Peer peer = 2;
  if (has_peer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->peer_, false, target);
  }

  // optional bool read_quorum = 3;
  if (has_read_quorum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->read_quorum(), target);
  }

  // optional bytes uuid = 4;
  if (has_uuid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->uuid(), target);
  }

  // optional .metapb.RegionEpoch region_epoch = 5;
  if (has_region_epoch()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->region_epoch_, false, target);
  }

  // optional uint64 term = 6;
  if (has_term()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->term(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft_cmdpb.RaftRequestHeader)
  return target;
}

size_t RaftRequestHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_cmdpb.RaftRequestHeader)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 63u) {
    // optional uint64 region_id = 1;
    if (has_region_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->region_id());
    }

    // optional .metapb.Peer peer = 2;
    if (has_peer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->peer_);
    }

    // optional bool read_quorum = 3;
    if (has_read_quorum()) {
      total_size += 1 + 1;
    }

    // optional bytes uuid = 4;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->uuid());
    }

    // optional .metapb.RegionEpoch region_epoch = 5;
    if (has_region_epoch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->region_epoch_);
    }

    // optional uint64 term = 6;
    if (has_term()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->term());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RaftRequestHeader::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_cmdpb.RaftRequestHeader)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RaftRequestHeader* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RaftRequestHeader>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_cmdpb.RaftRequestHeader)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_cmdpb.RaftRequestHeader)
    UnsafeMergeFrom(*source);
  }
}

void RaftRequestHeader::MergeFrom(const RaftRequestHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_cmdpb.RaftRequestHeader)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void RaftRequestHeader::UnsafeMergeFrom(const RaftRequestHeader& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_region_id()) {
      set_region_id(from.region_id());
    }
    if (from.has_peer()) {
      mutable_peer()->::metapb::Peer::MergeFrom(from.peer());
    }
    if (from.has_read_quorum()) {
      set_read_quorum(from.read_quorum());
    }
    if (from.has_uuid()) {
      set_has_uuid();
      uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uuid_);
    }
    if (from.has_region_epoch()) {
      mutable_region_epoch()->::metapb::RegionEpoch::MergeFrom(from.region_epoch());
    }
    if (from.has_term()) {
      set_term(from.term());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void RaftRequestHeader::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_cmdpb.RaftRequestHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RaftRequestHeader::CopyFrom(const RaftRequestHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_cmdpb.RaftRequestHeader)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool RaftRequestHeader::IsInitialized() const {

  return true;
}

void RaftRequestHeader::Swap(RaftRequestHeader* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RaftRequestHeader::InternalSwap(RaftRequestHeader* other) {
  std::swap(region_id_, other->region_id_);
  std::swap(peer_, other->peer_);
  std::swap(read_quorum_, other->read_quorum_);
  uuid_.Swap(&other->uuid_);
  std::swap(region_epoch_, other->region_epoch_);
  std::swap(term_, other->term_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RaftRequestHeader::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RaftRequestHeader_descriptor_;
  metadata.reflection = RaftRequestHeader_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RaftRequestHeader

// optional uint64 region_id = 1;
bool RaftRequestHeader::has_region_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RaftRequestHeader::set_has_region_id() {
  _has_bits_[0] |= 0x00000001u;
}
void RaftRequestHeader::clear_has_region_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void RaftRequestHeader::clear_region_id() {
  region_id_ = GOOGLE_ULONGLONG(0);
  clear_has_region_id();
}
::google::protobuf::uint64 RaftRequestHeader::region_id() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.RaftRequestHeader.region_id)
  return region_id_;
}
void RaftRequestHeader::set_region_id(::google::protobuf::uint64 value) {
  set_has_region_id();
  region_id_ = value;
  // @@protoc_insertion_point(field_set:raft_cmdpb.RaftRequestHeader.region_id)
}

// optional .metapb.Peer peer = 2;
bool RaftRequestHeader::has_peer() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RaftRequestHeader::set_has_peer() {
  _has_bits_[0] |= 0x00000002u;
}
void RaftRequestHeader::clear_has_peer() {
  _has_bits_[0] &= ~0x00000002u;
}
void RaftRequestHeader::clear_peer() {
  if (peer_ != NULL) peer_->::metapb::Peer::Clear();
  clear_has_peer();
}
const ::metapb::Peer& RaftRequestHeader::peer() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.RaftRequestHeader.peer)
  return peer_ != NULL ? *peer_
                         : *::metapb::Peer::internal_default_instance();
}
::metapb::Peer* RaftRequestHeader::mutable_peer() {
  set_has_peer();
  if (peer_ == NULL) {
    peer_ = new ::metapb::Peer;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.RaftRequestHeader.peer)
  return peer_;
}
::metapb::Peer* RaftRequestHeader::release_peer() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.RaftRequestHeader.peer)
  clear_has_peer();
  ::metapb::Peer* temp = peer_;
  peer_ = NULL;
  return temp;
}
void RaftRequestHeader::set_allocated_peer(::metapb::Peer* peer) {
  delete peer_;
  peer_ = peer;
  if (peer) {
    set_has_peer();
  } else {
    clear_has_peer();
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.RaftRequestHeader.peer)
}

// optional bool read_quorum = 3;
bool RaftRequestHeader::has_read_quorum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void RaftRequestHeader::set_has_read_quorum() {
  _has_bits_[0] |= 0x00000004u;
}
void RaftRequestHeader::clear_has_read_quorum() {
  _has_bits_[0] &= ~0x00000004u;
}
void RaftRequestHeader::clear_read_quorum() {
  read_quorum_ = false;
  clear_has_read_quorum();
}
bool RaftRequestHeader::read_quorum() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.RaftRequestHeader.read_quorum)
  return read_quorum_;
}
void RaftRequestHeader::set_read_quorum(bool value) {
  set_has_read_quorum();
  read_quorum_ = value;
  // @@protoc_insertion_point(field_set:raft_cmdpb.RaftRequestHeader.read_quorum)
}

// optional bytes uuid = 4;
bool RaftRequestHeader::has_uuid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void RaftRequestHeader::set_has_uuid() {
  _has_bits_[0] |= 0x00000008u;
}
void RaftRequestHeader::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000008u;
}
void RaftRequestHeader::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_uuid();
}
const ::std::string& RaftRequestHeader::uuid() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.RaftRequestHeader.uuid)
  return uuid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RaftRequestHeader::set_uuid(const ::std::string& value) {
  set_has_uuid();
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raft_cmdpb.RaftRequestHeader.uuid)
}
void RaftRequestHeader::set_uuid(const char* value) {
  set_has_uuid();
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raft_cmdpb.RaftRequestHeader.uuid)
}
void RaftRequestHeader::set_uuid(const void* value, size_t size) {
  set_has_uuid();
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raft_cmdpb.RaftRequestHeader.uuid)
}
::std::string* RaftRequestHeader::mutable_uuid() {
  set_has_uuid();
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.RaftRequestHeader.uuid)
  return uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RaftRequestHeader::release_uuid() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.RaftRequestHeader.uuid)
  clear_has_uuid();
  return uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RaftRequestHeader::set_allocated_uuid(::std::string* uuid) {
  if (uuid != NULL) {
    set_has_uuid();
  } else {
    clear_has_uuid();
  }
  uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.RaftRequestHeader.uuid)
}

// optional .metapb.RegionEpoch region_epoch = 5;
bool RaftRequestHeader::has_region_epoch() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void RaftRequestHeader::set_has_region_epoch() {
  _has_bits_[0] |= 0x00000010u;
}
void RaftRequestHeader::clear_has_region_epoch() {
  _has_bits_[0] &= ~0x00000010u;
}
void RaftRequestHeader::clear_region_epoch() {
  if (region_epoch_ != NULL) region_epoch_->::metapb::RegionEpoch::Clear();
  clear_has_region_epoch();
}
const ::metapb::RegionEpoch& RaftRequestHeader::region_epoch() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.RaftRequestHeader.region_epoch)
  return region_epoch_ != NULL ? *region_epoch_
                         : *::metapb::RegionEpoch::internal_default_instance();
}
::metapb::RegionEpoch* RaftRequestHeader::mutable_region_epoch() {
  set_has_region_epoch();
  if (region_epoch_ == NULL) {
    region_epoch_ = new ::metapb::RegionEpoch;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.RaftRequestHeader.region_epoch)
  return region_epoch_;
}
::metapb::RegionEpoch* RaftRequestHeader::release_region_epoch() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.RaftRequestHeader.region_epoch)
  clear_has_region_epoch();
  ::metapb::RegionEpoch* temp = region_epoch_;
  region_epoch_ = NULL;
  return temp;
}
void RaftRequestHeader::set_allocated_region_epoch(::metapb::RegionEpoch* region_epoch) {
  delete region_epoch_;
  region_epoch_ = region_epoch;
  if (region_epoch) {
    set_has_region_epoch();
  } else {
    clear_has_region_epoch();
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.RaftRequestHeader.region_epoch)
}

// optional uint64 term = 6;
bool RaftRequestHeader::has_term() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void RaftRequestHeader::set_has_term() {
  _has_bits_[0] |= 0x00000020u;
}
void RaftRequestHeader::clear_has_term() {
  _has_bits_[0] &= ~0x00000020u;
}
void RaftRequestHeader::clear_term() {
  term_ = GOOGLE_ULONGLONG(0);
  clear_has_term();
}
::google::protobuf::uint64 RaftRequestHeader::term() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.RaftRequestHeader.term)
  return term_;
}
void RaftRequestHeader::set_term(::google::protobuf::uint64 value) {
  set_has_term();
  term_ = value;
  // @@protoc_insertion_point(field_set:raft_cmdpb.RaftRequestHeader.term)
}

inline const RaftRequestHeader* RaftRequestHeader::internal_default_instance() {
  return &RaftRequestHeader_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RaftResponseHeader::kErrorFieldNumber;
const int RaftResponseHeader::kUuidFieldNumber;
const int RaftResponseHeader::kCurrentTermFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RaftResponseHeader::RaftResponseHeader()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_raft_5fcmdpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_cmdpb.RaftResponseHeader)
}

void RaftResponseHeader::InitAsDefaultInstance() {
  error_ = const_cast< ::errorpb::Error*>(
      ::errorpb::Error::internal_default_instance());
}

RaftResponseHeader::RaftResponseHeader(const RaftResponseHeader& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:raft_cmdpb.RaftResponseHeader)
}

void RaftResponseHeader::SharedCtor() {
  _cached_size_ = 0;
  uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  error_ = NULL;
  current_term_ = GOOGLE_ULONGLONG(0);
}

RaftResponseHeader::~RaftResponseHeader() {
  // @@protoc_insertion_point(destructor:raft_cmdpb.RaftResponseHeader)
  SharedDtor();
}

void RaftResponseHeader::SharedDtor() {
  uuid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != &RaftResponseHeader_default_instance_.get()) {
    delete error_;
  }
}

void RaftResponseHeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RaftResponseHeader::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RaftResponseHeader_descriptor_;
}

const RaftResponseHeader& RaftResponseHeader::default_instance() {
  protobuf_InitDefaults_raft_5fcmdpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<RaftResponseHeader> RaftResponseHeader_default_instance_;

RaftResponseHeader* RaftResponseHeader::New(::google::protobuf::Arena* arena) const {
  RaftResponseHeader* n = new RaftResponseHeader;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RaftResponseHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_cmdpb.RaftResponseHeader)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_error()) {
      if (error_ != NULL) error_->::errorpb::Error::Clear();
    }
    if (has_uuid()) {
      uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    current_term_ = GOOGLE_ULONGLONG(0);
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RaftResponseHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_cmdpb.RaftResponseHeader)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .errorpb.Error error = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_uuid;
        break;
      }

      // optional bytes uuid = 2;
      case 2: {
        if (tag == 18) {
         parse_uuid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_uuid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_current_term;
        break;
      }

      // optional uint64 current_term = 3;
      case 3: {
        if (tag == 24) {
         parse_current_term:
          set_has_current_term();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &current_term_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft_cmdpb.RaftResponseHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_cmdpb.RaftResponseHeader)
  return false;
#undef DO_
}

void RaftResponseHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_cmdpb.RaftResponseHeader)
  // optional .errorpb.Error error = 1;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->error_, output);
  }

  // optional bytes uuid = 2;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->uuid(), output);
  }

  // optional uint64 current_term = 3;
  if (has_current_term()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->current_term(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:raft_cmdpb.RaftResponseHeader)
}

::google::protobuf::uint8* RaftResponseHeader::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raft_cmdpb.RaftResponseHeader)
  // optional .errorpb.Error error = 1;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->error_, false, target);
  }

  // optional bytes uuid = 2;
  if (has_uuid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->uuid(), target);
  }

  // optional uint64 current_term = 3;
  if (has_current_term()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->current_term(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft_cmdpb.RaftResponseHeader)
  return target;
}

size_t RaftResponseHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_cmdpb.RaftResponseHeader)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional .errorpb.Error error = 1;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->error_);
    }

    // optional bytes uuid = 2;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->uuid());
    }

    // optional uint64 current_term = 3;
    if (has_current_term()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->current_term());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RaftResponseHeader::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_cmdpb.RaftResponseHeader)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RaftResponseHeader* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RaftResponseHeader>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_cmdpb.RaftResponseHeader)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_cmdpb.RaftResponseHeader)
    UnsafeMergeFrom(*source);
  }
}

void RaftResponseHeader::MergeFrom(const RaftResponseHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_cmdpb.RaftResponseHeader)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void RaftResponseHeader::UnsafeMergeFrom(const RaftResponseHeader& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      mutable_error()->::errorpb::Error::MergeFrom(from.error());
    }
    if (from.has_uuid()) {
      set_has_uuid();
      uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uuid_);
    }
    if (from.has_current_term()) {
      set_current_term(from.current_term());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void RaftResponseHeader::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_cmdpb.RaftResponseHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RaftResponseHeader::CopyFrom(const RaftResponseHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_cmdpb.RaftResponseHeader)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool RaftResponseHeader::IsInitialized() const {

  return true;
}

void RaftResponseHeader::Swap(RaftResponseHeader* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RaftResponseHeader::InternalSwap(RaftResponseHeader* other) {
  std::swap(error_, other->error_);
  uuid_.Swap(&other->uuid_);
  std::swap(current_term_, other->current_term_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RaftResponseHeader::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RaftResponseHeader_descriptor_;
  metadata.reflection = RaftResponseHeader_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RaftResponseHeader

// optional .errorpb.Error error = 1;
bool RaftResponseHeader::has_error() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RaftResponseHeader::set_has_error() {
  _has_bits_[0] |= 0x00000001u;
}
void RaftResponseHeader::clear_has_error() {
  _has_bits_[0] &= ~0x00000001u;
}
void RaftResponseHeader::clear_error() {
  if (error_ != NULL) error_->::errorpb::Error::Clear();
  clear_has_error();
}
const ::errorpb::Error& RaftResponseHeader::error() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.RaftResponseHeader.error)
  return error_ != NULL ? *error_
                         : *::errorpb::Error::internal_default_instance();
}
::errorpb::Error* RaftResponseHeader::mutable_error() {
  set_has_error();
  if (error_ == NULL) {
    error_ = new ::errorpb::Error;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.RaftResponseHeader.error)
  return error_;
}
::errorpb::Error* RaftResponseHeader::release_error() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.RaftResponseHeader.error)
  clear_has_error();
  ::errorpb::Error* temp = error_;
  error_ = NULL;
  return temp;
}
void RaftResponseHeader::set_allocated_error(::errorpb::Error* error) {
  delete error_;
  error_ = error;
  if (error) {
    set_has_error();
  } else {
    clear_has_error();
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.RaftResponseHeader.error)
}

// optional bytes uuid = 2;
bool RaftResponseHeader::has_uuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RaftResponseHeader::set_has_uuid() {
  _has_bits_[0] |= 0x00000002u;
}
void RaftResponseHeader::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000002u;
}
void RaftResponseHeader::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_uuid();
}
const ::std::string& RaftResponseHeader::uuid() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.RaftResponseHeader.uuid)
  return uuid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RaftResponseHeader::set_uuid(const ::std::string& value) {
  set_has_uuid();
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raft_cmdpb.RaftResponseHeader.uuid)
}
void RaftResponseHeader::set_uuid(const char* value) {
  set_has_uuid();
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raft_cmdpb.RaftResponseHeader.uuid)
}
void RaftResponseHeader::set_uuid(const void* value, size_t size) {
  set_has_uuid();
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raft_cmdpb.RaftResponseHeader.uuid)
}
::std::string* RaftResponseHeader::mutable_uuid() {
  set_has_uuid();
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.RaftResponseHeader.uuid)
  return uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RaftResponseHeader::release_uuid() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.RaftResponseHeader.uuid)
  clear_has_uuid();
  return uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RaftResponseHeader::set_allocated_uuid(::std::string* uuid) {
  if (uuid != NULL) {
    set_has_uuid();
  } else {
    clear_has_uuid();
  }
  uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.RaftResponseHeader.uuid)
}

// optional uint64 current_term = 3;
bool RaftResponseHeader::has_current_term() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void RaftResponseHeader::set_has_current_term() {
  _has_bits_[0] |= 0x00000004u;
}
void RaftResponseHeader::clear_has_current_term() {
  _has_bits_[0] &= ~0x00000004u;
}
void RaftResponseHeader::clear_current_term() {
  current_term_ = GOOGLE_ULONGLONG(0);
  clear_has_current_term();
}
::google::protobuf::uint64 RaftResponseHeader::current_term() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.RaftResponseHeader.current_term)
  return current_term_;
}
void RaftResponseHeader::set_current_term(::google::protobuf::uint64 value) {
  set_has_current_term();
  current_term_ = value;
  // @@protoc_insertion_point(field_set:raft_cmdpb.RaftResponseHeader.current_term)
}

inline const RaftResponseHeader* RaftResponseHeader::internal_default_instance() {
  return &RaftResponseHeader_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RaftCmdRequest::kHeaderFieldNumber;
const int RaftCmdRequest::kRequestsFieldNumber;
const int RaftCmdRequest::kAdminRequestFieldNumber;
const int RaftCmdRequest::kStatusRequestFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RaftCmdRequest::RaftCmdRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_raft_5fcmdpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_cmdpb.RaftCmdRequest)
}

void RaftCmdRequest::InitAsDefaultInstance() {
  header_ = const_cast< ::raft_cmdpb::RaftRequestHeader*>(
      ::raft_cmdpb::RaftRequestHeader::internal_default_instance());
  admin_request_ = const_cast< ::raft_cmdpb::AdminRequest*>(
      ::raft_cmdpb::AdminRequest::internal_default_instance());
  status_request_ = const_cast< ::raft_cmdpb::StatusRequest*>(
      ::raft_cmdpb::StatusRequest::internal_default_instance());
}

RaftCmdRequest::RaftCmdRequest(const RaftCmdRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:raft_cmdpb.RaftCmdRequest)
}

void RaftCmdRequest::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  admin_request_ = NULL;
  status_request_ = NULL;
}

RaftCmdRequest::~RaftCmdRequest() {
  // @@protoc_insertion_point(destructor:raft_cmdpb.RaftCmdRequest)
  SharedDtor();
}

void RaftCmdRequest::SharedDtor() {
  if (this != &RaftCmdRequest_default_instance_.get()) {
    delete header_;
    delete admin_request_;
    delete status_request_;
  }
}

void RaftCmdRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RaftCmdRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RaftCmdRequest_descriptor_;
}

const RaftCmdRequest& RaftCmdRequest::default_instance() {
  protobuf_InitDefaults_raft_5fcmdpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<RaftCmdRequest> RaftCmdRequest_default_instance_;

RaftCmdRequest* RaftCmdRequest::New(::google::protobuf::Arena* arena) const {
  RaftCmdRequest* n = new RaftCmdRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RaftCmdRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_cmdpb.RaftCmdRequest)
  if (_has_bits_[0 / 32] & 13u) {
    if (has_header()) {
      if (header_ != NULL) header_->::raft_cmdpb::RaftRequestHeader::Clear();
    }
    if (has_admin_request()) {
      if (admin_request_ != NULL) admin_request_->::raft_cmdpb::AdminRequest::Clear();
    }
    if (has_status_request()) {
      if (status_request_ != NULL) status_request_->::raft_cmdpb::StatusRequest::Clear();
    }
  }
  requests_.Clear();
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RaftCmdRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_cmdpb.RaftCmdRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .raft_cmdpb.RaftRequestHeader header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_requests;
        break;
      }

      // repeated .raft_cmdpb.Request requests = 2;
      case 2: {
        if (tag == 18) {
         parse_requests:
          DO_(input->IncrementRecursionDepth());
         parse_loop_requests:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_requests()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_requests;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(26)) goto parse_admin_request;
        break;
      }

      // optional .raft_cmdpb.AdminRequest admin_request = 3;
      case 3: {
        if (tag == 26) {
         parse_admin_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_admin_request()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_status_request;
        break;
      }

      // optional .raft_cmdpb.StatusRequest status_request = 4;
      case 4: {
        if (tag == 34) {
         parse_status_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_status_request()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft_cmdpb.RaftCmdRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_cmdpb.RaftCmdRequest)
  return false;
#undef DO_
}

void RaftCmdRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_cmdpb.RaftCmdRequest)
  // optional .raft_cmdpb.RaftRequestHeader header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // repeated .raft_cmdpb.Request requests = 2;
  for (unsigned int i = 0, n = this->requests_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->requests(i), output);
  }

  // optional .raft_cmdpb.AdminRequest admin_request = 3;
  if (has_admin_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->admin_request_, output);
  }

  // optional .raft_cmdpb.StatusRequest status_request = 4;
  if (has_status_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->status_request_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:raft_cmdpb.RaftCmdRequest)
}

::google::protobuf::uint8* RaftCmdRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raft_cmdpb.RaftCmdRequest)
  // optional .raft_cmdpb.RaftRequestHeader header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // repeated .raft_cmdpb.Request requests = 2;
  for (unsigned int i = 0, n = this->requests_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->requests(i), false, target);
  }

  // optional .raft_cmdpb.AdminRequest admin_request = 3;
  if (has_admin_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->admin_request_, false, target);
  }

  // optional .raft_cmdpb.StatusRequest status_request = 4;
  if (has_status_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->status_request_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft_cmdpb.RaftCmdRequest)
  return target;
}

size_t RaftCmdRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_cmdpb.RaftCmdRequest)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 13u) {
    // optional .raft_cmdpb.RaftRequestHeader header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->header_);
    }

    // optional .raft_cmdpb.AdminRequest admin_request = 3;
    if (has_admin_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->admin_request_);
    }

    // optional .raft_cmdpb.StatusRequest status_request = 4;
    if (has_status_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->status_request_);
    }

  }
  // repeated .raft_cmdpb.Request requests = 2;
  {
    unsigned int count = this->requests_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->requests(i));
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RaftCmdRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_cmdpb.RaftCmdRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RaftCmdRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RaftCmdRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_cmdpb.RaftCmdRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_cmdpb.RaftCmdRequest)
    UnsafeMergeFrom(*source);
  }
}

void RaftCmdRequest::MergeFrom(const RaftCmdRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_cmdpb.RaftCmdRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void RaftCmdRequest::UnsafeMergeFrom(const RaftCmdRequest& from) {
  GOOGLE_DCHECK(&from != this);
  requests_.MergeFrom(from.requests_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::raft_cmdpb::RaftRequestHeader::MergeFrom(from.header());
    }
    if (from.has_admin_request()) {
      mutable_admin_request()->::raft_cmdpb::AdminRequest::MergeFrom(from.admin_request());
    }
    if (from.has_status_request()) {
      mutable_status_request()->::raft_cmdpb::StatusRequest::MergeFrom(from.status_request());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void RaftCmdRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_cmdpb.RaftCmdRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RaftCmdRequest::CopyFrom(const RaftCmdRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_cmdpb.RaftCmdRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool RaftCmdRequest::IsInitialized() const {

  return true;
}

void RaftCmdRequest::Swap(RaftCmdRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RaftCmdRequest::InternalSwap(RaftCmdRequest* other) {
  std::swap(header_, other->header_);
  requests_.UnsafeArenaSwap(&other->requests_);
  std::swap(admin_request_, other->admin_request_);
  std::swap(status_request_, other->status_request_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RaftCmdRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RaftCmdRequest_descriptor_;
  metadata.reflection = RaftCmdRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RaftCmdRequest

// optional .raft_cmdpb.RaftRequestHeader header = 1;
bool RaftCmdRequest::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RaftCmdRequest::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
void RaftCmdRequest::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
void RaftCmdRequest::clear_header() {
  if (header_ != NULL) header_->::raft_cmdpb::RaftRequestHeader::Clear();
  clear_has_header();
}
const ::raft_cmdpb::RaftRequestHeader& RaftCmdRequest::header() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.RaftCmdRequest.header)
  return header_ != NULL ? *header_
                         : *::raft_cmdpb::RaftRequestHeader::internal_default_instance();
}
::raft_cmdpb::RaftRequestHeader* RaftCmdRequest::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::raft_cmdpb::RaftRequestHeader;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.RaftCmdRequest.header)
  return header_;
}
::raft_cmdpb::RaftRequestHeader* RaftCmdRequest::release_header() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.RaftCmdRequest.header)
  clear_has_header();
  ::raft_cmdpb::RaftRequestHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void RaftCmdRequest::set_allocated_header(::raft_cmdpb::RaftRequestHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.RaftCmdRequest.header)
}

// repeated .raft_cmdpb.Request requests = 2;
int RaftCmdRequest::requests_size() const {
  return requests_.size();
}
void RaftCmdRequest::clear_requests() {
  requests_.Clear();
}
const ::raft_cmdpb::Request& RaftCmdRequest::requests(int index) const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.RaftCmdRequest.requests)
  return requests_.Get(index);
}
::raft_cmdpb::Request* RaftCmdRequest::mutable_requests(int index) {
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.RaftCmdRequest.requests)
  return requests_.Mutable(index);
}
::raft_cmdpb::Request* RaftCmdRequest::add_requests() {
  // @@protoc_insertion_point(field_add:raft_cmdpb.RaftCmdRequest.requests)
  return requests_.Add();
}
::google::protobuf::RepeatedPtrField< ::raft_cmdpb::Request >*
RaftCmdRequest::mutable_requests() {
  // @@protoc_insertion_point(field_mutable_list:raft_cmdpb.RaftCmdRequest.requests)
  return &requests_;
}
const ::google::protobuf::RepeatedPtrField< ::raft_cmdpb::Request >&
RaftCmdRequest::requests() const {
  // @@protoc_insertion_point(field_list:raft_cmdpb.RaftCmdRequest.requests)
  return requests_;
}

// optional .raft_cmdpb.AdminRequest admin_request = 3;
bool RaftCmdRequest::has_admin_request() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void RaftCmdRequest::set_has_admin_request() {
  _has_bits_[0] |= 0x00000004u;
}
void RaftCmdRequest::clear_has_admin_request() {
  _has_bits_[0] &= ~0x00000004u;
}
void RaftCmdRequest::clear_admin_request() {
  if (admin_request_ != NULL) admin_request_->::raft_cmdpb::AdminRequest::Clear();
  clear_has_admin_request();
}
const ::raft_cmdpb::AdminRequest& RaftCmdRequest::admin_request() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.RaftCmdRequest.admin_request)
  return admin_request_ != NULL ? *admin_request_
                         : *::raft_cmdpb::AdminRequest::internal_default_instance();
}
::raft_cmdpb::AdminRequest* RaftCmdRequest::mutable_admin_request() {
  set_has_admin_request();
  if (admin_request_ == NULL) {
    admin_request_ = new ::raft_cmdpb::AdminRequest;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.RaftCmdRequest.admin_request)
  return admin_request_;
}
::raft_cmdpb::AdminRequest* RaftCmdRequest::release_admin_request() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.RaftCmdRequest.admin_request)
  clear_has_admin_request();
  ::raft_cmdpb::AdminRequest* temp = admin_request_;
  admin_request_ = NULL;
  return temp;
}
void RaftCmdRequest::set_allocated_admin_request(::raft_cmdpb::AdminRequest* admin_request) {
  delete admin_request_;
  admin_request_ = admin_request;
  if (admin_request) {
    set_has_admin_request();
  } else {
    clear_has_admin_request();
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.RaftCmdRequest.admin_request)
}

// optional .raft_cmdpb.StatusRequest status_request = 4;
bool RaftCmdRequest::has_status_request() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void RaftCmdRequest::set_has_status_request() {
  _has_bits_[0] |= 0x00000008u;
}
void RaftCmdRequest::clear_has_status_request() {
  _has_bits_[0] &= ~0x00000008u;
}
void RaftCmdRequest::clear_status_request() {
  if (status_request_ != NULL) status_request_->::raft_cmdpb::StatusRequest::Clear();
  clear_has_status_request();
}
const ::raft_cmdpb::StatusRequest& RaftCmdRequest::status_request() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.RaftCmdRequest.status_request)
  return status_request_ != NULL ? *status_request_
                         : *::raft_cmdpb::StatusRequest::internal_default_instance();
}
::raft_cmdpb::StatusRequest* RaftCmdRequest::mutable_status_request() {
  set_has_status_request();
  if (status_request_ == NULL) {
    status_request_ = new ::raft_cmdpb::StatusRequest;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.RaftCmdRequest.status_request)
  return status_request_;
}
::raft_cmdpb::StatusRequest* RaftCmdRequest::release_status_request() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.RaftCmdRequest.status_request)
  clear_has_status_request();
  ::raft_cmdpb::StatusRequest* temp = status_request_;
  status_request_ = NULL;
  return temp;
}
void RaftCmdRequest::set_allocated_status_request(::raft_cmdpb::StatusRequest* status_request) {
  delete status_request_;
  status_request_ = status_request;
  if (status_request) {
    set_has_status_request();
  } else {
    clear_has_status_request();
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.RaftCmdRequest.status_request)
}

inline const RaftCmdRequest* RaftCmdRequest::internal_default_instance() {
  return &RaftCmdRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RaftCmdResponse::kHeaderFieldNumber;
const int RaftCmdResponse::kResponsesFieldNumber;
const int RaftCmdResponse::kAdminResponseFieldNumber;
const int RaftCmdResponse::kStatusResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RaftCmdResponse::RaftCmdResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_raft_5fcmdpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_cmdpb.RaftCmdResponse)
}

void RaftCmdResponse::InitAsDefaultInstance() {
  header_ = const_cast< ::raft_cmdpb::RaftResponseHeader*>(
      ::raft_cmdpb::RaftResponseHeader::internal_default_instance());
  admin_response_ = const_cast< ::raft_cmdpb::AdminResponse*>(
      ::raft_cmdpb::AdminResponse::internal_default_instance());
  status_response_ = const_cast< ::raft_cmdpb::StatusResponse*>(
      ::raft_cmdpb::StatusResponse::internal_default_instance());
}

RaftCmdResponse::RaftCmdResponse(const RaftCmdResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:raft_cmdpb.RaftCmdResponse)
}

void RaftCmdResponse::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  admin_response_ = NULL;
  status_response_ = NULL;
}

RaftCmdResponse::~RaftCmdResponse() {
  // @@protoc_insertion_point(destructor:raft_cmdpb.RaftCmdResponse)
  SharedDtor();
}

void RaftCmdResponse::SharedDtor() {
  if (this != &RaftCmdResponse_default_instance_.get()) {
    delete header_;
    delete admin_response_;
    delete status_response_;
  }
}

void RaftCmdResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RaftCmdResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RaftCmdResponse_descriptor_;
}

const RaftCmdResponse& RaftCmdResponse::default_instance() {
  protobuf_InitDefaults_raft_5fcmdpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<RaftCmdResponse> RaftCmdResponse_default_instance_;

RaftCmdResponse* RaftCmdResponse::New(::google::protobuf::Arena* arena) const {
  RaftCmdResponse* n = new RaftCmdResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RaftCmdResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_cmdpb.RaftCmdResponse)
  if (_has_bits_[0 / 32] & 13u) {
    if (has_header()) {
      if (header_ != NULL) header_->::raft_cmdpb::RaftResponseHeader::Clear();
    }
    if (has_admin_response()) {
      if (admin_response_ != NULL) admin_response_->::raft_cmdpb::AdminResponse::Clear();
    }
    if (has_status_response()) {
      if (status_response_ != NULL) status_response_->::raft_cmdpb::StatusResponse::Clear();
    }
  }
  responses_.Clear();
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RaftCmdResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_cmdpb.RaftCmdResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .raft_cmdpb.RaftResponseHeader header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_responses;
        break;
      }

      // repeated .raft_cmdpb.Response responses = 2;
      case 2: {
        if (tag == 18) {
         parse_responses:
          DO_(input->IncrementRecursionDepth());
         parse_loop_responses:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_responses()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_responses;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(26)) goto parse_admin_response;
        break;
      }

      // optional .raft_cmdpb.AdminResponse admin_response = 3;
      case 3: {
        if (tag == 26) {
         parse_admin_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_admin_response()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_status_response;
        break;
      }

      // optional .raft_cmdpb.StatusResponse status_response = 4;
      case 4: {
        if (tag == 34) {
         parse_status_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_status_response()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft_cmdpb.RaftCmdResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_cmdpb.RaftCmdResponse)
  return false;
#undef DO_
}

void RaftCmdResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_cmdpb.RaftCmdResponse)
  // optional .raft_cmdpb.RaftResponseHeader header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // repeated .raft_cmdpb.Response responses = 2;
  for (unsigned int i = 0, n = this->responses_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->responses(i), output);
  }

  // optional .raft_cmdpb.AdminResponse admin_response = 3;
  if (has_admin_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->admin_response_, output);
  }

  // optional .raft_cmdpb.StatusResponse status_response = 4;
  if (has_status_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->status_response_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:raft_cmdpb.RaftCmdResponse)
}

::google::protobuf::uint8* RaftCmdResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raft_cmdpb.RaftCmdResponse)
  // optional .raft_cmdpb.RaftResponseHeader header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // repeated .raft_cmdpb.Response responses = 2;
  for (unsigned int i = 0, n = this->responses_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->responses(i), false, target);
  }

  // optional .raft_cmdpb.AdminResponse admin_response = 3;
  if (has_admin_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->admin_response_, false, target);
  }

  // optional .raft_cmdpb.StatusResponse status_response = 4;
  if (has_status_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->status_response_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft_cmdpb.RaftCmdResponse)
  return target;
}

size_t RaftCmdResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_cmdpb.RaftCmdResponse)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 13u) {
    // optional .raft_cmdpb.RaftResponseHeader header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->header_);
    }

    // optional .raft_cmdpb.AdminResponse admin_response = 3;
    if (has_admin_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->admin_response_);
    }

    // optional .raft_cmdpb.StatusResponse status_response = 4;
    if (has_status_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->status_response_);
    }

  }
  // repeated .raft_cmdpb.Response responses = 2;
  {
    unsigned int count = this->responses_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->responses(i));
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RaftCmdResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_cmdpb.RaftCmdResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RaftCmdResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RaftCmdResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_cmdpb.RaftCmdResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_cmdpb.RaftCmdResponse)
    UnsafeMergeFrom(*source);
  }
}

void RaftCmdResponse::MergeFrom(const RaftCmdResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_cmdpb.RaftCmdResponse)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void RaftCmdResponse::UnsafeMergeFrom(const RaftCmdResponse& from) {
  GOOGLE_DCHECK(&from != this);
  responses_.MergeFrom(from.responses_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::raft_cmdpb::RaftResponseHeader::MergeFrom(from.header());
    }
    if (from.has_admin_response()) {
      mutable_admin_response()->::raft_cmdpb::AdminResponse::MergeFrom(from.admin_response());
    }
    if (from.has_status_response()) {
      mutable_status_response()->::raft_cmdpb::StatusResponse::MergeFrom(from.status_response());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void RaftCmdResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_cmdpb.RaftCmdResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RaftCmdResponse::CopyFrom(const RaftCmdResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_cmdpb.RaftCmdResponse)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool RaftCmdResponse::IsInitialized() const {

  return true;
}

void RaftCmdResponse::Swap(RaftCmdResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RaftCmdResponse::InternalSwap(RaftCmdResponse* other) {
  std::swap(header_, other->header_);
  responses_.UnsafeArenaSwap(&other->responses_);
  std::swap(admin_response_, other->admin_response_);
  std::swap(status_response_, other->status_response_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RaftCmdResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RaftCmdResponse_descriptor_;
  metadata.reflection = RaftCmdResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RaftCmdResponse

// optional .raft_cmdpb.RaftResponseHeader header = 1;
bool RaftCmdResponse::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RaftCmdResponse::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
void RaftCmdResponse::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
void RaftCmdResponse::clear_header() {
  if (header_ != NULL) header_->::raft_cmdpb::RaftResponseHeader::Clear();
  clear_has_header();
}
const ::raft_cmdpb::RaftResponseHeader& RaftCmdResponse::header() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.RaftCmdResponse.header)
  return header_ != NULL ? *header_
                         : *::raft_cmdpb::RaftResponseHeader::internal_default_instance();
}
::raft_cmdpb::RaftResponseHeader* RaftCmdResponse::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::raft_cmdpb::RaftResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.RaftCmdResponse.header)
  return header_;
}
::raft_cmdpb::RaftResponseHeader* RaftCmdResponse::release_header() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.RaftCmdResponse.header)
  clear_has_header();
  ::raft_cmdpb::RaftResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void RaftCmdResponse::set_allocated_header(::raft_cmdpb::RaftResponseHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.RaftCmdResponse.header)
}

// repeated .raft_cmdpb.Response responses = 2;
int RaftCmdResponse::responses_size() const {
  return responses_.size();
}
void RaftCmdResponse::clear_responses() {
  responses_.Clear();
}
const ::raft_cmdpb::Response& RaftCmdResponse::responses(int index) const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.RaftCmdResponse.responses)
  return responses_.Get(index);
}
::raft_cmdpb::Response* RaftCmdResponse::mutable_responses(int index) {
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.RaftCmdResponse.responses)
  return responses_.Mutable(index);
}
::raft_cmdpb::Response* RaftCmdResponse::add_responses() {
  // @@protoc_insertion_point(field_add:raft_cmdpb.RaftCmdResponse.responses)
  return responses_.Add();
}
::google::protobuf::RepeatedPtrField< ::raft_cmdpb::Response >*
RaftCmdResponse::mutable_responses() {
  // @@protoc_insertion_point(field_mutable_list:raft_cmdpb.RaftCmdResponse.responses)
  return &responses_;
}
const ::google::protobuf::RepeatedPtrField< ::raft_cmdpb::Response >&
RaftCmdResponse::responses() const {
  // @@protoc_insertion_point(field_list:raft_cmdpb.RaftCmdResponse.responses)
  return responses_;
}

// optional .raft_cmdpb.AdminResponse admin_response = 3;
bool RaftCmdResponse::has_admin_response() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void RaftCmdResponse::set_has_admin_response() {
  _has_bits_[0] |= 0x00000004u;
}
void RaftCmdResponse::clear_has_admin_response() {
  _has_bits_[0] &= ~0x00000004u;
}
void RaftCmdResponse::clear_admin_response() {
  if (admin_response_ != NULL) admin_response_->::raft_cmdpb::AdminResponse::Clear();
  clear_has_admin_response();
}
const ::raft_cmdpb::AdminResponse& RaftCmdResponse::admin_response() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.RaftCmdResponse.admin_response)
  return admin_response_ != NULL ? *admin_response_
                         : *::raft_cmdpb::AdminResponse::internal_default_instance();
}
::raft_cmdpb::AdminResponse* RaftCmdResponse::mutable_admin_response() {
  set_has_admin_response();
  if (admin_response_ == NULL) {
    admin_response_ = new ::raft_cmdpb::AdminResponse;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.RaftCmdResponse.admin_response)
  return admin_response_;
}
::raft_cmdpb::AdminResponse* RaftCmdResponse::release_admin_response() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.RaftCmdResponse.admin_response)
  clear_has_admin_response();
  ::raft_cmdpb::AdminResponse* temp = admin_response_;
  admin_response_ = NULL;
  return temp;
}
void RaftCmdResponse::set_allocated_admin_response(::raft_cmdpb::AdminResponse* admin_response) {
  delete admin_response_;
  admin_response_ = admin_response;
  if (admin_response) {
    set_has_admin_response();
  } else {
    clear_has_admin_response();
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.RaftCmdResponse.admin_response)
}

// optional .raft_cmdpb.StatusResponse status_response = 4;
bool RaftCmdResponse::has_status_response() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void RaftCmdResponse::set_has_status_response() {
  _has_bits_[0] |= 0x00000008u;
}
void RaftCmdResponse::clear_has_status_response() {
  _has_bits_[0] &= ~0x00000008u;
}
void RaftCmdResponse::clear_status_response() {
  if (status_response_ != NULL) status_response_->::raft_cmdpb::StatusResponse::Clear();
  clear_has_status_response();
}
const ::raft_cmdpb::StatusResponse& RaftCmdResponse::status_response() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.RaftCmdResponse.status_response)
  return status_response_ != NULL ? *status_response_
                         : *::raft_cmdpb::StatusResponse::internal_default_instance();
}
::raft_cmdpb::StatusResponse* RaftCmdResponse::mutable_status_response() {
  set_has_status_response();
  if (status_response_ == NULL) {
    status_response_ = new ::raft_cmdpb::StatusResponse;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.RaftCmdResponse.status_response)
  return status_response_;
}
::raft_cmdpb::StatusResponse* RaftCmdResponse::release_status_response() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.RaftCmdResponse.status_response)
  clear_has_status_response();
  ::raft_cmdpb::StatusResponse* temp = status_response_;
  status_response_ = NULL;
  return temp;
}
void RaftCmdResponse::set_allocated_status_response(::raft_cmdpb::StatusResponse* status_response) {
  delete status_response_;
  status_response_ = status_response;
  if (status_response) {
    set_has_status_response();
  } else {
    clear_has_status_response();
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.RaftCmdResponse.status_response)
}

inline const RaftCmdResponse* RaftCmdResponse::internal_default_instance() {
  return &RaftCmdResponse_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace raft_cmdpb

// @@protoc_insertion_point(global_scope)
