// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kvrpcpb.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "kvrpcpb.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace kvrpcpb {

namespace {

const ::google::protobuf::Descriptor* LockInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LockInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* KeyError_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KeyError_reflection_ = NULL;
const ::google::protobuf::Descriptor* Context_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Context_reflection_ = NULL;
const ::google::protobuf::Descriptor* CmdGetRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CmdGetRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CmdGetResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CmdGetResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CmdScanRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CmdScanRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* KvPair_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KvPair_reflection_ = NULL;
const ::google::protobuf::Descriptor* CmdScanResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CmdScanResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* Mutation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Mutation_reflection_ = NULL;
const ::google::protobuf::Descriptor* CmdPrewriteRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CmdPrewriteRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CmdPrewriteResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CmdPrewriteResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CmdCommitRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CmdCommitRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CmdCommitResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CmdCommitResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CmdBatchRollbackRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CmdBatchRollbackRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CmdBatchRollbackResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CmdBatchRollbackResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CmdCleanupRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CmdCleanupRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CmdCleanupResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CmdCleanupResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CmdBatchGetRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CmdBatchGetRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CmdBatchGetResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CmdBatchGetResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CmdScanLockRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CmdScanLockRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CmdScanLockResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CmdScanLockResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CmdResolveLockRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CmdResolveLockRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CmdResolveLockResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CmdResolveLockResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CmdGCRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CmdGCRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CmdGCResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CmdGCResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CmdRawGetRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CmdRawGetRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CmdRawGetResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CmdRawGetResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CmdRawPutRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CmdRawPutRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CmdRawPutResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CmdRawPutResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CmdRawDeleteRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CmdRawDeleteRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CmdRawDeleteResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CmdRawDeleteResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Response_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MessageType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Op_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_kvrpcpb_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_kvrpcpb_2eproto() {
  protobuf_AddDesc_kvrpcpb_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "kvrpcpb.proto");
  GOOGLE_CHECK(file != NULL);
  LockInfo_descriptor_ = file->message_type(0);
  static const int LockInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LockInfo, primary_lock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LockInfo, lock_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LockInfo, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LockInfo, lock_ttl_),
  };
  LockInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LockInfo_descriptor_,
      LockInfo::internal_default_instance(),
      LockInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LockInfo, _has_bits_),
      -1,
      -1,
      sizeof(LockInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LockInfo, _internal_metadata_));
  KeyError_descriptor_ = file->message_type(1);
  static const int KeyError_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyError, locked_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyError, retryable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyError, abort_),
  };
  KeyError_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      KeyError_descriptor_,
      KeyError::internal_default_instance(),
      KeyError_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyError, _has_bits_),
      -1,
      -1,
      sizeof(KeyError),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyError, _internal_metadata_));
  Context_descriptor_ = file->message_type(2);
  static const int Context_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Context, region_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Context, region_epoch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Context, peer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Context, read_quorum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Context, term_),
  };
  Context_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Context_descriptor_,
      Context::internal_default_instance(),
      Context_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Context, _has_bits_),
      -1,
      -1,
      sizeof(Context),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Context, _internal_metadata_));
  CmdGetRequest_descriptor_ = file->message_type(3);
  static const int CmdGetRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdGetRequest, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdGetRequest, version_),
  };
  CmdGetRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CmdGetRequest_descriptor_,
      CmdGetRequest::internal_default_instance(),
      CmdGetRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdGetRequest, _has_bits_),
      -1,
      -1,
      sizeof(CmdGetRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdGetRequest, _internal_metadata_));
  CmdGetResponse_descriptor_ = file->message_type(4);
  static const int CmdGetResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdGetResponse, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdGetResponse, value_),
  };
  CmdGetResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CmdGetResponse_descriptor_,
      CmdGetResponse::internal_default_instance(),
      CmdGetResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdGetResponse, _has_bits_),
      -1,
      -1,
      sizeof(CmdGetResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdGetResponse, _internal_metadata_));
  CmdScanRequest_descriptor_ = file->message_type(5);
  static const int CmdScanRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdScanRequest, start_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdScanRequest, limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdScanRequest, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdScanRequest, key_only_),
  };
  CmdScanRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CmdScanRequest_descriptor_,
      CmdScanRequest::internal_default_instance(),
      CmdScanRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdScanRequest, _has_bits_),
      -1,
      -1,
      sizeof(CmdScanRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdScanRequest, _internal_metadata_));
  KvPair_descriptor_ = file->message_type(6);
  static const int KvPair_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KvPair, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KvPair, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KvPair, value_),
  };
  KvPair_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      KvPair_descriptor_,
      KvPair::internal_default_instance(),
      KvPair_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KvPair, _has_bits_),
      -1,
      -1,
      sizeof(KvPair),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KvPair, _internal_metadata_));
  CmdScanResponse_descriptor_ = file->message_type(7);
  static const int CmdScanResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdScanResponse, pairs_),
  };
  CmdScanResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CmdScanResponse_descriptor_,
      CmdScanResponse::internal_default_instance(),
      CmdScanResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdScanResponse, _has_bits_),
      -1,
      -1,
      sizeof(CmdScanResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdScanResponse, _internal_metadata_));
  Mutation_descriptor_ = file->message_type(8);
  static const int Mutation_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mutation, op_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mutation, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mutation, value_),
  };
  Mutation_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Mutation_descriptor_,
      Mutation::internal_default_instance(),
      Mutation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mutation, _has_bits_),
      -1,
      -1,
      sizeof(Mutation),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mutation, _internal_metadata_));
  CmdPrewriteRequest_descriptor_ = file->message_type(9);
  static const int CmdPrewriteRequest_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdPrewriteRequest, mutations_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdPrewriteRequest, primary_lock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdPrewriteRequest, start_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdPrewriteRequest, lock_ttl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdPrewriteRequest, skip_constraint_check_),
  };
  CmdPrewriteRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CmdPrewriteRequest_descriptor_,
      CmdPrewriteRequest::internal_default_instance(),
      CmdPrewriteRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdPrewriteRequest, _has_bits_),
      -1,
      -1,
      sizeof(CmdPrewriteRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdPrewriteRequest, _internal_metadata_));
  CmdPrewriteResponse_descriptor_ = file->message_type(10);
  static const int CmdPrewriteResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdPrewriteResponse, errors_),
  };
  CmdPrewriteResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CmdPrewriteResponse_descriptor_,
      CmdPrewriteResponse::internal_default_instance(),
      CmdPrewriteResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdPrewriteResponse, _has_bits_),
      -1,
      -1,
      sizeof(CmdPrewriteResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdPrewriteResponse, _internal_metadata_));
  CmdCommitRequest_descriptor_ = file->message_type(11);
  static const int CmdCommitRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdCommitRequest, start_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdCommitRequest, keys_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdCommitRequest, commit_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdCommitRequest, binlog_),
  };
  CmdCommitRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CmdCommitRequest_descriptor_,
      CmdCommitRequest::internal_default_instance(),
      CmdCommitRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdCommitRequest, _has_bits_),
      -1,
      -1,
      sizeof(CmdCommitRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdCommitRequest, _internal_metadata_));
  CmdCommitResponse_descriptor_ = file->message_type(12);
  static const int CmdCommitResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdCommitResponse, error_),
  };
  CmdCommitResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CmdCommitResponse_descriptor_,
      CmdCommitResponse::internal_default_instance(),
      CmdCommitResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdCommitResponse, _has_bits_),
      -1,
      -1,
      sizeof(CmdCommitResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdCommitResponse, _internal_metadata_));
  CmdBatchRollbackRequest_descriptor_ = file->message_type(13);
  static const int CmdBatchRollbackRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdBatchRollbackRequest, start_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdBatchRollbackRequest, keys_),
  };
  CmdBatchRollbackRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CmdBatchRollbackRequest_descriptor_,
      CmdBatchRollbackRequest::internal_default_instance(),
      CmdBatchRollbackRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdBatchRollbackRequest, _has_bits_),
      -1,
      -1,
      sizeof(CmdBatchRollbackRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdBatchRollbackRequest, _internal_metadata_));
  CmdBatchRollbackResponse_descriptor_ = file->message_type(14);
  static const int CmdBatchRollbackResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdBatchRollbackResponse, error_),
  };
  CmdBatchRollbackResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CmdBatchRollbackResponse_descriptor_,
      CmdBatchRollbackResponse::internal_default_instance(),
      CmdBatchRollbackResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdBatchRollbackResponse, _has_bits_),
      -1,
      -1,
      sizeof(CmdBatchRollbackResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdBatchRollbackResponse, _internal_metadata_));
  CmdCleanupRequest_descriptor_ = file->message_type(15);
  static const int CmdCleanupRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdCleanupRequest, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdCleanupRequest, start_version_),
  };
  CmdCleanupRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CmdCleanupRequest_descriptor_,
      CmdCleanupRequest::internal_default_instance(),
      CmdCleanupRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdCleanupRequest, _has_bits_),
      -1,
      -1,
      sizeof(CmdCleanupRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdCleanupRequest, _internal_metadata_));
  CmdCleanupResponse_descriptor_ = file->message_type(16);
  static const int CmdCleanupResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdCleanupResponse, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdCleanupResponse, commit_version_),
  };
  CmdCleanupResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CmdCleanupResponse_descriptor_,
      CmdCleanupResponse::internal_default_instance(),
      CmdCleanupResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdCleanupResponse, _has_bits_),
      -1,
      -1,
      sizeof(CmdCleanupResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdCleanupResponse, _internal_metadata_));
  CmdBatchGetRequest_descriptor_ = file->message_type(17);
  static const int CmdBatchGetRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdBatchGetRequest, keys_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdBatchGetRequest, version_),
  };
  CmdBatchGetRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CmdBatchGetRequest_descriptor_,
      CmdBatchGetRequest::internal_default_instance(),
      CmdBatchGetRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdBatchGetRequest, _has_bits_),
      -1,
      -1,
      sizeof(CmdBatchGetRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdBatchGetRequest, _internal_metadata_));
  CmdBatchGetResponse_descriptor_ = file->message_type(18);
  static const int CmdBatchGetResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdBatchGetResponse, pairs_),
  };
  CmdBatchGetResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CmdBatchGetResponse_descriptor_,
      CmdBatchGetResponse::internal_default_instance(),
      CmdBatchGetResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdBatchGetResponse, _has_bits_),
      -1,
      -1,
      sizeof(CmdBatchGetResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdBatchGetResponse, _internal_metadata_));
  CmdScanLockRequest_descriptor_ = file->message_type(19);
  static const int CmdScanLockRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdScanLockRequest, max_version_),
  };
  CmdScanLockRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CmdScanLockRequest_descriptor_,
      CmdScanLockRequest::internal_default_instance(),
      CmdScanLockRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdScanLockRequest, _has_bits_),
      -1,
      -1,
      sizeof(CmdScanLockRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdScanLockRequest, _internal_metadata_));
  CmdScanLockResponse_descriptor_ = file->message_type(20);
  static const int CmdScanLockResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdScanLockResponse, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdScanLockResponse, locks_),
  };
  CmdScanLockResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CmdScanLockResponse_descriptor_,
      CmdScanLockResponse::internal_default_instance(),
      CmdScanLockResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdScanLockResponse, _has_bits_),
      -1,
      -1,
      sizeof(CmdScanLockResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdScanLockResponse, _internal_metadata_));
  CmdResolveLockRequest_descriptor_ = file->message_type(21);
  static const int CmdResolveLockRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdResolveLockRequest, start_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdResolveLockRequest, commit_version_),
  };
  CmdResolveLockRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CmdResolveLockRequest_descriptor_,
      CmdResolveLockRequest::internal_default_instance(),
      CmdResolveLockRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdResolveLockRequest, _has_bits_),
      -1,
      -1,
      sizeof(CmdResolveLockRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdResolveLockRequest, _internal_metadata_));
  CmdResolveLockResponse_descriptor_ = file->message_type(22);
  static const int CmdResolveLockResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdResolveLockResponse, error_),
  };
  CmdResolveLockResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CmdResolveLockResponse_descriptor_,
      CmdResolveLockResponse::internal_default_instance(),
      CmdResolveLockResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdResolveLockResponse, _has_bits_),
      -1,
      -1,
      sizeof(CmdResolveLockResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdResolveLockResponse, _internal_metadata_));
  CmdGCRequest_descriptor_ = file->message_type(23);
  static const int CmdGCRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdGCRequest, safe_point_),
  };
  CmdGCRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CmdGCRequest_descriptor_,
      CmdGCRequest::internal_default_instance(),
      CmdGCRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdGCRequest, _has_bits_),
      -1,
      -1,
      sizeof(CmdGCRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdGCRequest, _internal_metadata_));
  CmdGCResponse_descriptor_ = file->message_type(24);
  static const int CmdGCResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdGCResponse, error_),
  };
  CmdGCResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CmdGCResponse_descriptor_,
      CmdGCResponse::internal_default_instance(),
      CmdGCResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdGCResponse, _has_bits_),
      -1,
      -1,
      sizeof(CmdGCResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdGCResponse, _internal_metadata_));
  CmdRawGetRequest_descriptor_ = file->message_type(25);
  static const int CmdRawGetRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdRawGetRequest, key_),
  };
  CmdRawGetRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CmdRawGetRequest_descriptor_,
      CmdRawGetRequest::internal_default_instance(),
      CmdRawGetRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdRawGetRequest, _has_bits_),
      -1,
      -1,
      sizeof(CmdRawGetRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdRawGetRequest, _internal_metadata_));
  CmdRawGetResponse_descriptor_ = file->message_type(26);
  static const int CmdRawGetResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdRawGetResponse, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdRawGetResponse, value_),
  };
  CmdRawGetResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CmdRawGetResponse_descriptor_,
      CmdRawGetResponse::internal_default_instance(),
      CmdRawGetResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdRawGetResponse, _has_bits_),
      -1,
      -1,
      sizeof(CmdRawGetResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdRawGetResponse, _internal_metadata_));
  CmdRawPutRequest_descriptor_ = file->message_type(27);
  static const int CmdRawPutRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdRawPutRequest, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdRawPutRequest, value_),
  };
  CmdRawPutRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CmdRawPutRequest_descriptor_,
      CmdRawPutRequest::internal_default_instance(),
      CmdRawPutRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdRawPutRequest, _has_bits_),
      -1,
      -1,
      sizeof(CmdRawPutRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdRawPutRequest, _internal_metadata_));
  CmdRawPutResponse_descriptor_ = file->message_type(28);
  static const int CmdRawPutResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdRawPutResponse, error_),
  };
  CmdRawPutResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CmdRawPutResponse_descriptor_,
      CmdRawPutResponse::internal_default_instance(),
      CmdRawPutResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdRawPutResponse, _has_bits_),
      -1,
      -1,
      sizeof(CmdRawPutResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdRawPutResponse, _internal_metadata_));
  CmdRawDeleteRequest_descriptor_ = file->message_type(29);
  static const int CmdRawDeleteRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdRawDeleteRequest, key_),
  };
  CmdRawDeleteRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CmdRawDeleteRequest_descriptor_,
      CmdRawDeleteRequest::internal_default_instance(),
      CmdRawDeleteRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdRawDeleteRequest, _has_bits_),
      -1,
      -1,
      sizeof(CmdRawDeleteRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdRawDeleteRequest, _internal_metadata_));
  CmdRawDeleteResponse_descriptor_ = file->message_type(30);
  static const int CmdRawDeleteResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdRawDeleteResponse, error_),
  };
  CmdRawDeleteResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CmdRawDeleteResponse_descriptor_,
      CmdRawDeleteResponse::internal_default_instance(),
      CmdRawDeleteResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdRawDeleteResponse, _has_bits_),
      -1,
      -1,
      sizeof(CmdRawDeleteResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdRawDeleteResponse, _internal_metadata_));
  Request_descriptor_ = file->message_type(31);
  static const int Request_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, context_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, cmd_get_req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, cmd_scan_req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, cmd_prewrite_req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, cmd_commit_req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, cmd_cleanup_req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, cmd_batch_get_req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, cmd_batch_rollback_req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, cmd_scan_lock_req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, cmd_resolve_lock_req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, cmd_gc_req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, cmd_raw_get_req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, cmd_raw_put_req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, cmd_raw_delete_req_),
  };
  Request_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Request_descriptor_,
      Request::internal_default_instance(),
      Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, _has_bits_),
      -1,
      -1,
      sizeof(Request),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, _internal_metadata_));
  Response_descriptor_ = file->message_type(32);
  static const int Response_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, region_error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, cmd_get_resp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, cmd_scan_resp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, cmd_prewrite_resp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, cmd_commit_resp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, cmd_cleanup_resp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, cmd_batch_get_resp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, cmd_batch_rollback_resp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, cmd_scan_lock_resp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, cmd_resolve_lock_resp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, cmd_gc_resp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, cmd_raw_get_resp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, cmd_raw_put_resp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, cmd_raw_delete_resp_),
  };
  Response_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Response_descriptor_,
      Response::internal_default_instance(),
      Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, _has_bits_),
      -1,
      -1,
      sizeof(Response),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, _internal_metadata_));
  MessageType_descriptor_ = file->enum_type(0);
  Op_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_kvrpcpb_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LockInfo_descriptor_, LockInfo::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      KeyError_descriptor_, KeyError::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Context_descriptor_, Context::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CmdGetRequest_descriptor_, CmdGetRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CmdGetResponse_descriptor_, CmdGetResponse::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CmdScanRequest_descriptor_, CmdScanRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      KvPair_descriptor_, KvPair::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CmdScanResponse_descriptor_, CmdScanResponse::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Mutation_descriptor_, Mutation::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CmdPrewriteRequest_descriptor_, CmdPrewriteRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CmdPrewriteResponse_descriptor_, CmdPrewriteResponse::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CmdCommitRequest_descriptor_, CmdCommitRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CmdCommitResponse_descriptor_, CmdCommitResponse::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CmdBatchRollbackRequest_descriptor_, CmdBatchRollbackRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CmdBatchRollbackResponse_descriptor_, CmdBatchRollbackResponse::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CmdCleanupRequest_descriptor_, CmdCleanupRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CmdCleanupResponse_descriptor_, CmdCleanupResponse::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CmdBatchGetRequest_descriptor_, CmdBatchGetRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CmdBatchGetResponse_descriptor_, CmdBatchGetResponse::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CmdScanLockRequest_descriptor_, CmdScanLockRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CmdScanLockResponse_descriptor_, CmdScanLockResponse::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CmdResolveLockRequest_descriptor_, CmdResolveLockRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CmdResolveLockResponse_descriptor_, CmdResolveLockResponse::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CmdGCRequest_descriptor_, CmdGCRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CmdGCResponse_descriptor_, CmdGCResponse::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CmdRawGetRequest_descriptor_, CmdRawGetRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CmdRawGetResponse_descriptor_, CmdRawGetResponse::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CmdRawPutRequest_descriptor_, CmdRawPutRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CmdRawPutResponse_descriptor_, CmdRawPutResponse::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CmdRawDeleteRequest_descriptor_, CmdRawDeleteRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CmdRawDeleteResponse_descriptor_, CmdRawDeleteResponse::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Request_descriptor_, Request::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Response_descriptor_, Response::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_kvrpcpb_2eproto() {
  LockInfo_default_instance_.Shutdown();
  delete LockInfo_reflection_;
  KeyError_default_instance_.Shutdown();
  delete KeyError_reflection_;
  Context_default_instance_.Shutdown();
  delete Context_reflection_;
  CmdGetRequest_default_instance_.Shutdown();
  delete CmdGetRequest_reflection_;
  CmdGetResponse_default_instance_.Shutdown();
  delete CmdGetResponse_reflection_;
  CmdScanRequest_default_instance_.Shutdown();
  delete CmdScanRequest_reflection_;
  KvPair_default_instance_.Shutdown();
  delete KvPair_reflection_;
  CmdScanResponse_default_instance_.Shutdown();
  delete CmdScanResponse_reflection_;
  Mutation_default_instance_.Shutdown();
  delete Mutation_reflection_;
  CmdPrewriteRequest_default_instance_.Shutdown();
  delete CmdPrewriteRequest_reflection_;
  CmdPrewriteResponse_default_instance_.Shutdown();
  delete CmdPrewriteResponse_reflection_;
  CmdCommitRequest_default_instance_.Shutdown();
  delete CmdCommitRequest_reflection_;
  CmdCommitResponse_default_instance_.Shutdown();
  delete CmdCommitResponse_reflection_;
  CmdBatchRollbackRequest_default_instance_.Shutdown();
  delete CmdBatchRollbackRequest_reflection_;
  CmdBatchRollbackResponse_default_instance_.Shutdown();
  delete CmdBatchRollbackResponse_reflection_;
  CmdCleanupRequest_default_instance_.Shutdown();
  delete CmdCleanupRequest_reflection_;
  CmdCleanupResponse_default_instance_.Shutdown();
  delete CmdCleanupResponse_reflection_;
  CmdBatchGetRequest_default_instance_.Shutdown();
  delete CmdBatchGetRequest_reflection_;
  CmdBatchGetResponse_default_instance_.Shutdown();
  delete CmdBatchGetResponse_reflection_;
  CmdScanLockRequest_default_instance_.Shutdown();
  delete CmdScanLockRequest_reflection_;
  CmdScanLockResponse_default_instance_.Shutdown();
  delete CmdScanLockResponse_reflection_;
  CmdResolveLockRequest_default_instance_.Shutdown();
  delete CmdResolveLockRequest_reflection_;
  CmdResolveLockResponse_default_instance_.Shutdown();
  delete CmdResolveLockResponse_reflection_;
  CmdGCRequest_default_instance_.Shutdown();
  delete CmdGCRequest_reflection_;
  CmdGCResponse_default_instance_.Shutdown();
  delete CmdGCResponse_reflection_;
  CmdRawGetRequest_default_instance_.Shutdown();
  delete CmdRawGetRequest_reflection_;
  CmdRawGetResponse_default_instance_.Shutdown();
  delete CmdRawGetResponse_reflection_;
  CmdRawPutRequest_default_instance_.Shutdown();
  delete CmdRawPutRequest_reflection_;
  CmdRawPutResponse_default_instance_.Shutdown();
  delete CmdRawPutResponse_reflection_;
  CmdRawDeleteRequest_default_instance_.Shutdown();
  delete CmdRawDeleteRequest_reflection_;
  CmdRawDeleteResponse_default_instance_.Shutdown();
  delete CmdRawDeleteResponse_reflection_;
  Request_default_instance_.Shutdown();
  delete Request_reflection_;
  Response_default_instance_.Shutdown();
  delete Response_reflection_;
}

void protobuf_InitDefaults_kvrpcpb_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::metapb::protobuf_InitDefaults_metapb_2eproto();
  ::errorpb::protobuf_InitDefaults_errorpb_2eproto();
  ::google::protobuf::internal::GetEmptyString();
  LockInfo_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  KeyError_default_instance_.DefaultConstruct();
  Context_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  CmdGetRequest_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  CmdGetResponse_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  CmdScanRequest_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  KvPair_default_instance_.DefaultConstruct();
  CmdScanResponse_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  Mutation_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  CmdPrewriteRequest_default_instance_.DefaultConstruct();
  CmdPrewriteResponse_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  CmdCommitRequest_default_instance_.DefaultConstruct();
  CmdCommitResponse_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  CmdBatchRollbackRequest_default_instance_.DefaultConstruct();
  CmdBatchRollbackResponse_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  CmdCleanupRequest_default_instance_.DefaultConstruct();
  CmdCleanupResponse_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  CmdBatchGetRequest_default_instance_.DefaultConstruct();
  CmdBatchGetResponse_default_instance_.DefaultConstruct();
  CmdScanLockRequest_default_instance_.DefaultConstruct();
  CmdScanLockResponse_default_instance_.DefaultConstruct();
  CmdResolveLockRequest_default_instance_.DefaultConstruct();
  CmdResolveLockResponse_default_instance_.DefaultConstruct();
  CmdGCRequest_default_instance_.DefaultConstruct();
  CmdGCResponse_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  CmdRawGetRequest_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  CmdRawGetResponse_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  CmdRawPutRequest_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  CmdRawPutResponse_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  CmdRawDeleteRequest_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  CmdRawDeleteResponse_default_instance_.DefaultConstruct();
  Request_default_instance_.DefaultConstruct();
  Response_default_instance_.DefaultConstruct();
  LockInfo_default_instance_.get_mutable()->InitAsDefaultInstance();
  KeyError_default_instance_.get_mutable()->InitAsDefaultInstance();
  Context_default_instance_.get_mutable()->InitAsDefaultInstance();
  CmdGetRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  CmdGetResponse_default_instance_.get_mutable()->InitAsDefaultInstance();
  CmdScanRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  KvPair_default_instance_.get_mutable()->InitAsDefaultInstance();
  CmdScanResponse_default_instance_.get_mutable()->InitAsDefaultInstance();
  Mutation_default_instance_.get_mutable()->InitAsDefaultInstance();
  CmdPrewriteRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  CmdPrewriteResponse_default_instance_.get_mutable()->InitAsDefaultInstance();
  CmdCommitRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  CmdCommitResponse_default_instance_.get_mutable()->InitAsDefaultInstance();
  CmdBatchRollbackRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  CmdBatchRollbackResponse_default_instance_.get_mutable()->InitAsDefaultInstance();
  CmdCleanupRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  CmdCleanupResponse_default_instance_.get_mutable()->InitAsDefaultInstance();
  CmdBatchGetRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  CmdBatchGetResponse_default_instance_.get_mutable()->InitAsDefaultInstance();
  CmdScanLockRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  CmdScanLockResponse_default_instance_.get_mutable()->InitAsDefaultInstance();
  CmdResolveLockRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  CmdResolveLockResponse_default_instance_.get_mutable()->InitAsDefaultInstance();
  CmdGCRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  CmdGCResponse_default_instance_.get_mutable()->InitAsDefaultInstance();
  CmdRawGetRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  CmdRawGetResponse_default_instance_.get_mutable()->InitAsDefaultInstance();
  CmdRawPutRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  CmdRawPutResponse_default_instance_.get_mutable()->InitAsDefaultInstance();
  CmdRawDeleteRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  CmdRawDeleteResponse_default_instance_.get_mutable()->InitAsDefaultInstance();
  Request_default_instance_.get_mutable()->InitAsDefaultInstance();
  Response_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_kvrpcpb_2eproto_once_);
void protobuf_InitDefaults_kvrpcpb_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_kvrpcpb_2eproto_once_,
                 &protobuf_InitDefaults_kvrpcpb_2eproto_impl);
}
void protobuf_AddDesc_kvrpcpb_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_kvrpcpb_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rkvrpcpb.proto\022\007kvrpcpb\032\014metapb.proto\032\r"
    "errorpb.proto\"U\n\010LockInfo\022\024\n\014primary_loc"
    "k\030\001 \001(\014\022\024\n\014lock_version\030\002 \001(\004\022\013\n\003key\030\003 \001"
    "(\014\022\020\n\010lock_ttl\030\004 \001(\004\"O\n\010KeyError\022!\n\006lock"
    "ed\030\001 \001(\0132\021.kvrpcpb.LockInfo\022\021\n\tretryable"
    "\030\002 \001(\t\022\r\n\005abort\030\003 \001(\t\"\206\001\n\007Context\022\021\n\treg"
    "ion_id\030\001 \001(\004\022)\n\014region_epoch\030\002 \001(\0132\023.met"
    "apb.RegionEpoch\022\032\n\004peer\030\003 \001(\0132\014.metapb.P"
    "eer\022\023\n\013read_quorum\030\004 \001(\010\022\014\n\004term\030\005 \001(\004\"-"
    "\n\rCmdGetRequest\022\013\n\003key\030\001 \001(\014\022\017\n\007version\030"
    "\002 \001(\004\"A\n\016CmdGetResponse\022 \n\005error\030\001 \001(\0132\021"
    ".kvrpcpb.KeyError\022\r\n\005value\030\002 \001(\014\"U\n\016CmdS"
    "canRequest\022\021\n\tstart_key\030\001 \001(\014\022\r\n\005limit\030\002"
    " \001(\r\022\017\n\007version\030\003 \001(\004\022\020\n\010key_only\030\004 \001(\010\""
    "F\n\006KvPair\022 \n\005error\030\001 \001(\0132\021.kvrpcpb.KeyEr"
    "ror\022\013\n\003key\030\002 \001(\014\022\r\n\005value\030\003 \001(\014\"1\n\017CmdSc"
    "anResponse\022\036\n\005pairs\030\001 \003(\0132\017.kvrpcpb.KvPa"
    "ir\"\?\n\010Mutation\022\027\n\002op\030\001 \001(\0162\013.kvrpcpb.Op\022"
    "\013\n\003key\030\002 \001(\014\022\r\n\005value\030\003 \001(\014\"\230\001\n\022CmdPrewr"
    "iteRequest\022$\n\tmutations\030\001 \003(\0132\021.kvrpcpb."
    "Mutation\022\024\n\014primary_lock\030\002 \001(\014\022\025\n\rstart_"
    "version\030\003 \001(\004\022\020\n\010lock_ttl\030\004 \001(\004\022\035\n\025skip_"
    "constraint_check\030\005 \001(\010\"8\n\023CmdPrewriteRes"
    "ponse\022!\n\006errors\030\001 \003(\0132\021.kvrpcpb.KeyError"
    "\"_\n\020CmdCommitRequest\022\025\n\rstart_version\030\001 "
    "\001(\004\022\014\n\004keys\030\002 \003(\014\022\026\n\016commit_version\030\003 \001("
    "\004\022\016\n\006binlog\030\004 \001(\014\"5\n\021CmdCommitResponse\022 "
    "\n\005error\030\001 \001(\0132\021.kvrpcpb.KeyError\">\n\027CmdB"
    "atchRollbackRequest\022\025\n\rstart_version\030\001 \001"
    "(\004\022\014\n\004keys\030\002 \003(\014\"<\n\030CmdBatchRollbackResp"
    "onse\022 \n\005error\030\001 \001(\0132\021.kvrpcpb.KeyError\"7"
    "\n\021CmdCleanupRequest\022\013\n\003key\030\001 \001(\014\022\025\n\rstar"
    "t_version\030\002 \001(\004\"N\n\022CmdCleanupResponse\022 \n"
    "\005error\030\001 \001(\0132\021.kvrpcpb.KeyError\022\026\n\016commi"
    "t_version\030\002 \001(\004\"3\n\022CmdBatchGetRequest\022\014\n"
    "\004keys\030\001 \003(\014\022\017\n\007version\030\002 \001(\004\"5\n\023CmdBatch"
    "GetResponse\022\036\n\005pairs\030\001 \003(\0132\017.kvrpcpb.KvP"
    "air\")\n\022CmdScanLockRequest\022\023\n\013max_version"
    "\030\001 \001(\004\"Y\n\023CmdScanLockResponse\022 \n\005error\030\001"
    " \001(\0132\021.kvrpcpb.KeyError\022 \n\005locks\030\002 \003(\0132\021"
    ".kvrpcpb.LockInfo\"F\n\025CmdResolveLockReque"
    "st\022\025\n\rstart_version\030\001 \001(\004\022\026\n\016commit_vers"
    "ion\030\002 \001(\004\":\n\026CmdResolveLockResponse\022 \n\005e"
    "rror\030\001 \001(\0132\021.kvrpcpb.KeyError\"\"\n\014CmdGCRe"
    "quest\022\022\n\nsafe_point\030\001 \001(\004\"1\n\rCmdGCRespon"
    "se\022 \n\005error\030\001 \001(\0132\021.kvrpcpb.KeyError\"\037\n\020"
    "CmdRawGetRequest\022\013\n\003key\030\001 \001(\014\"1\n\021CmdRawG"
    "etResponse\022\r\n\005error\030\001 \001(\t\022\r\n\005value\030\002 \001(\014"
    "\".\n\020CmdRawPutRequest\022\013\n\003key\030\001 \001(\014\022\r\n\005val"
    "ue\030\002 \001(\014\"\"\n\021CmdRawPutResponse\022\r\n\005error\030\001"
    " \001(\t\"\"\n\023CmdRawDeleteRequest\022\013\n\003key\030\001 \001(\014"
    "\"%\n\024CmdRawDeleteResponse\022\r\n\005error\030\001 \001(\t\""
    "\213\006\n\007Request\022\"\n\004type\030\001 \001(\0162\024.kvrpcpb.Mess"
    "ageType\022!\n\007context\030\002 \001(\0132\020.kvrpcpb.Conte"
    "xt\022+\n\013cmd_get_req\030\003 \001(\0132\026.kvrpcpb.CmdGet"
    "Request\022-\n\014cmd_scan_req\030\004 \001(\0132\027.kvrpcpb."
    "CmdScanRequest\0225\n\020cmd_prewrite_req\030\005 \001(\013"
    "2\033.kvrpcpb.CmdPrewriteRequest\0221\n\016cmd_com"
    "mit_req\030\006 \001(\0132\031.kvrpcpb.CmdCommitRequest"
    "\0223\n\017cmd_cleanup_req\030\007 \001(\0132\032.kvrpcpb.CmdC"
    "leanupRequest\0226\n\021cmd_batch_get_req\030\n \001(\013"
    "2\033.kvrpcpb.CmdBatchGetRequest\022@\n\026cmd_bat"
    "ch_rollback_req\030\013 \001(\0132 .kvrpcpb.CmdBatch"
    "RollbackRequest\0226\n\021cmd_scan_lock_req\030\014 \001"
    "(\0132\033.kvrpcpb.CmdScanLockRequest\022<\n\024cmd_r"
    "esolve_lock_req\030\r \001(\0132\036.kvrpcpb.CmdResol"
    "veLockRequest\022)\n\ncmd_gc_req\030\016 \001(\0132\025.kvrp"
    "cpb.CmdGCRequest\0223\n\017cmd_raw_get_req\030\200\002 \001"
    "(\0132\031.kvrpcpb.CmdRawGetRequest\0223\n\017cmd_raw"
    "_put_req\030\201\002 \001(\0132\031.kvrpcpb.CmdRawPutReque"
    "st\0229\n\022cmd_raw_delete_req\030\202\002 \001(\0132\034.kvrpcp"
    "b.CmdRawDeleteRequest\"\251\006\n\010Response\022\"\n\004ty"
    "pe\030\001 \001(\0162\024.kvrpcpb.MessageType\022$\n\014region"
    "_error\030\002 \001(\0132\016.errorpb.Error\022-\n\014cmd_get_"
    "resp\030\003 \001(\0132\027.kvrpcpb.CmdGetResponse\022/\n\rc"
    "md_scan_resp\030\004 \001(\0132\030.kvrpcpb.CmdScanResp"
    "onse\0227\n\021cmd_prewrite_resp\030\005 \001(\0132\034.kvrpcp"
    "b.CmdPrewriteResponse\0223\n\017cmd_commit_resp"
    "\030\006 \001(\0132\032.kvrpcpb.CmdCommitResponse\0225\n\020cm"
    "d_cleanup_resp\030\007 \001(\0132\033.kvrpcpb.CmdCleanu"
    "pResponse\0228\n\022cmd_batch_get_resp\030\n \001(\0132\034."
    "kvrpcpb.CmdBatchGetResponse\022B\n\027cmd_batch"
    "_rollback_resp\030\013 \001(\0132!.kvrpcpb.CmdBatchR"
    "ollbackResponse\0228\n\022cmd_scan_lock_resp\030\014 "
    "\001(\0132\034.kvrpcpb.CmdScanLockResponse\022>\n\025cmd"
    "_resolve_lock_resp\030\r \001(\0132\037.kvrpcpb.CmdRe"
    "solveLockResponse\022+\n\013cmd_gc_resp\030\016 \001(\0132\026"
    ".kvrpcpb.CmdGCResponse\0225\n\020cmd_raw_get_re"
    "sp\030\200\002 \001(\0132\032.kvrpcpb.CmdRawGetResponse\0225\n"
    "\020cmd_raw_put_resp\030\201\002 \001(\0132\032.kvrpcpb.CmdRa"
    "wPutResponse\022;\n\023cmd_raw_delete_resp\030\202\002 \001"
    "(\0132\035.kvrpcpb.CmdRawDeleteResponse*\340\001\n\013Me"
    "ssageType\022\n\n\006CmdGet\020\000\022\013\n\007CmdScan\020\001\022\017\n\013Cm"
    "dPrewrite\020\002\022\r\n\tCmdCommit\020\003\022\016\n\nCmdCleanup"
    "\020\004\022\017\n\013CmdBatchGet\020\007\022\024\n\020CmdBatchRollback\020"
    "\010\022\017\n\013CmdScanLock\020\t\022\022\n\016CmdResolveLock\020\n\022\t"
    "\n\005CmdGC\020\013\022\016\n\tCmdRawGet\020\200\002\022\016\n\tCmdRawPut\020\201"
    "\002\022\021\n\014CmdRawDelete\020\202\002* \n\002Op\022\007\n\003Put\020\000\022\007\n\003D"
    "el\020\001\022\010\n\004Lock\020\002", 3934);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "kvrpcpb.proto", &protobuf_RegisterTypes);
  ::metapb::protobuf_AddDesc_metapb_2eproto();
  ::errorpb::protobuf_AddDesc_errorpb_2eproto();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_kvrpcpb_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_kvrpcpb_2eproto_once_);
void protobuf_AddDesc_kvrpcpb_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_kvrpcpb_2eproto_once_,
                 &protobuf_AddDesc_kvrpcpb_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_kvrpcpb_2eproto {
  StaticDescriptorInitializer_kvrpcpb_2eproto() {
    protobuf_AddDesc_kvrpcpb_2eproto();
  }
} static_descriptor_initializer_kvrpcpb_2eproto_;
const ::google::protobuf::EnumDescriptor* MessageType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessageType_descriptor_;
}
bool MessageType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 256:
    case 257:
    case 258:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Op_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Op_descriptor_;
}
bool Op_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LockInfo::kPrimaryLockFieldNumber;
const int LockInfo::kLockVersionFieldNumber;
const int LockInfo::kKeyFieldNumber;
const int LockInfo::kLockTtlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LockInfo::LockInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_kvrpcpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.LockInfo)
}

void LockInfo::InitAsDefaultInstance() {
}

LockInfo::LockInfo(const LockInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.LockInfo)
}

void LockInfo::SharedCtor() {
  _cached_size_ = 0;
  primary_lock_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&lock_version_, 0, reinterpret_cast<char*>(&lock_ttl_) -
    reinterpret_cast<char*>(&lock_version_) + sizeof(lock_ttl_));
}

LockInfo::~LockInfo() {
  // @@protoc_insertion_point(destructor:kvrpcpb.LockInfo)
  SharedDtor();
}

void LockInfo::SharedDtor() {
  primary_lock_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LockInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LockInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LockInfo_descriptor_;
}

const LockInfo& LockInfo::default_instance() {
  protobuf_InitDefaults_kvrpcpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<LockInfo> LockInfo_default_instance_;

LockInfo* LockInfo::New(::google::protobuf::Arena* arena) const {
  LockInfo* n = new LockInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LockInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.LockInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(LockInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<LockInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 15u) {
    ZR_(lock_version_, lock_ttl_);
    if (has_primary_lock()) {
      primary_lock_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_key()) {
      key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool LockInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.LockInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes primary_lock = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_primary_lock()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_lock_version;
        break;
      }

      // optional uint64 lock_version = 2;
      case 2: {
        if (tag == 16) {
         parse_lock_version:
          set_has_lock_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lock_version_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_key;
        break;
      }

      // optional bytes key = 3;
      case 3: {
        if (tag == 26) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_lock_ttl;
        break;
      }

      // optional uint64 lock_ttl = 4;
      case 4: {
        if (tag == 32) {
         parse_lock_ttl:
          set_has_lock_ttl();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lock_ttl_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.LockInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.LockInfo)
  return false;
#undef DO_
}

void LockInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.LockInfo)
  // optional bytes primary_lock = 1;
  if (has_primary_lock()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->primary_lock(), output);
  }

  // optional uint64 lock_version = 2;
  if (has_lock_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->lock_version(), output);
  }

  // optional bytes key = 3;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->key(), output);
  }

  // optional uint64 lock_ttl = 4;
  if (has_lock_ttl()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->lock_ttl(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kvrpcpb.LockInfo)
}

::google::protobuf::uint8* LockInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.LockInfo)
  // optional bytes primary_lock = 1;
  if (has_primary_lock()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->primary_lock(), target);
  }

  // optional uint64 lock_version = 2;
  if (has_lock_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->lock_version(), target);
  }

  // optional bytes key = 3;
  if (has_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->key(), target);
  }

  // optional uint64 lock_ttl = 4;
  if (has_lock_ttl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->lock_ttl(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.LockInfo)
  return target;
}

size_t LockInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.LockInfo)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 15u) {
    // optional bytes primary_lock = 1;
    if (has_primary_lock()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->primary_lock());
    }

    // optional uint64 lock_version = 2;
    if (has_lock_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->lock_version());
    }

    // optional bytes key = 3;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->key());
    }

    // optional uint64 lock_ttl = 4;
    if (has_lock_ttl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->lock_ttl());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LockInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.LockInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const LockInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LockInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.LockInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.LockInfo)
    UnsafeMergeFrom(*source);
  }
}

void LockInfo::MergeFrom(const LockInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.LockInfo)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void LockInfo::UnsafeMergeFrom(const LockInfo& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_primary_lock()) {
      set_has_primary_lock();
      primary_lock_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.primary_lock_);
    }
    if (from.has_lock_version()) {
      set_lock_version(from.lock_version());
    }
    if (from.has_key()) {
      set_has_key();
      key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
    }
    if (from.has_lock_ttl()) {
      set_lock_ttl(from.lock_ttl());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void LockInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.LockInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LockInfo::CopyFrom(const LockInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.LockInfo)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool LockInfo::IsInitialized() const {

  return true;
}

void LockInfo::Swap(LockInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LockInfo::InternalSwap(LockInfo* other) {
  primary_lock_.Swap(&other->primary_lock_);
  std::swap(lock_version_, other->lock_version_);
  key_.Swap(&other->key_);
  std::swap(lock_ttl_, other->lock_ttl_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LockInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LockInfo_descriptor_;
  metadata.reflection = LockInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LockInfo

// optional bytes primary_lock = 1;
bool LockInfo::has_primary_lock() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LockInfo::set_has_primary_lock() {
  _has_bits_[0] |= 0x00000001u;
}
void LockInfo::clear_has_primary_lock() {
  _has_bits_[0] &= ~0x00000001u;
}
void LockInfo::clear_primary_lock() {
  primary_lock_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_primary_lock();
}
const ::std::string& LockInfo::primary_lock() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.LockInfo.primary_lock)
  return primary_lock_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LockInfo::set_primary_lock(const ::std::string& value) {
  set_has_primary_lock();
  primary_lock_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kvrpcpb.LockInfo.primary_lock)
}
void LockInfo::set_primary_lock(const char* value) {
  set_has_primary_lock();
  primary_lock_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kvrpcpb.LockInfo.primary_lock)
}
void LockInfo::set_primary_lock(const void* value, size_t size) {
  set_has_primary_lock();
  primary_lock_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kvrpcpb.LockInfo.primary_lock)
}
::std::string* LockInfo::mutable_primary_lock() {
  set_has_primary_lock();
  // @@protoc_insertion_point(field_mutable:kvrpcpb.LockInfo.primary_lock)
  return primary_lock_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LockInfo::release_primary_lock() {
  // @@protoc_insertion_point(field_release:kvrpcpb.LockInfo.primary_lock)
  clear_has_primary_lock();
  return primary_lock_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LockInfo::set_allocated_primary_lock(::std::string* primary_lock) {
  if (primary_lock != NULL) {
    set_has_primary_lock();
  } else {
    clear_has_primary_lock();
  }
  primary_lock_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), primary_lock);
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.LockInfo.primary_lock)
}

// optional uint64 lock_version = 2;
bool LockInfo::has_lock_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LockInfo::set_has_lock_version() {
  _has_bits_[0] |= 0x00000002u;
}
void LockInfo::clear_has_lock_version() {
  _has_bits_[0] &= ~0x00000002u;
}
void LockInfo::clear_lock_version() {
  lock_version_ = GOOGLE_ULONGLONG(0);
  clear_has_lock_version();
}
::google::protobuf::uint64 LockInfo::lock_version() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.LockInfo.lock_version)
  return lock_version_;
}
void LockInfo::set_lock_version(::google::protobuf::uint64 value) {
  set_has_lock_version();
  lock_version_ = value;
  // @@protoc_insertion_point(field_set:kvrpcpb.LockInfo.lock_version)
}

// optional bytes key = 3;
bool LockInfo::has_key() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void LockInfo::set_has_key() {
  _has_bits_[0] |= 0x00000004u;
}
void LockInfo::clear_has_key() {
  _has_bits_[0] &= ~0x00000004u;
}
void LockInfo::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
const ::std::string& LockInfo::key() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.LockInfo.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LockInfo::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kvrpcpb.LockInfo.key)
}
void LockInfo::set_key(const char* value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kvrpcpb.LockInfo.key)
}
void LockInfo::set_key(const void* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kvrpcpb.LockInfo.key)
}
::std::string* LockInfo::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:kvrpcpb.LockInfo.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LockInfo::release_key() {
  // @@protoc_insertion_point(field_release:kvrpcpb.LockInfo.key)
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LockInfo::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.LockInfo.key)
}

// optional uint64 lock_ttl = 4;
bool LockInfo::has_lock_ttl() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void LockInfo::set_has_lock_ttl() {
  _has_bits_[0] |= 0x00000008u;
}
void LockInfo::clear_has_lock_ttl() {
  _has_bits_[0] &= ~0x00000008u;
}
void LockInfo::clear_lock_ttl() {
  lock_ttl_ = GOOGLE_ULONGLONG(0);
  clear_has_lock_ttl();
}
::google::protobuf::uint64 LockInfo::lock_ttl() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.LockInfo.lock_ttl)
  return lock_ttl_;
}
void LockInfo::set_lock_ttl(::google::protobuf::uint64 value) {
  set_has_lock_ttl();
  lock_ttl_ = value;
  // @@protoc_insertion_point(field_set:kvrpcpb.LockInfo.lock_ttl)
}

inline const LockInfo* LockInfo::internal_default_instance() {
  return &LockInfo_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KeyError::kLockedFieldNumber;
const int KeyError::kRetryableFieldNumber;
const int KeyError::kAbortFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KeyError::KeyError()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_kvrpcpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.KeyError)
}

void KeyError::InitAsDefaultInstance() {
  locked_ = const_cast< ::kvrpcpb::LockInfo*>(
      ::kvrpcpb::LockInfo::internal_default_instance());
}

KeyError::KeyError(const KeyError& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.KeyError)
}

void KeyError::SharedCtor() {
  _cached_size_ = 0;
  retryable_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  abort_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  locked_ = NULL;
}

KeyError::~KeyError() {
  // @@protoc_insertion_point(destructor:kvrpcpb.KeyError)
  SharedDtor();
}

void KeyError::SharedDtor() {
  retryable_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  abort_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != &KeyError_default_instance_.get()) {
    delete locked_;
  }
}

void KeyError::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KeyError::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KeyError_descriptor_;
}

const KeyError& KeyError::default_instance() {
  protobuf_InitDefaults_kvrpcpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<KeyError> KeyError_default_instance_;

KeyError* KeyError::New(::google::protobuf::Arena* arena) const {
  KeyError* n = new KeyError;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void KeyError::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.KeyError)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_locked()) {
      if (locked_ != NULL) locked_->::kvrpcpb::LockInfo::Clear();
    }
    if (has_retryable()) {
      retryable_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_abort()) {
      abort_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool KeyError::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.KeyError)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .kvrpcpb.LockInfo locked = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_locked()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_retryable;
        break;
      }

      // optional string retryable = 2;
      case 2: {
        if (tag == 18) {
         parse_retryable:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_retryable()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->retryable().data(), this->retryable().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "kvrpcpb.KeyError.retryable");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_abort;
        break;
      }

      // optional string abort = 3;
      case 3: {
        if (tag == 26) {
         parse_abort:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_abort()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->abort().data(), this->abort().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "kvrpcpb.KeyError.abort");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.KeyError)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.KeyError)
  return false;
#undef DO_
}

void KeyError::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.KeyError)
  // optional .kvrpcpb.LockInfo locked = 1;
  if (has_locked()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->locked_, output);
  }

  // optional string retryable = 2;
  if (has_retryable()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->retryable().data(), this->retryable().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kvrpcpb.KeyError.retryable");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->retryable(), output);
  }

  // optional string abort = 3;
  if (has_abort()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->abort().data(), this->abort().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kvrpcpb.KeyError.abort");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->abort(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kvrpcpb.KeyError)
}

::google::protobuf::uint8* KeyError::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.KeyError)
  // optional .kvrpcpb.LockInfo locked = 1;
  if (has_locked()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->locked_, false, target);
  }

  // optional string retryable = 2;
  if (has_retryable()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->retryable().data(), this->retryable().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kvrpcpb.KeyError.retryable");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->retryable(), target);
  }

  // optional string abort = 3;
  if (has_abort()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->abort().data(), this->abort().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kvrpcpb.KeyError.abort");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->abort(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.KeyError)
  return target;
}

size_t KeyError::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.KeyError)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional .kvrpcpb.LockInfo locked = 1;
    if (has_locked()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->locked_);
    }

    // optional string retryable = 2;
    if (has_retryable()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->retryable());
    }

    // optional string abort = 3;
    if (has_abort()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->abort());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KeyError::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.KeyError)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const KeyError* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const KeyError>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.KeyError)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.KeyError)
    UnsafeMergeFrom(*source);
  }
}

void KeyError::MergeFrom(const KeyError& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.KeyError)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void KeyError::UnsafeMergeFrom(const KeyError& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_locked()) {
      mutable_locked()->::kvrpcpb::LockInfo::MergeFrom(from.locked());
    }
    if (from.has_retryable()) {
      set_has_retryable();
      retryable_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.retryable_);
    }
    if (from.has_abort()) {
      set_has_abort();
      abort_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.abort_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void KeyError::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.KeyError)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeyError::CopyFrom(const KeyError& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.KeyError)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool KeyError::IsInitialized() const {

  return true;
}

void KeyError::Swap(KeyError* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KeyError::InternalSwap(KeyError* other) {
  std::swap(locked_, other->locked_);
  retryable_.Swap(&other->retryable_);
  abort_.Swap(&other->abort_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata KeyError::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KeyError_descriptor_;
  metadata.reflection = KeyError_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// KeyError

// optional .kvrpcpb.LockInfo locked = 1;
bool KeyError::has_locked() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void KeyError::set_has_locked() {
  _has_bits_[0] |= 0x00000001u;
}
void KeyError::clear_has_locked() {
  _has_bits_[0] &= ~0x00000001u;
}
void KeyError::clear_locked() {
  if (locked_ != NULL) locked_->::kvrpcpb::LockInfo::Clear();
  clear_has_locked();
}
const ::kvrpcpb::LockInfo& KeyError::locked() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.KeyError.locked)
  return locked_ != NULL ? *locked_
                         : *::kvrpcpb::LockInfo::internal_default_instance();
}
::kvrpcpb::LockInfo* KeyError::mutable_locked() {
  set_has_locked();
  if (locked_ == NULL) {
    locked_ = new ::kvrpcpb::LockInfo;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.KeyError.locked)
  return locked_;
}
::kvrpcpb::LockInfo* KeyError::release_locked() {
  // @@protoc_insertion_point(field_release:kvrpcpb.KeyError.locked)
  clear_has_locked();
  ::kvrpcpb::LockInfo* temp = locked_;
  locked_ = NULL;
  return temp;
}
void KeyError::set_allocated_locked(::kvrpcpb::LockInfo* locked) {
  delete locked_;
  locked_ = locked;
  if (locked) {
    set_has_locked();
  } else {
    clear_has_locked();
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.KeyError.locked)
}

// optional string retryable = 2;
bool KeyError::has_retryable() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void KeyError::set_has_retryable() {
  _has_bits_[0] |= 0x00000002u;
}
void KeyError::clear_has_retryable() {
  _has_bits_[0] &= ~0x00000002u;
}
void KeyError::clear_retryable() {
  retryable_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_retryable();
}
const ::std::string& KeyError::retryable() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.KeyError.retryable)
  return retryable_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void KeyError::set_retryable(const ::std::string& value) {
  set_has_retryable();
  retryable_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kvrpcpb.KeyError.retryable)
}
void KeyError::set_retryable(const char* value) {
  set_has_retryable();
  retryable_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kvrpcpb.KeyError.retryable)
}
void KeyError::set_retryable(const char* value, size_t size) {
  set_has_retryable();
  retryable_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kvrpcpb.KeyError.retryable)
}
::std::string* KeyError::mutable_retryable() {
  set_has_retryable();
  // @@protoc_insertion_point(field_mutable:kvrpcpb.KeyError.retryable)
  return retryable_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* KeyError::release_retryable() {
  // @@protoc_insertion_point(field_release:kvrpcpb.KeyError.retryable)
  clear_has_retryable();
  return retryable_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void KeyError::set_allocated_retryable(::std::string* retryable) {
  if (retryable != NULL) {
    set_has_retryable();
  } else {
    clear_has_retryable();
  }
  retryable_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), retryable);
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.KeyError.retryable)
}

// optional string abort = 3;
bool KeyError::has_abort() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void KeyError::set_has_abort() {
  _has_bits_[0] |= 0x00000004u;
}
void KeyError::clear_has_abort() {
  _has_bits_[0] &= ~0x00000004u;
}
void KeyError::clear_abort() {
  abort_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_abort();
}
const ::std::string& KeyError::abort() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.KeyError.abort)
  return abort_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void KeyError::set_abort(const ::std::string& value) {
  set_has_abort();
  abort_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kvrpcpb.KeyError.abort)
}
void KeyError::set_abort(const char* value) {
  set_has_abort();
  abort_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kvrpcpb.KeyError.abort)
}
void KeyError::set_abort(const char* value, size_t size) {
  set_has_abort();
  abort_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kvrpcpb.KeyError.abort)
}
::std::string* KeyError::mutable_abort() {
  set_has_abort();
  // @@protoc_insertion_point(field_mutable:kvrpcpb.KeyError.abort)
  return abort_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* KeyError::release_abort() {
  // @@protoc_insertion_point(field_release:kvrpcpb.KeyError.abort)
  clear_has_abort();
  return abort_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void KeyError::set_allocated_abort(::std::string* abort) {
  if (abort != NULL) {
    set_has_abort();
  } else {
    clear_has_abort();
  }
  abort_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), abort);
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.KeyError.abort)
}

inline const KeyError* KeyError::internal_default_instance() {
  return &KeyError_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Context::kRegionIdFieldNumber;
const int Context::kRegionEpochFieldNumber;
const int Context::kPeerFieldNumber;
const int Context::kReadQuorumFieldNumber;
const int Context::kTermFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Context::Context()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_kvrpcpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.Context)
}

void Context::InitAsDefaultInstance() {
  region_epoch_ = const_cast< ::metapb::RegionEpoch*>(
      ::metapb::RegionEpoch::internal_default_instance());
  peer_ = const_cast< ::metapb::Peer*>(
      ::metapb::Peer::internal_default_instance());
}

Context::Context(const Context& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.Context)
}

void Context::SharedCtor() {
  _cached_size_ = 0;
  region_epoch_ = NULL;
  peer_ = NULL;
  ::memset(&region_id_, 0, reinterpret_cast<char*>(&read_quorum_) -
    reinterpret_cast<char*>(&region_id_) + sizeof(read_quorum_));
}

Context::~Context() {
  // @@protoc_insertion_point(destructor:kvrpcpb.Context)
  SharedDtor();
}

void Context::SharedDtor() {
  if (this != &Context_default_instance_.get()) {
    delete region_epoch_;
    delete peer_;
  }
}

void Context::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Context::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Context_descriptor_;
}

const Context& Context::default_instance() {
  protobuf_InitDefaults_kvrpcpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Context> Context_default_instance_;

Context* Context::New(::google::protobuf::Arena* arena) const {
  Context* n = new Context;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Context::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.Context)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Context, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Context*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31u) {
    ZR_(region_id_, read_quorum_);
    if (has_region_epoch()) {
      if (region_epoch_ != NULL) region_epoch_->::metapb::RegionEpoch::Clear();
    }
    if (has_peer()) {
      if (peer_ != NULL) peer_->::metapb::Peer::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Context::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.Context)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 region_id = 1;
      case 1: {
        if (tag == 8) {
          set_has_region_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &region_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_region_epoch;
        break;
      }

      // optional .metapb.RegionEpoch region_epoch = 2;
      case 2: {
        if (tag == 18) {
         parse_region_epoch:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_region_epoch()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_peer;
        break;
      }

      // optional .metapb.Peer peer = 3;
      case 3: {
        if (tag == 26) {
         parse_peer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_peer()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_read_quorum;
        break;
      }

      // optional bool read_quorum = 4;
      case 4: {
        if (tag == 32) {
         parse_read_quorum:
          set_has_read_quorum();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &read_quorum_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_term;
        break;
      }

      // optional uint64 term = 5;
      case 5: {
        if (tag == 40) {
         parse_term:
          set_has_term();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &term_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.Context)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.Context)
  return false;
#undef DO_
}

void Context::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.Context)
  // optional uint64 region_id = 1;
  if (has_region_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->region_id(), output);
  }

  // optional .metapb.RegionEpoch region_epoch = 2;
  if (has_region_epoch()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->region_epoch_, output);
  }

  // optional .metapb.Peer peer = 3;
  if (has_peer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->peer_, output);
  }

  // optional bool read_quorum = 4;
  if (has_read_quorum()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->read_quorum(), output);
  }

  // optional uint64 term = 5;
  if (has_term()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->term(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kvrpcpb.Context)
}

::google::protobuf::uint8* Context::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.Context)
  // optional uint64 region_id = 1;
  if (has_region_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->region_id(), target);
  }

  // optional .metapb.RegionEpoch region_epoch = 2;
  if (has_region_epoch()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->region_epoch_, false, target);
  }

  // optional .metapb.Peer peer = 3;
  if (has_peer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->peer_, false, target);
  }

  // optional bool read_quorum = 4;
  if (has_read_quorum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->read_quorum(), target);
  }

  // optional uint64 term = 5;
  if (has_term()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->term(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.Context)
  return target;
}

size_t Context::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.Context)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 31u) {
    // optional uint64 region_id = 1;
    if (has_region_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->region_id());
    }

    // optional .metapb.RegionEpoch region_epoch = 2;
    if (has_region_epoch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->region_epoch_);
    }

    // optional .metapb.Peer peer = 3;
    if (has_peer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->peer_);
    }

    // optional bool read_quorum = 4;
    if (has_read_quorum()) {
      total_size += 1 + 1;
    }

    // optional uint64 term = 5;
    if (has_term()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->term());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Context::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.Context)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Context* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Context>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.Context)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.Context)
    UnsafeMergeFrom(*source);
  }
}

void Context::MergeFrom(const Context& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.Context)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Context::UnsafeMergeFrom(const Context& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_region_id()) {
      set_region_id(from.region_id());
    }
    if (from.has_region_epoch()) {
      mutable_region_epoch()->::metapb::RegionEpoch::MergeFrom(from.region_epoch());
    }
    if (from.has_peer()) {
      mutable_peer()->::metapb::Peer::MergeFrom(from.peer());
    }
    if (from.has_read_quorum()) {
      set_read_quorum(from.read_quorum());
    }
    if (from.has_term()) {
      set_term(from.term());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void Context::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.Context)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Context::CopyFrom(const Context& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.Context)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Context::IsInitialized() const {

  return true;
}

void Context::Swap(Context* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Context::InternalSwap(Context* other) {
  std::swap(region_id_, other->region_id_);
  std::swap(region_epoch_, other->region_epoch_);
  std::swap(peer_, other->peer_);
  std::swap(read_quorum_, other->read_quorum_);
  std::swap(term_, other->term_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Context::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Context_descriptor_;
  metadata.reflection = Context_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Context

// optional uint64 region_id = 1;
bool Context::has_region_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Context::set_has_region_id() {
  _has_bits_[0] |= 0x00000001u;
}
void Context::clear_has_region_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void Context::clear_region_id() {
  region_id_ = GOOGLE_ULONGLONG(0);
  clear_has_region_id();
}
::google::protobuf::uint64 Context::region_id() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.Context.region_id)
  return region_id_;
}
void Context::set_region_id(::google::protobuf::uint64 value) {
  set_has_region_id();
  region_id_ = value;
  // @@protoc_insertion_point(field_set:kvrpcpb.Context.region_id)
}

// optional .metapb.RegionEpoch region_epoch = 2;
bool Context::has_region_epoch() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Context::set_has_region_epoch() {
  _has_bits_[0] |= 0x00000002u;
}
void Context::clear_has_region_epoch() {
  _has_bits_[0] &= ~0x00000002u;
}
void Context::clear_region_epoch() {
  if (region_epoch_ != NULL) region_epoch_->::metapb::RegionEpoch::Clear();
  clear_has_region_epoch();
}
const ::metapb::RegionEpoch& Context::region_epoch() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.Context.region_epoch)
  return region_epoch_ != NULL ? *region_epoch_
                         : *::metapb::RegionEpoch::internal_default_instance();
}
::metapb::RegionEpoch* Context::mutable_region_epoch() {
  set_has_region_epoch();
  if (region_epoch_ == NULL) {
    region_epoch_ = new ::metapb::RegionEpoch;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.Context.region_epoch)
  return region_epoch_;
}
::metapb::RegionEpoch* Context::release_region_epoch() {
  // @@protoc_insertion_point(field_release:kvrpcpb.Context.region_epoch)
  clear_has_region_epoch();
  ::metapb::RegionEpoch* temp = region_epoch_;
  region_epoch_ = NULL;
  return temp;
}
void Context::set_allocated_region_epoch(::metapb::RegionEpoch* region_epoch) {
  delete region_epoch_;
  region_epoch_ = region_epoch;
  if (region_epoch) {
    set_has_region_epoch();
  } else {
    clear_has_region_epoch();
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.Context.region_epoch)
}

// optional .metapb.Peer peer = 3;
bool Context::has_peer() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Context::set_has_peer() {
  _has_bits_[0] |= 0x00000004u;
}
void Context::clear_has_peer() {
  _has_bits_[0] &= ~0x00000004u;
}
void Context::clear_peer() {
  if (peer_ != NULL) peer_->::metapb::Peer::Clear();
  clear_has_peer();
}
const ::metapb::Peer& Context::peer() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.Context.peer)
  return peer_ != NULL ? *peer_
                         : *::metapb::Peer::internal_default_instance();
}
::metapb::Peer* Context::mutable_peer() {
  set_has_peer();
  if (peer_ == NULL) {
    peer_ = new ::metapb::Peer;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.Context.peer)
  return peer_;
}
::metapb::Peer* Context::release_peer() {
  // @@protoc_insertion_point(field_release:kvrpcpb.Context.peer)
  clear_has_peer();
  ::metapb::Peer* temp = peer_;
  peer_ = NULL;
  return temp;
}
void Context::set_allocated_peer(::metapb::Peer* peer) {
  delete peer_;
  peer_ = peer;
  if (peer) {
    set_has_peer();
  } else {
    clear_has_peer();
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.Context.peer)
}

// optional bool read_quorum = 4;
bool Context::has_read_quorum() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Context::set_has_read_quorum() {
  _has_bits_[0] |= 0x00000008u;
}
void Context::clear_has_read_quorum() {
  _has_bits_[0] &= ~0x00000008u;
}
void Context::clear_read_quorum() {
  read_quorum_ = false;
  clear_has_read_quorum();
}
bool Context::read_quorum() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.Context.read_quorum)
  return read_quorum_;
}
void Context::set_read_quorum(bool value) {
  set_has_read_quorum();
  read_quorum_ = value;
  // @@protoc_insertion_point(field_set:kvrpcpb.Context.read_quorum)
}

// optional uint64 term = 5;
bool Context::has_term() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Context::set_has_term() {
  _has_bits_[0] |= 0x00000010u;
}
void Context::clear_has_term() {
  _has_bits_[0] &= ~0x00000010u;
}
void Context::clear_term() {
  term_ = GOOGLE_ULONGLONG(0);
  clear_has_term();
}
::google::protobuf::uint64 Context::term() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.Context.term)
  return term_;
}
void Context::set_term(::google::protobuf::uint64 value) {
  set_has_term();
  term_ = value;
  // @@protoc_insertion_point(field_set:kvrpcpb.Context.term)
}

inline const Context* Context::internal_default_instance() {
  return &Context_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CmdGetRequest::kKeyFieldNumber;
const int CmdGetRequest::kVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CmdGetRequest::CmdGetRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_kvrpcpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.CmdGetRequest)
}

void CmdGetRequest::InitAsDefaultInstance() {
}

CmdGetRequest::CmdGetRequest(const CmdGetRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.CmdGetRequest)
}

void CmdGetRequest::SharedCtor() {
  _cached_size_ = 0;
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_ = GOOGLE_ULONGLONG(0);
}

CmdGetRequest::~CmdGetRequest() {
  // @@protoc_insertion_point(destructor:kvrpcpb.CmdGetRequest)
  SharedDtor();
}

void CmdGetRequest::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CmdGetRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CmdGetRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CmdGetRequest_descriptor_;
}

const CmdGetRequest& CmdGetRequest::default_instance() {
  protobuf_InitDefaults_kvrpcpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<CmdGetRequest> CmdGetRequest_default_instance_;

CmdGetRequest* CmdGetRequest::New(::google::protobuf::Arena* arena) const {
  CmdGetRequest* n = new CmdGetRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CmdGetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.CmdGetRequest)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_key()) {
      key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    version_ = GOOGLE_ULONGLONG(0);
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CmdGetRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.CmdGetRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_version;
        break;
      }

      // optional uint64 version = 2;
      case 2: {
        if (tag == 16) {
         parse_version:
          set_has_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.CmdGetRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.CmdGetRequest)
  return false;
#undef DO_
}

void CmdGetRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.CmdGetRequest)
  // optional bytes key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->key(), output);
  }

  // optional uint64 version = 2;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->version(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kvrpcpb.CmdGetRequest)
}

::google::protobuf::uint8* CmdGetRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.CmdGetRequest)
  // optional bytes key = 1;
  if (has_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->key(), target);
  }

  // optional uint64 version = 2;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->version(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.CmdGetRequest)
  return target;
}

size_t CmdGetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.CmdGetRequest)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional bytes key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->key());
    }

    // optional uint64 version = 2;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->version());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CmdGetRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.CmdGetRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CmdGetRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CmdGetRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.CmdGetRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.CmdGetRequest)
    UnsafeMergeFrom(*source);
  }
}

void CmdGetRequest::MergeFrom(const CmdGetRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.CmdGetRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void CmdGetRequest::UnsafeMergeFrom(const CmdGetRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_has_key();
      key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
    }
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void CmdGetRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.CmdGetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CmdGetRequest::CopyFrom(const CmdGetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.CmdGetRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool CmdGetRequest::IsInitialized() const {

  return true;
}

void CmdGetRequest::Swap(CmdGetRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CmdGetRequest::InternalSwap(CmdGetRequest* other) {
  key_.Swap(&other->key_);
  std::swap(version_, other->version_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CmdGetRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CmdGetRequest_descriptor_;
  metadata.reflection = CmdGetRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CmdGetRequest

// optional bytes key = 1;
bool CmdGetRequest::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CmdGetRequest::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
void CmdGetRequest::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
void CmdGetRequest::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
const ::std::string& CmdGetRequest::key() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.CmdGetRequest.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CmdGetRequest::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kvrpcpb.CmdGetRequest.key)
}
void CmdGetRequest::set_key(const char* value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kvrpcpb.CmdGetRequest.key)
}
void CmdGetRequest::set_key(const void* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kvrpcpb.CmdGetRequest.key)
}
::std::string* CmdGetRequest::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:kvrpcpb.CmdGetRequest.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CmdGetRequest::release_key() {
  // @@protoc_insertion_point(field_release:kvrpcpb.CmdGetRequest.key)
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CmdGetRequest::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.CmdGetRequest.key)
}

// optional uint64 version = 2;
bool CmdGetRequest::has_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CmdGetRequest::set_has_version() {
  _has_bits_[0] |= 0x00000002u;
}
void CmdGetRequest::clear_has_version() {
  _has_bits_[0] &= ~0x00000002u;
}
void CmdGetRequest::clear_version() {
  version_ = GOOGLE_ULONGLONG(0);
  clear_has_version();
}
::google::protobuf::uint64 CmdGetRequest::version() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.CmdGetRequest.version)
  return version_;
}
void CmdGetRequest::set_version(::google::protobuf::uint64 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:kvrpcpb.CmdGetRequest.version)
}

inline const CmdGetRequest* CmdGetRequest::internal_default_instance() {
  return &CmdGetRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CmdGetResponse::kErrorFieldNumber;
const int CmdGetResponse::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CmdGetResponse::CmdGetResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_kvrpcpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.CmdGetResponse)
}

void CmdGetResponse::InitAsDefaultInstance() {
  error_ = const_cast< ::kvrpcpb::KeyError*>(
      ::kvrpcpb::KeyError::internal_default_instance());
}

CmdGetResponse::CmdGetResponse(const CmdGetResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.CmdGetResponse)
}

void CmdGetResponse::SharedCtor() {
  _cached_size_ = 0;
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  error_ = NULL;
}

CmdGetResponse::~CmdGetResponse() {
  // @@protoc_insertion_point(destructor:kvrpcpb.CmdGetResponse)
  SharedDtor();
}

void CmdGetResponse::SharedDtor() {
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != &CmdGetResponse_default_instance_.get()) {
    delete error_;
  }
}

void CmdGetResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CmdGetResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CmdGetResponse_descriptor_;
}

const CmdGetResponse& CmdGetResponse::default_instance() {
  protobuf_InitDefaults_kvrpcpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<CmdGetResponse> CmdGetResponse_default_instance_;

CmdGetResponse* CmdGetResponse::New(::google::protobuf::Arena* arena) const {
  CmdGetResponse* n = new CmdGetResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CmdGetResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.CmdGetResponse)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_error()) {
      if (error_ != NULL) error_->::kvrpcpb::KeyError::Clear();
    }
    if (has_value()) {
      value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CmdGetResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.CmdGetResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .kvrpcpb.KeyError error = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // optional bytes value = 2;
      case 2: {
        if (tag == 18) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.CmdGetResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.CmdGetResponse)
  return false;
#undef DO_
}

void CmdGetResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.CmdGetResponse)
  // optional .kvrpcpb.KeyError error = 1;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->error_, output);
  }

  // optional bytes value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kvrpcpb.CmdGetResponse)
}

::google::protobuf::uint8* CmdGetResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.CmdGetResponse)
  // optional .kvrpcpb.KeyError error = 1;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->error_, false, target);
  }

  // optional bytes value = 2;
  if (has_value()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.CmdGetResponse)
  return target;
}

size_t CmdGetResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.CmdGetResponse)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional .kvrpcpb.KeyError error = 1;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->error_);
    }

    // optional bytes value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->value());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CmdGetResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.CmdGetResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CmdGetResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CmdGetResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.CmdGetResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.CmdGetResponse)
    UnsafeMergeFrom(*source);
  }
}

void CmdGetResponse::MergeFrom(const CmdGetResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.CmdGetResponse)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void CmdGetResponse::UnsafeMergeFrom(const CmdGetResponse& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      mutable_error()->::kvrpcpb::KeyError::MergeFrom(from.error());
    }
    if (from.has_value()) {
      set_has_value();
      value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void CmdGetResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.CmdGetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CmdGetResponse::CopyFrom(const CmdGetResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.CmdGetResponse)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool CmdGetResponse::IsInitialized() const {

  return true;
}

void CmdGetResponse::Swap(CmdGetResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CmdGetResponse::InternalSwap(CmdGetResponse* other) {
  std::swap(error_, other->error_);
  value_.Swap(&other->value_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CmdGetResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CmdGetResponse_descriptor_;
  metadata.reflection = CmdGetResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CmdGetResponse

// optional .kvrpcpb.KeyError error = 1;
bool CmdGetResponse::has_error() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CmdGetResponse::set_has_error() {
  _has_bits_[0] |= 0x00000001u;
}
void CmdGetResponse::clear_has_error() {
  _has_bits_[0] &= ~0x00000001u;
}
void CmdGetResponse::clear_error() {
  if (error_ != NULL) error_->::kvrpcpb::KeyError::Clear();
  clear_has_error();
}
const ::kvrpcpb::KeyError& CmdGetResponse::error() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.CmdGetResponse.error)
  return error_ != NULL ? *error_
                         : *::kvrpcpb::KeyError::internal_default_instance();
}
::kvrpcpb::KeyError* CmdGetResponse::mutable_error() {
  set_has_error();
  if (error_ == NULL) {
    error_ = new ::kvrpcpb::KeyError;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.CmdGetResponse.error)
  return error_;
}
::kvrpcpb::KeyError* CmdGetResponse::release_error() {
  // @@protoc_insertion_point(field_release:kvrpcpb.CmdGetResponse.error)
  clear_has_error();
  ::kvrpcpb::KeyError* temp = error_;
  error_ = NULL;
  return temp;
}
void CmdGetResponse::set_allocated_error(::kvrpcpb::KeyError* error) {
  delete error_;
  error_ = error;
  if (error) {
    set_has_error();
  } else {
    clear_has_error();
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.CmdGetResponse.error)
}

// optional bytes value = 2;
bool CmdGetResponse::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CmdGetResponse::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
void CmdGetResponse::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
void CmdGetResponse::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}
const ::std::string& CmdGetResponse::value() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.CmdGetResponse.value)
  return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CmdGetResponse::set_value(const ::std::string& value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kvrpcpb.CmdGetResponse.value)
}
void CmdGetResponse::set_value(const char* value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kvrpcpb.CmdGetResponse.value)
}
void CmdGetResponse::set_value(const void* value, size_t size) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kvrpcpb.CmdGetResponse.value)
}
::std::string* CmdGetResponse::mutable_value() {
  set_has_value();
  // @@protoc_insertion_point(field_mutable:kvrpcpb.CmdGetResponse.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CmdGetResponse::release_value() {
  // @@protoc_insertion_point(field_release:kvrpcpb.CmdGetResponse.value)
  clear_has_value();
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CmdGetResponse::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    set_has_value();
  } else {
    clear_has_value();
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.CmdGetResponse.value)
}

inline const CmdGetResponse* CmdGetResponse::internal_default_instance() {
  return &CmdGetResponse_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CmdScanRequest::kStartKeyFieldNumber;
const int CmdScanRequest::kLimitFieldNumber;
const int CmdScanRequest::kVersionFieldNumber;
const int CmdScanRequest::kKeyOnlyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CmdScanRequest::CmdScanRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_kvrpcpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.CmdScanRequest)
}

void CmdScanRequest::InitAsDefaultInstance() {
}

CmdScanRequest::CmdScanRequest(const CmdScanRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.CmdScanRequest)
}

void CmdScanRequest::SharedCtor() {
  _cached_size_ = 0;
  start_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&version_, 0, reinterpret_cast<char*>(&key_only_) -
    reinterpret_cast<char*>(&version_) + sizeof(key_only_));
}

CmdScanRequest::~CmdScanRequest() {
  // @@protoc_insertion_point(destructor:kvrpcpb.CmdScanRequest)
  SharedDtor();
}

void CmdScanRequest::SharedDtor() {
  start_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CmdScanRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CmdScanRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CmdScanRequest_descriptor_;
}

const CmdScanRequest& CmdScanRequest::default_instance() {
  protobuf_InitDefaults_kvrpcpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<CmdScanRequest> CmdScanRequest_default_instance_;

CmdScanRequest* CmdScanRequest::New(::google::protobuf::Arena* arena) const {
  CmdScanRequest* n = new CmdScanRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CmdScanRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.CmdScanRequest)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(CmdScanRequest, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CmdScanRequest*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 15u) {
    ZR_(version_, key_only_);
    if (has_start_key()) {
      start_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CmdScanRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.CmdScanRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes start_key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_start_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_limit;
        break;
      }

      // optional uint32 limit = 2;
      case 2: {
        if (tag == 16) {
         parse_limit:
          set_has_limit();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &limit_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_version;
        break;
      }

      // optional uint64 version = 3;
      case 3: {
        if (tag == 24) {
         parse_version:
          set_has_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_key_only;
        break;
      }

      // optional bool key_only = 4;
      case 4: {
        if (tag == 32) {
         parse_key_only:
          set_has_key_only();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &key_only_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.CmdScanRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.CmdScanRequest)
  return false;
#undef DO_
}

void CmdScanRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.CmdScanRequest)
  // optional bytes start_key = 1;
  if (has_start_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->start_key(), output);
  }

  // optional uint32 limit = 2;
  if (has_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->limit(), output);
  }

  // optional uint64 version = 3;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->version(), output);
  }

  // optional bool key_only = 4;
  if (has_key_only()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->key_only(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kvrpcpb.CmdScanRequest)
}

::google::protobuf::uint8* CmdScanRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.CmdScanRequest)
  // optional bytes start_key = 1;
  if (has_start_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->start_key(), target);
  }

  // optional uint32 limit = 2;
  if (has_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->limit(), target);
  }

  // optional uint64 version = 3;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->version(), target);
  }

  // optional bool key_only = 4;
  if (has_key_only()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->key_only(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.CmdScanRequest)
  return target;
}

size_t CmdScanRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.CmdScanRequest)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 15u) {
    // optional bytes start_key = 1;
    if (has_start_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->start_key());
    }

    // optional uint32 limit = 2;
    if (has_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->limit());
    }

    // optional uint64 version = 3;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->version());
    }

    // optional bool key_only = 4;
    if (has_key_only()) {
      total_size += 1 + 1;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CmdScanRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.CmdScanRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CmdScanRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CmdScanRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.CmdScanRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.CmdScanRequest)
    UnsafeMergeFrom(*source);
  }
}

void CmdScanRequest::MergeFrom(const CmdScanRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.CmdScanRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void CmdScanRequest::UnsafeMergeFrom(const CmdScanRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_start_key()) {
      set_has_start_key();
      start_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.start_key_);
    }
    if (from.has_limit()) {
      set_limit(from.limit());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_key_only()) {
      set_key_only(from.key_only());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void CmdScanRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.CmdScanRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CmdScanRequest::CopyFrom(const CmdScanRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.CmdScanRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool CmdScanRequest::IsInitialized() const {

  return true;
}

void CmdScanRequest::Swap(CmdScanRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CmdScanRequest::InternalSwap(CmdScanRequest* other) {
  start_key_.Swap(&other->start_key_);
  std::swap(limit_, other->limit_);
  std::swap(version_, other->version_);
  std::swap(key_only_, other->key_only_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CmdScanRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CmdScanRequest_descriptor_;
  metadata.reflection = CmdScanRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CmdScanRequest

// optional bytes start_key = 1;
bool CmdScanRequest::has_start_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CmdScanRequest::set_has_start_key() {
  _has_bits_[0] |= 0x00000001u;
}
void CmdScanRequest::clear_has_start_key() {
  _has_bits_[0] &= ~0x00000001u;
}
void CmdScanRequest::clear_start_key() {
  start_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_start_key();
}
const ::std::string& CmdScanRequest::start_key() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.CmdScanRequest.start_key)
  return start_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CmdScanRequest::set_start_key(const ::std::string& value) {
  set_has_start_key();
  start_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kvrpcpb.CmdScanRequest.start_key)
}
void CmdScanRequest::set_start_key(const char* value) {
  set_has_start_key();
  start_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kvrpcpb.CmdScanRequest.start_key)
}
void CmdScanRequest::set_start_key(const void* value, size_t size) {
  set_has_start_key();
  start_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kvrpcpb.CmdScanRequest.start_key)
}
::std::string* CmdScanRequest::mutable_start_key() {
  set_has_start_key();
  // @@protoc_insertion_point(field_mutable:kvrpcpb.CmdScanRequest.start_key)
  return start_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CmdScanRequest::release_start_key() {
  // @@protoc_insertion_point(field_release:kvrpcpb.CmdScanRequest.start_key)
  clear_has_start_key();
  return start_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CmdScanRequest::set_allocated_start_key(::std::string* start_key) {
  if (start_key != NULL) {
    set_has_start_key();
  } else {
    clear_has_start_key();
  }
  start_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), start_key);
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.CmdScanRequest.start_key)
}

// optional uint32 limit = 2;
bool CmdScanRequest::has_limit() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CmdScanRequest::set_has_limit() {
  _has_bits_[0] |= 0x00000002u;
}
void CmdScanRequest::clear_has_limit() {
  _has_bits_[0] &= ~0x00000002u;
}
void CmdScanRequest::clear_limit() {
  limit_ = 0u;
  clear_has_limit();
}
::google::protobuf::uint32 CmdScanRequest::limit() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.CmdScanRequest.limit)
  return limit_;
}
void CmdScanRequest::set_limit(::google::protobuf::uint32 value) {
  set_has_limit();
  limit_ = value;
  // @@protoc_insertion_point(field_set:kvrpcpb.CmdScanRequest.limit)
}

// optional uint64 version = 3;
bool CmdScanRequest::has_version() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CmdScanRequest::set_has_version() {
  _has_bits_[0] |= 0x00000004u;
}
void CmdScanRequest::clear_has_version() {
  _has_bits_[0] &= ~0x00000004u;
}
void CmdScanRequest::clear_version() {
  version_ = GOOGLE_ULONGLONG(0);
  clear_has_version();
}
::google::protobuf::uint64 CmdScanRequest::version() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.CmdScanRequest.version)
  return version_;
}
void CmdScanRequest::set_version(::google::protobuf::uint64 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:kvrpcpb.CmdScanRequest.version)
}

// optional bool key_only = 4;
bool CmdScanRequest::has_key_only() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CmdScanRequest::set_has_key_only() {
  _has_bits_[0] |= 0x00000008u;
}
void CmdScanRequest::clear_has_key_only() {
  _has_bits_[0] &= ~0x00000008u;
}
void CmdScanRequest::clear_key_only() {
  key_only_ = false;
  clear_has_key_only();
}
bool CmdScanRequest::key_only() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.CmdScanRequest.key_only)
  return key_only_;
}
void CmdScanRequest::set_key_only(bool value) {
  set_has_key_only();
  key_only_ = value;
  // @@protoc_insertion_point(field_set:kvrpcpb.CmdScanRequest.key_only)
}

inline const CmdScanRequest* CmdScanRequest::internal_default_instance() {
  return &CmdScanRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KvPair::kErrorFieldNumber;
const int KvPair::kKeyFieldNumber;
const int KvPair::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KvPair::KvPair()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_kvrpcpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.KvPair)
}

void KvPair::InitAsDefaultInstance() {
  error_ = const_cast< ::kvrpcpb::KeyError*>(
      ::kvrpcpb::KeyError::internal_default_instance());
}

KvPair::KvPair(const KvPair& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.KvPair)
}

void KvPair::SharedCtor() {
  _cached_size_ = 0;
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  error_ = NULL;
}

KvPair::~KvPair() {
  // @@protoc_insertion_point(destructor:kvrpcpb.KvPair)
  SharedDtor();
}

void KvPair::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != &KvPair_default_instance_.get()) {
    delete error_;
  }
}

void KvPair::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KvPair::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KvPair_descriptor_;
}

const KvPair& KvPair::default_instance() {
  protobuf_InitDefaults_kvrpcpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<KvPair> KvPair_default_instance_;

KvPair* KvPair::New(::google::protobuf::Arena* arena) const {
  KvPair* n = new KvPair;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void KvPair::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.KvPair)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_error()) {
      if (error_ != NULL) error_->::kvrpcpb::KeyError::Clear();
    }
    if (has_key()) {
      key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_value()) {
      value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool KvPair::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.KvPair)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .kvrpcpb.KeyError error = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_key;
        break;
      }

      // optional bytes key = 2;
      case 2: {
        if (tag == 18) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_value;
        break;
      }

      // optional bytes value = 3;
      case 3: {
        if (tag == 26) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.KvPair)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.KvPair)
  return false;
#undef DO_
}

void KvPair::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.KvPair)
  // optional .kvrpcpb.KeyError error = 1;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->error_, output);
  }

  // optional bytes key = 2;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->key(), output);
  }

  // optional bytes value = 3;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kvrpcpb.KvPair)
}

::google::protobuf::uint8* KvPair::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.KvPair)
  // optional .kvrpcpb.KeyError error = 1;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->error_, false, target);
  }

  // optional bytes key = 2;
  if (has_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->key(), target);
  }

  // optional bytes value = 3;
  if (has_value()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.KvPair)
  return target;
}

size_t KvPair::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.KvPair)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional .kvrpcpb.KeyError error = 1;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->error_);
    }

    // optional bytes key = 2;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->key());
    }

    // optional bytes value = 3;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->value());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KvPair::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.KvPair)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const KvPair* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const KvPair>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.KvPair)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.KvPair)
    UnsafeMergeFrom(*source);
  }
}

void KvPair::MergeFrom(const KvPair& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.KvPair)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void KvPair::UnsafeMergeFrom(const KvPair& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      mutable_error()->::kvrpcpb::KeyError::MergeFrom(from.error());
    }
    if (from.has_key()) {
      set_has_key();
      key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
    }
    if (from.has_value()) {
      set_has_value();
      value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void KvPair::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.KvPair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KvPair::CopyFrom(const KvPair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.KvPair)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool KvPair::IsInitialized() const {

  return true;
}

void KvPair::Swap(KvPair* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KvPair::InternalSwap(KvPair* other) {
  std::swap(error_, other->error_);
  key_.Swap(&other->key_);
  value_.Swap(&other->value_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata KvPair::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KvPair_descriptor_;
  metadata.reflection = KvPair_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// KvPair

// optional .kvrpcpb.KeyError error = 1;
bool KvPair::has_error() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void KvPair::set_has_error() {
  _has_bits_[0] |= 0x00000001u;
}
void KvPair::clear_has_error() {
  _has_bits_[0] &= ~0x00000001u;
}
void KvPair::clear_error() {
  if (error_ != NULL) error_->::kvrpcpb::KeyError::Clear();
  clear_has_error();
}
const ::kvrpcpb::KeyError& KvPair::error() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.KvPair.error)
  return error_ != NULL ? *error_
                         : *::kvrpcpb::KeyError::internal_default_instance();
}
::kvrpcpb::KeyError* KvPair::mutable_error() {
  set_has_error();
  if (error_ == NULL) {
    error_ = new ::kvrpcpb::KeyError;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.KvPair.error)
  return error_;
}
::kvrpcpb::KeyError* KvPair::release_error() {
  // @@protoc_insertion_point(field_release:kvrpcpb.KvPair.error)
  clear_has_error();
  ::kvrpcpb::KeyError* temp = error_;
  error_ = NULL;
  return temp;
}
void KvPair::set_allocated_error(::kvrpcpb::KeyError* error) {
  delete error_;
  error_ = error;
  if (error) {
    set_has_error();
  } else {
    clear_has_error();
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.KvPair.error)
}

// optional bytes key = 2;
bool KvPair::has_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void KvPair::set_has_key() {
  _has_bits_[0] |= 0x00000002u;
}
void KvPair::clear_has_key() {
  _has_bits_[0] &= ~0x00000002u;
}
void KvPair::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
const ::std::string& KvPair::key() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.KvPair.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void KvPair::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kvrpcpb.KvPair.key)
}
void KvPair::set_key(const char* value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kvrpcpb.KvPair.key)
}
void KvPair::set_key(const void* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kvrpcpb.KvPair.key)
}
::std::string* KvPair::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:kvrpcpb.KvPair.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* KvPair::release_key() {
  // @@protoc_insertion_point(field_release:kvrpcpb.KvPair.key)
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void KvPair::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.KvPair.key)
}

// optional bytes value = 3;
bool KvPair::has_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void KvPair::set_has_value() {
  _has_bits_[0] |= 0x00000004u;
}
void KvPair::clear_has_value() {
  _has_bits_[0] &= ~0x00000004u;
}
void KvPair::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}
const ::std::string& KvPair::value() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.KvPair.value)
  return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void KvPair::set_value(const ::std::string& value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kvrpcpb.KvPair.value)
}
void KvPair::set_value(const char* value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kvrpcpb.KvPair.value)
}
void KvPair::set_value(const void* value, size_t size) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kvrpcpb.KvPair.value)
}
::std::string* KvPair::mutable_value() {
  set_has_value();
  // @@protoc_insertion_point(field_mutable:kvrpcpb.KvPair.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* KvPair::release_value() {
  // @@protoc_insertion_point(field_release:kvrpcpb.KvPair.value)
  clear_has_value();
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void KvPair::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    set_has_value();
  } else {
    clear_has_value();
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.KvPair.value)
}

inline const KvPair* KvPair::internal_default_instance() {
  return &KvPair_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CmdScanResponse::kPairsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CmdScanResponse::CmdScanResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_kvrpcpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.CmdScanResponse)
}

void CmdScanResponse::InitAsDefaultInstance() {
}

CmdScanResponse::CmdScanResponse(const CmdScanResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.CmdScanResponse)
}

void CmdScanResponse::SharedCtor() {
  _cached_size_ = 0;
}

CmdScanResponse::~CmdScanResponse() {
  // @@protoc_insertion_point(destructor:kvrpcpb.CmdScanResponse)
  SharedDtor();
}

void CmdScanResponse::SharedDtor() {
}

void CmdScanResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CmdScanResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CmdScanResponse_descriptor_;
}

const CmdScanResponse& CmdScanResponse::default_instance() {
  protobuf_InitDefaults_kvrpcpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<CmdScanResponse> CmdScanResponse_default_instance_;

CmdScanResponse* CmdScanResponse::New(::google::protobuf::Arena* arena) const {
  CmdScanResponse* n = new CmdScanResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CmdScanResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.CmdScanResponse)
  pairs_.Clear();
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CmdScanResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.CmdScanResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .kvrpcpb.KvPair pairs = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_pairs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_pairs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_pairs;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.CmdScanResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.CmdScanResponse)
  return false;
#undef DO_
}

void CmdScanResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.CmdScanResponse)
  // repeated .kvrpcpb.KvPair pairs = 1;
  for (unsigned int i = 0, n = this->pairs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pairs(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kvrpcpb.CmdScanResponse)
}

::google::protobuf::uint8* CmdScanResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.CmdScanResponse)
  // repeated .kvrpcpb.KvPair pairs = 1;
  for (unsigned int i = 0, n = this->pairs_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->pairs(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.CmdScanResponse)
  return target;
}

size_t CmdScanResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.CmdScanResponse)
  size_t total_size = 0;

  // repeated .kvrpcpb.KvPair pairs = 1;
  {
    unsigned int count = this->pairs_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pairs(i));
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CmdScanResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.CmdScanResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CmdScanResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CmdScanResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.CmdScanResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.CmdScanResponse)
    UnsafeMergeFrom(*source);
  }
}

void CmdScanResponse::MergeFrom(const CmdScanResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.CmdScanResponse)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void CmdScanResponse::UnsafeMergeFrom(const CmdScanResponse& from) {
  GOOGLE_DCHECK(&from != this);
  pairs_.MergeFrom(from.pairs_);
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void CmdScanResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.CmdScanResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CmdScanResponse::CopyFrom(const CmdScanResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.CmdScanResponse)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool CmdScanResponse::IsInitialized() const {

  return true;
}

void CmdScanResponse::Swap(CmdScanResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CmdScanResponse::InternalSwap(CmdScanResponse* other) {
  pairs_.UnsafeArenaSwap(&other->pairs_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CmdScanResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CmdScanResponse_descriptor_;
  metadata.reflection = CmdScanResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CmdScanResponse

// repeated .kvrpcpb.KvPair pairs = 1;
int CmdScanResponse::pairs_size() const {
  return pairs_.size();
}
void CmdScanResponse::clear_pairs() {
  pairs_.Clear();
}
const ::kvrpcpb::KvPair& CmdScanResponse::pairs(int index) const {
  // @@protoc_insertion_point(field_get:kvrpcpb.CmdScanResponse.pairs)
  return pairs_.Get(index);
}
::kvrpcpb::KvPair* CmdScanResponse::mutable_pairs(int index) {
  // @@protoc_insertion_point(field_mutable:kvrpcpb.CmdScanResponse.pairs)
  return pairs_.Mutable(index);
}
::kvrpcpb::KvPair* CmdScanResponse::add_pairs() {
  // @@protoc_insertion_point(field_add:kvrpcpb.CmdScanResponse.pairs)
  return pairs_.Add();
}
::google::protobuf::RepeatedPtrField< ::kvrpcpb::KvPair >*
CmdScanResponse::mutable_pairs() {
  // @@protoc_insertion_point(field_mutable_list:kvrpcpb.CmdScanResponse.pairs)
  return &pairs_;
}
const ::google::protobuf::RepeatedPtrField< ::kvrpcpb::KvPair >&
CmdScanResponse::pairs() const {
  // @@protoc_insertion_point(field_list:kvrpcpb.CmdScanResponse.pairs)
  return pairs_;
}

inline const CmdScanResponse* CmdScanResponse::internal_default_instance() {
  return &CmdScanResponse_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Mutation::kOpFieldNumber;
const int Mutation::kKeyFieldNumber;
const int Mutation::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Mutation::Mutation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_kvrpcpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.Mutation)
}

void Mutation::InitAsDefaultInstance() {
}

Mutation::Mutation(const Mutation& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.Mutation)
}

void Mutation::SharedCtor() {
  _cached_size_ = 0;
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  op_ = 0;
}

Mutation::~Mutation() {
  // @@protoc_insertion_point(destructor:kvrpcpb.Mutation)
  SharedDtor();
}

void Mutation::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Mutation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Mutation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Mutation_descriptor_;
}

const Mutation& Mutation::default_instance() {
  protobuf_InitDefaults_kvrpcpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Mutation> Mutation_default_instance_;

Mutation* Mutation::New(::google::protobuf::Arena* arena) const {
  Mutation* n = new Mutation;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Mutation::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.Mutation)
  if (_has_bits_[0 / 32] & 7u) {
    op_ = 0;
    if (has_key()) {
      key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_value()) {
      value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Mutation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.Mutation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .kvrpcpb.Op op = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::kvrpcpb::Op_IsValid(value)) {
            set_op(static_cast< ::kvrpcpb::Op >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_key;
        break;
      }

      // optional bytes key = 2;
      case 2: {
        if (tag == 18) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_value;
        break;
      }

      // optional bytes value = 3;
      case 3: {
        if (tag == 26) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.Mutation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.Mutation)
  return false;
#undef DO_
}

void Mutation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.Mutation)
  // optional .kvrpcpb.Op op = 1;
  if (has_op()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->op(), output);
  }

  // optional bytes key = 2;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->key(), output);
  }

  // optional bytes value = 3;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kvrpcpb.Mutation)
}

::google::protobuf::uint8* Mutation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.Mutation)
  // optional .kvrpcpb.Op op = 1;
  if (has_op()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->op(), target);
  }

  // optional bytes key = 2;
  if (has_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->key(), target);
  }

  // optional bytes value = 3;
  if (has_value()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.Mutation)
  return target;
}

size_t Mutation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.Mutation)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional .kvrpcpb.Op op = 1;
    if (has_op()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->op());
    }

    // optional bytes key = 2;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->key());
    }

    // optional bytes value = 3;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->value());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Mutation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.Mutation)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Mutation* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Mutation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.Mutation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.Mutation)
    UnsafeMergeFrom(*source);
  }
}

void Mutation::MergeFrom(const Mutation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.Mutation)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Mutation::UnsafeMergeFrom(const Mutation& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_op()) {
      set_op(from.op());
    }
    if (from.has_key()) {
      set_has_key();
      key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
    }
    if (from.has_value()) {
      set_has_value();
      value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void Mutation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.Mutation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Mutation::CopyFrom(const Mutation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.Mutation)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Mutation::IsInitialized() const {

  return true;
}

void Mutation::Swap(Mutation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Mutation::InternalSwap(Mutation* other) {
  std::swap(op_, other->op_);
  key_.Swap(&other->key_);
  value_.Swap(&other->value_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Mutation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Mutation_descriptor_;
  metadata.reflection = Mutation_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Mutation

// optional .kvrpcpb.Op op = 1;
bool Mutation::has_op() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Mutation::set_has_op() {
  _has_bits_[0] |= 0x00000001u;
}
void Mutation::clear_has_op() {
  _has_bits_[0] &= ~0x00000001u;
}
void Mutation::clear_op() {
  op_ = 0;
  clear_has_op();
}
::kvrpcpb::Op Mutation::op() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.Mutation.op)
  return static_cast< ::kvrpcpb::Op >(op_);
}
void Mutation::set_op(::kvrpcpb::Op value) {
  assert(::kvrpcpb::Op_IsValid(value));
  set_has_op();
  op_ = value;
  // @@protoc_insertion_point(field_set:kvrpcpb.Mutation.op)
}

// optional bytes key = 2;
bool Mutation::has_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Mutation::set_has_key() {
  _has_bits_[0] |= 0x00000002u;
}
void Mutation::clear_has_key() {
  _has_bits_[0] &= ~0x00000002u;
}
void Mutation::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
const ::std::string& Mutation::key() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.Mutation.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Mutation::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kvrpcpb.Mutation.key)
}
void Mutation::set_key(const char* value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kvrpcpb.Mutation.key)
}
void Mutation::set_key(const void* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kvrpcpb.Mutation.key)
}
::std::string* Mutation::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:kvrpcpb.Mutation.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Mutation::release_key() {
  // @@protoc_insertion_point(field_release:kvrpcpb.Mutation.key)
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Mutation::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.Mutation.key)
}

// optional bytes value = 3;
bool Mutation::has_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Mutation::set_has_value() {
  _has_bits_[0] |= 0x00000004u;
}
void Mutation::clear_has_value() {
  _has_bits_[0] &= ~0x00000004u;
}
void Mutation::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}
const ::std::string& Mutation::value() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.Mutation.value)
  return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Mutation::set_value(const ::std::string& value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kvrpcpb.Mutation.value)
}
void Mutation::set_value(const char* value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kvrpcpb.Mutation.value)
}
void Mutation::set_value(const void* value, size_t size) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kvrpcpb.Mutation.value)
}
::std::string* Mutation::mutable_value() {
  set_has_value();
  // @@protoc_insertion_point(field_mutable:kvrpcpb.Mutation.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Mutation::release_value() {
  // @@protoc_insertion_point(field_release:kvrpcpb.Mutation.value)
  clear_has_value();
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Mutation::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    set_has_value();
  } else {
    clear_has_value();
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.Mutation.value)
}

inline const Mutation* Mutation::internal_default_instance() {
  return &Mutation_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CmdPrewriteRequest::kMutationsFieldNumber;
const int CmdPrewriteRequest::kPrimaryLockFieldNumber;
const int CmdPrewriteRequest::kStartVersionFieldNumber;
const int CmdPrewriteRequest::kLockTtlFieldNumber;
const int CmdPrewriteRequest::kSkipConstraintCheckFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CmdPrewriteRequest::CmdPrewriteRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_kvrpcpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.CmdPrewriteRequest)
}

void CmdPrewriteRequest::InitAsDefaultInstance() {
}

CmdPrewriteRequest::CmdPrewriteRequest(const CmdPrewriteRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.CmdPrewriteRequest)
}

void CmdPrewriteRequest::SharedCtor() {
  _cached_size_ = 0;
  primary_lock_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&start_version_, 0, reinterpret_cast<char*>(&skip_constraint_check_) -
    reinterpret_cast<char*>(&start_version_) + sizeof(skip_constraint_check_));
}

CmdPrewriteRequest::~CmdPrewriteRequest() {
  // @@protoc_insertion_point(destructor:kvrpcpb.CmdPrewriteRequest)
  SharedDtor();
}

void CmdPrewriteRequest::SharedDtor() {
  primary_lock_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CmdPrewriteRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CmdPrewriteRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CmdPrewriteRequest_descriptor_;
}

const CmdPrewriteRequest& CmdPrewriteRequest::default_instance() {
  protobuf_InitDefaults_kvrpcpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<CmdPrewriteRequest> CmdPrewriteRequest_default_instance_;

CmdPrewriteRequest* CmdPrewriteRequest::New(::google::protobuf::Arena* arena) const {
  CmdPrewriteRequest* n = new CmdPrewriteRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CmdPrewriteRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.CmdPrewriteRequest)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(CmdPrewriteRequest, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CmdPrewriteRequest*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 30u) {
    ZR_(start_version_, skip_constraint_check_);
    if (has_primary_lock()) {
      primary_lock_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  mutations_.Clear();
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CmdPrewriteRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.CmdPrewriteRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .kvrpcpb.Mutation mutations = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_mutations:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_mutations()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_mutations;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(18)) goto parse_primary_lock;
        break;
      }

      // optional bytes primary_lock = 2;
      case 2: {
        if (tag == 18) {
         parse_primary_lock:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_primary_lock()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_start_version;
        break;
      }

      // optional uint64 start_version = 3;
      case 3: {
        if (tag == 24) {
         parse_start_version:
          set_has_start_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &start_version_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_lock_ttl;
        break;
      }

      // optional uint64 lock_ttl = 4;
      case 4: {
        if (tag == 32) {
         parse_lock_ttl:
          set_has_lock_ttl();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lock_ttl_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_skip_constraint_check;
        break;
      }

      // optional bool skip_constraint_check = 5;
      case 5: {
        if (tag == 40) {
         parse_skip_constraint_check:
          set_has_skip_constraint_check();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &skip_constraint_check_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.CmdPrewriteRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.CmdPrewriteRequest)
  return false;
#undef DO_
}

void CmdPrewriteRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.CmdPrewriteRequest)
  // repeated .kvrpcpb.Mutation mutations = 1;
  for (unsigned int i = 0, n = this->mutations_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->mutations(i), output);
  }

  // optional bytes primary_lock = 2;
  if (has_primary_lock()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->primary_lock(), output);
  }

  // optional uint64 start_version = 3;
  if (has_start_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->start_version(), output);
  }

  // optional uint64 lock_ttl = 4;
  if (has_lock_ttl()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->lock_ttl(), output);
  }

  // optional bool skip_constraint_check = 5;
  if (has_skip_constraint_check()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->skip_constraint_check(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kvrpcpb.CmdPrewriteRequest)
}

::google::protobuf::uint8* CmdPrewriteRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.CmdPrewriteRequest)
  // repeated .kvrpcpb.Mutation mutations = 1;
  for (unsigned int i = 0, n = this->mutations_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->mutations(i), false, target);
  }

  // optional bytes primary_lock = 2;
  if (has_primary_lock()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->primary_lock(), target);
  }

  // optional uint64 start_version = 3;
  if (has_start_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->start_version(), target);
  }

  // optional uint64 lock_ttl = 4;
  if (has_lock_ttl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->lock_ttl(), target);
  }

  // optional bool skip_constraint_check = 5;
  if (has_skip_constraint_check()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->skip_constraint_check(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.CmdPrewriteRequest)
  return target;
}

size_t CmdPrewriteRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.CmdPrewriteRequest)
  size_t total_size = 0;

  if (_has_bits_[1 / 32] & 30u) {
    // optional bytes primary_lock = 2;
    if (has_primary_lock()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->primary_lock());
    }

    // optional uint64 start_version = 3;
    if (has_start_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->start_version());
    }

    // optional uint64 lock_ttl = 4;
    if (has_lock_ttl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->lock_ttl());
    }

    // optional bool skip_constraint_check = 5;
    if (has_skip_constraint_check()) {
      total_size += 1 + 1;
    }

  }
  // repeated .kvrpcpb.Mutation mutations = 1;
  {
    unsigned int count = this->mutations_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mutations(i));
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CmdPrewriteRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.CmdPrewriteRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CmdPrewriteRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CmdPrewriteRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.CmdPrewriteRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.CmdPrewriteRequest)
    UnsafeMergeFrom(*source);
  }
}

void CmdPrewriteRequest::MergeFrom(const CmdPrewriteRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.CmdPrewriteRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void CmdPrewriteRequest::UnsafeMergeFrom(const CmdPrewriteRequest& from) {
  GOOGLE_DCHECK(&from != this);
  mutations_.MergeFrom(from.mutations_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_primary_lock()) {
      set_has_primary_lock();
      primary_lock_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.primary_lock_);
    }
    if (from.has_start_version()) {
      set_start_version(from.start_version());
    }
    if (from.has_lock_ttl()) {
      set_lock_ttl(from.lock_ttl());
    }
    if (from.has_skip_constraint_check()) {
      set_skip_constraint_check(from.skip_constraint_check());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void CmdPrewriteRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.CmdPrewriteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CmdPrewriteRequest::CopyFrom(const CmdPrewriteRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.CmdPrewriteRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool CmdPrewriteRequest::IsInitialized() const {

  return true;
}

void CmdPrewriteRequest::Swap(CmdPrewriteRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CmdPrewriteRequest::InternalSwap(CmdPrewriteRequest* other) {
  mutations_.UnsafeArenaSwap(&other->mutations_);
  primary_lock_.Swap(&other->primary_lock_);
  std::swap(start_version_, other->start_version_);
  std::swap(lock_ttl_, other->lock_ttl_);
  std::swap(skip_constraint_check_, other->skip_constraint_check_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CmdPrewriteRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CmdPrewriteRequest_descriptor_;
  metadata.reflection = CmdPrewriteRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CmdPrewriteRequest

// repeated .kvrpcpb.Mutation mutations = 1;
int CmdPrewriteRequest::mutations_size() const {
  return mutations_.size();
}
void CmdPrewriteRequest::clear_mutations() {
  mutations_.Clear();
}
const ::kvrpcpb::Mutation& CmdPrewriteRequest::mutations(int index) const {
  // @@protoc_insertion_point(field_get:kvrpcpb.CmdPrewriteRequest.mutations)
  return mutations_.Get(index);
}
::kvrpcpb::Mutation* CmdPrewriteRequest::mutable_mutations(int index) {
  // @@protoc_insertion_point(field_mutable:kvrpcpb.CmdPrewriteRequest.mutations)
  return mutations_.Mutable(index);
}
::kvrpcpb::Mutation* CmdPrewriteRequest::add_mutations() {
  // @@protoc_insertion_point(field_add:kvrpcpb.CmdPrewriteRequest.mutations)
  return mutations_.Add();
}
::google::protobuf::RepeatedPtrField< ::kvrpcpb::Mutation >*
CmdPrewriteRequest::mutable_mutations() {
  // @@protoc_insertion_point(field_mutable_list:kvrpcpb.CmdPrewriteRequest.mutations)
  return &mutations_;
}
const ::google::protobuf::RepeatedPtrField< ::kvrpcpb::Mutation >&
CmdPrewriteRequest::mutations() const {
  // @@protoc_insertion_point(field_list:kvrpcpb.CmdPrewriteRequest.mutations)
  return mutations_;
}

// optional bytes primary_lock = 2;
bool CmdPrewriteRequest::has_primary_lock() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CmdPrewriteRequest::set_has_primary_lock() {
  _has_bits_[0] |= 0x00000002u;
}
void CmdPrewriteRequest::clear_has_primary_lock() {
  _has_bits_[0] &= ~0x00000002u;
}
void CmdPrewriteRequest::clear_primary_lock() {
  primary_lock_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_primary_lock();
}
const ::std::string& CmdPrewriteRequest::primary_lock() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.CmdPrewriteRequest.primary_lock)
  return primary_lock_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CmdPrewriteRequest::set_primary_lock(const ::std::string& value) {
  set_has_primary_lock();
  primary_lock_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kvrpcpb.CmdPrewriteRequest.primary_lock)
}
void CmdPrewriteRequest::set_primary_lock(const char* value) {
  set_has_primary_lock();
  primary_lock_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kvrpcpb.CmdPrewriteRequest.primary_lock)
}
void CmdPrewriteRequest::set_primary_lock(const void* value, size_t size) {
  set_has_primary_lock();
  primary_lock_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kvrpcpb.CmdPrewriteRequest.primary_lock)
}
::std::string* CmdPrewriteRequest::mutable_primary_lock() {
  set_has_primary_lock();
  // @@protoc_insertion_point(field_mutable:kvrpcpb.CmdPrewriteRequest.primary_lock)
  return primary_lock_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CmdPrewriteRequest::release_primary_lock() {
  // @@protoc_insertion_point(field_release:kvrpcpb.CmdPrewriteRequest.primary_lock)
  clear_has_primary_lock();
  return primary_lock_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CmdPrewriteRequest::set_allocated_primary_lock(::std::string* primary_lock) {
  if (primary_lock != NULL) {
    set_has_primary_lock();
  } else {
    clear_has_primary_lock();
  }
  primary_lock_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), primary_lock);
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.CmdPrewriteRequest.primary_lock)
}

// optional uint64 start_version = 3;
bool CmdPrewriteRequest::has_start_version() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CmdPrewriteRequest::set_has_start_version() {
  _has_bits_[0] |= 0x00000004u;
}
void CmdPrewriteRequest::clear_has_start_version() {
  _has_bits_[0] &= ~0x00000004u;
}
void CmdPrewriteRequest::clear_start_version() {
  start_version_ = GOOGLE_ULONGLONG(0);
  clear_has_start_version();
}
::google::protobuf::uint64 CmdPrewriteRequest::start_version() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.CmdPrewriteRequest.start_version)
  return start_version_;
}
void CmdPrewriteRequest::set_start_version(::google::protobuf::uint64 value) {
  set_has_start_version();
  start_version_ = value;
  // @@protoc_insertion_point(field_set:kvrpcpb.CmdPrewriteRequest.start_version)
}

// optional uint64 lock_ttl = 4;
bool CmdPrewriteRequest::has_lock_ttl() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CmdPrewriteRequest::set_has_lock_ttl() {
  _has_bits_[0] |= 0x00000008u;
}
void CmdPrewriteRequest::clear_has_lock_ttl() {
  _has_bits_[0] &= ~0x00000008u;
}
void CmdPrewriteRequest::clear_lock_ttl() {
  lock_ttl_ = GOOGLE_ULONGLONG(0);
  clear_has_lock_ttl();
}
::google::protobuf::uint64 CmdPrewriteRequest::lock_ttl() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.CmdPrewriteRequest.lock_ttl)
  return lock_ttl_;
}
void CmdPrewriteRequest::set_lock_ttl(::google::protobuf::uint64 value) {
  set_has_lock_ttl();
  lock_ttl_ = value;
  // @@protoc_insertion_point(field_set:kvrpcpb.CmdPrewriteRequest.lock_ttl)
}

// optional bool skip_constraint_check = 5;
bool CmdPrewriteRequest::has_skip_constraint_check() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CmdPrewriteRequest::set_has_skip_constraint_check() {
  _has_bits_[0] |= 0x00000010u;
}
void CmdPrewriteRequest::clear_has_skip_constraint_check() {
  _has_bits_[0] &= ~0x00000010u;
}
void CmdPrewriteRequest::clear_skip_constraint_check() {
  skip_constraint_check_ = false;
  clear_has_skip_constraint_check();
}
bool CmdPrewriteRequest::skip_constraint_check() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.CmdPrewriteRequest.skip_constraint_check)
  return skip_constraint_check_;
}
void CmdPrewriteRequest::set_skip_constraint_check(bool value) {
  set_has_skip_constraint_check();
  skip_constraint_check_ = value;
  // @@protoc_insertion_point(field_set:kvrpcpb.CmdPrewriteRequest.skip_constraint_check)
}

inline const CmdPrewriteRequest* CmdPrewriteRequest::internal_default_instance() {
  return &CmdPrewriteRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CmdPrewriteResponse::kErrorsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CmdPrewriteResponse::CmdPrewriteResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_kvrpcpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.CmdPrewriteResponse)
}

void CmdPrewriteResponse::InitAsDefaultInstance() {
}

CmdPrewriteResponse::CmdPrewriteResponse(const CmdPrewriteResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.CmdPrewriteResponse)
}

void CmdPrewriteResponse::SharedCtor() {
  _cached_size_ = 0;
}

CmdPrewriteResponse::~CmdPrewriteResponse() {
  // @@protoc_insertion_point(destructor:kvrpcpb.CmdPrewriteResponse)
  SharedDtor();
}

void CmdPrewriteResponse::SharedDtor() {
}

void CmdPrewriteResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CmdPrewriteResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CmdPrewriteResponse_descriptor_;
}

const CmdPrewriteResponse& CmdPrewriteResponse::default_instance() {
  protobuf_InitDefaults_kvrpcpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<CmdPrewriteResponse> CmdPrewriteResponse_default_instance_;

CmdPrewriteResponse* CmdPrewriteResponse::New(::google::protobuf::Arena* arena) const {
  CmdPrewriteResponse* n = new CmdPrewriteResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CmdPrewriteResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.CmdPrewriteResponse)
  errors_.Clear();
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CmdPrewriteResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.CmdPrewriteResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .kvrpcpb.KeyError errors = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_errors:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_errors()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_errors;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.CmdPrewriteResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.CmdPrewriteResponse)
  return false;
#undef DO_
}

void CmdPrewriteResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.CmdPrewriteResponse)
  // repeated .kvrpcpb.KeyError errors = 1;
  for (unsigned int i = 0, n = this->errors_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->errors(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kvrpcpb.CmdPrewriteResponse)
}

::google::protobuf::uint8* CmdPrewriteResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.CmdPrewriteResponse)
  // repeated .kvrpcpb.KeyError errors = 1;
  for (unsigned int i = 0, n = this->errors_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->errors(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.CmdPrewriteResponse)
  return target;
}

size_t CmdPrewriteResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.CmdPrewriteResponse)
  size_t total_size = 0;

  // repeated .kvrpcpb.KeyError errors = 1;
  {
    unsigned int count = this->errors_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->errors(i));
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CmdPrewriteResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.CmdPrewriteResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CmdPrewriteResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CmdPrewriteResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.CmdPrewriteResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.CmdPrewriteResponse)
    UnsafeMergeFrom(*source);
  }
}

void CmdPrewriteResponse::MergeFrom(const CmdPrewriteResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.CmdPrewriteResponse)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void CmdPrewriteResponse::UnsafeMergeFrom(const CmdPrewriteResponse& from) {
  GOOGLE_DCHECK(&from != this);
  errors_.MergeFrom(from.errors_);
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void CmdPrewriteResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.CmdPrewriteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CmdPrewriteResponse::CopyFrom(const CmdPrewriteResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.CmdPrewriteResponse)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool CmdPrewriteResponse::IsInitialized() const {

  return true;
}

void CmdPrewriteResponse::Swap(CmdPrewriteResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CmdPrewriteResponse::InternalSwap(CmdPrewriteResponse* other) {
  errors_.UnsafeArenaSwap(&other->errors_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CmdPrewriteResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CmdPrewriteResponse_descriptor_;
  metadata.reflection = CmdPrewriteResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CmdPrewriteResponse

// repeated .kvrpcpb.KeyError errors = 1;
int CmdPrewriteResponse::errors_size() const {
  return errors_.size();
}
void CmdPrewriteResponse::clear_errors() {
  errors_.Clear();
}
const ::kvrpcpb::KeyError& CmdPrewriteResponse::errors(int index) const {
  // @@protoc_insertion_point(field_get:kvrpcpb.CmdPrewriteResponse.errors)
  return errors_.Get(index);
}
::kvrpcpb::KeyError* CmdPrewriteResponse::mutable_errors(int index) {
  // @@protoc_insertion_point(field_mutable:kvrpcpb.CmdPrewriteResponse.errors)
  return errors_.Mutable(index);
}
::kvrpcpb::KeyError* CmdPrewriteResponse::add_errors() {
  // @@protoc_insertion_point(field_add:kvrpcpb.CmdPrewriteResponse.errors)
  return errors_.Add();
}
::google::protobuf::RepeatedPtrField< ::kvrpcpb::KeyError >*
CmdPrewriteResponse::mutable_errors() {
  // @@protoc_insertion_point(field_mutable_list:kvrpcpb.CmdPrewriteResponse.errors)
  return &errors_;
}
const ::google::protobuf::RepeatedPtrField< ::kvrpcpb::KeyError >&
CmdPrewriteResponse::errors() const {
  // @@protoc_insertion_point(field_list:kvrpcpb.CmdPrewriteResponse.errors)
  return errors_;
}

inline const CmdPrewriteResponse* CmdPrewriteResponse::internal_default_instance() {
  return &CmdPrewriteResponse_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CmdCommitRequest::kStartVersionFieldNumber;
const int CmdCommitRequest::kKeysFieldNumber;
const int CmdCommitRequest::kCommitVersionFieldNumber;
const int CmdCommitRequest::kBinlogFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CmdCommitRequest::CmdCommitRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_kvrpcpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.CmdCommitRequest)
}

void CmdCommitRequest::InitAsDefaultInstance() {
}

CmdCommitRequest::CmdCommitRequest(const CmdCommitRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.CmdCommitRequest)
}

void CmdCommitRequest::SharedCtor() {
  _cached_size_ = 0;
  binlog_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&start_version_, 0, reinterpret_cast<char*>(&commit_version_) -
    reinterpret_cast<char*>(&start_version_) + sizeof(commit_version_));
}

CmdCommitRequest::~CmdCommitRequest() {
  // @@protoc_insertion_point(destructor:kvrpcpb.CmdCommitRequest)
  SharedDtor();
}

void CmdCommitRequest::SharedDtor() {
  binlog_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CmdCommitRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CmdCommitRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CmdCommitRequest_descriptor_;
}

const CmdCommitRequest& CmdCommitRequest::default_instance() {
  protobuf_InitDefaults_kvrpcpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<CmdCommitRequest> CmdCommitRequest_default_instance_;

CmdCommitRequest* CmdCommitRequest::New(::google::protobuf::Arena* arena) const {
  CmdCommitRequest* n = new CmdCommitRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CmdCommitRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.CmdCommitRequest)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(CmdCommitRequest, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CmdCommitRequest*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 13u) {
    ZR_(start_version_, commit_version_);
    if (has_binlog()) {
      binlog_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  keys_.Clear();
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CmdCommitRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.CmdCommitRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 start_version = 1;
      case 1: {
        if (tag == 8) {
          set_has_start_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &start_version_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_keys;
        break;
      }

      // repeated bytes keys = 2;
      case 2: {
        if (tag == 18) {
         parse_keys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_keys()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_keys;
        if (input->ExpectTag(24)) goto parse_commit_version;
        break;
      }

      // optional uint64 commit_version = 3;
      case 3: {
        if (tag == 24) {
         parse_commit_version:
          set_has_commit_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &commit_version_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_binlog;
        break;
      }

      // optional bytes binlog = 4;
      case 4: {
        if (tag == 34) {
         parse_binlog:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_binlog()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.CmdCommitRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.CmdCommitRequest)
  return false;
#undef DO_
}

void CmdCommitRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.CmdCommitRequest)
  // optional uint64 start_version = 1;
  if (has_start_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->start_version(), output);
  }

  // repeated bytes keys = 2;
  for (int i = 0; i < this->keys_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->keys(i), output);
  }

  // optional uint64 commit_version = 3;
  if (has_commit_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->commit_version(), output);
  }

  // optional bytes binlog = 4;
  if (has_binlog()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->binlog(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kvrpcpb.CmdCommitRequest)
}

::google::protobuf::uint8* CmdCommitRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.CmdCommitRequest)
  // optional uint64 start_version = 1;
  if (has_start_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->start_version(), target);
  }

  // repeated bytes keys = 2;
  for (int i = 0; i < this->keys_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(2, this->keys(i), target);
  }

  // optional uint64 commit_version = 3;
  if (has_commit_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->commit_version(), target);
  }

  // optional bytes binlog = 4;
  if (has_binlog()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->binlog(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.CmdCommitRequest)
  return target;
}

size_t CmdCommitRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.CmdCommitRequest)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 13u) {
    // optional uint64 start_version = 1;
    if (has_start_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->start_version());
    }

    // optional uint64 commit_version = 3;
    if (has_commit_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->commit_version());
    }

    // optional bytes binlog = 4;
    if (has_binlog()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->binlog());
    }

  }
  // repeated bytes keys = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->keys_size());
  for (int i = 0; i < this->keys_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->keys(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CmdCommitRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.CmdCommitRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CmdCommitRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CmdCommitRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.CmdCommitRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.CmdCommitRequest)
    UnsafeMergeFrom(*source);
  }
}

void CmdCommitRequest::MergeFrom(const CmdCommitRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.CmdCommitRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void CmdCommitRequest::UnsafeMergeFrom(const CmdCommitRequest& from) {
  GOOGLE_DCHECK(&from != this);
  keys_.UnsafeMergeFrom(from.keys_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_start_version()) {
      set_start_version(from.start_version());
    }
    if (from.has_commit_version()) {
      set_commit_version(from.commit_version());
    }
    if (from.has_binlog()) {
      set_has_binlog();
      binlog_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.binlog_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void CmdCommitRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.CmdCommitRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CmdCommitRequest::CopyFrom(const CmdCommitRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.CmdCommitRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool CmdCommitRequest::IsInitialized() const {

  return true;
}

void CmdCommitRequest::Swap(CmdCommitRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CmdCommitRequest::InternalSwap(CmdCommitRequest* other) {
  std::swap(start_version_, other->start_version_);
  keys_.UnsafeArenaSwap(&other->keys_);
  std::swap(commit_version_, other->commit_version_);
  binlog_.Swap(&other->binlog_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CmdCommitRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CmdCommitRequest_descriptor_;
  metadata.reflection = CmdCommitRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CmdCommitRequest

// optional uint64 start_version = 1;
bool CmdCommitRequest::has_start_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CmdCommitRequest::set_has_start_version() {
  _has_bits_[0] |= 0x00000001u;
}
void CmdCommitRequest::clear_has_start_version() {
  _has_bits_[0] &= ~0x00000001u;
}
void CmdCommitRequest::clear_start_version() {
  start_version_ = GOOGLE_ULONGLONG(0);
  clear_has_start_version();
}
::google::protobuf::uint64 CmdCommitRequest::start_version() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.CmdCommitRequest.start_version)
  return start_version_;
}
void CmdCommitRequest::set_start_version(::google::protobuf::uint64 value) {
  set_has_start_version();
  start_version_ = value;
  // @@protoc_insertion_point(field_set:kvrpcpb.CmdCommitRequest.start_version)
}

// repeated bytes keys = 2;
int CmdCommitRequest::keys_size() const {
  return keys_.size();
}
void CmdCommitRequest::clear_keys() {
  keys_.Clear();
}
const ::std::string& CmdCommitRequest::keys(int index) const {
  // @@protoc_insertion_point(field_get:kvrpcpb.CmdCommitRequest.keys)
  return keys_.Get(index);
}
::std::string* CmdCommitRequest::mutable_keys(int index) {
  // @@protoc_insertion_point(field_mutable:kvrpcpb.CmdCommitRequest.keys)
  return keys_.Mutable(index);
}
void CmdCommitRequest::set_keys(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:kvrpcpb.CmdCommitRequest.keys)
  keys_.Mutable(index)->assign(value);
}
void CmdCommitRequest::set_keys(int index, const char* value) {
  keys_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:kvrpcpb.CmdCommitRequest.keys)
}
void CmdCommitRequest::set_keys(int index, const void* value, size_t size) {
  keys_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:kvrpcpb.CmdCommitRequest.keys)
}
::std::string* CmdCommitRequest::add_keys() {
  // @@protoc_insertion_point(field_add_mutable:kvrpcpb.CmdCommitRequest.keys)
  return keys_.Add();
}
void CmdCommitRequest::add_keys(const ::std::string& value) {
  keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:kvrpcpb.CmdCommitRequest.keys)
}
void CmdCommitRequest::add_keys(const char* value) {
  keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:kvrpcpb.CmdCommitRequest.keys)
}
void CmdCommitRequest::add_keys(const void* value, size_t size) {
  keys_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:kvrpcpb.CmdCommitRequest.keys)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
CmdCommitRequest::keys() const {
  // @@protoc_insertion_point(field_list:kvrpcpb.CmdCommitRequest.keys)
  return keys_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
CmdCommitRequest::mutable_keys() {
  // @@protoc_insertion_point(field_mutable_list:kvrpcpb.CmdCommitRequest.keys)
  return &keys_;
}

// optional uint64 commit_version = 3;
bool CmdCommitRequest::has_commit_version() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CmdCommitRequest::set_has_commit_version() {
  _has_bits_[0] |= 0x00000004u;
}
void CmdCommitRequest::clear_has_commit_version() {
  _has_bits_[0] &= ~0x00000004u;
}
void CmdCommitRequest::clear_commit_version() {
  commit_version_ = GOOGLE_ULONGLONG(0);
  clear_has_commit_version();
}
::google::protobuf::uint64 CmdCommitRequest::commit_version() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.CmdCommitRequest.commit_version)
  return commit_version_;
}
void CmdCommitRequest::set_commit_version(::google::protobuf::uint64 value) {
  set_has_commit_version();
  commit_version_ = value;
  // @@protoc_insertion_point(field_set:kvrpcpb.CmdCommitRequest.commit_version)
}

// optional bytes binlog = 4;
bool CmdCommitRequest::has_binlog() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CmdCommitRequest::set_has_binlog() {
  _has_bits_[0] |= 0x00000008u;
}
void CmdCommitRequest::clear_has_binlog() {
  _has_bits_[0] &= ~0x00000008u;
}
void CmdCommitRequest::clear_binlog() {
  binlog_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_binlog();
}
const ::std::string& CmdCommitRequest::binlog() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.CmdCommitRequest.binlog)
  return binlog_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CmdCommitRequest::set_binlog(const ::std::string& value) {
  set_has_binlog();
  binlog_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kvrpcpb.CmdCommitRequest.binlog)
}
void CmdCommitRequest::set_binlog(const char* value) {
  set_has_binlog();
  binlog_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kvrpcpb.CmdCommitRequest.binlog)
}
void CmdCommitRequest::set_binlog(const void* value, size_t size) {
  set_has_binlog();
  binlog_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kvrpcpb.CmdCommitRequest.binlog)
}
::std::string* CmdCommitRequest::mutable_binlog() {
  set_has_binlog();
  // @@protoc_insertion_point(field_mutable:kvrpcpb.CmdCommitRequest.binlog)
  return binlog_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CmdCommitRequest::release_binlog() {
  // @@protoc_insertion_point(field_release:kvrpcpb.CmdCommitRequest.binlog)
  clear_has_binlog();
  return binlog_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CmdCommitRequest::set_allocated_binlog(::std::string* binlog) {
  if (binlog != NULL) {
    set_has_binlog();
  } else {
    clear_has_binlog();
  }
  binlog_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), binlog);
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.CmdCommitRequest.binlog)
}

inline const CmdCommitRequest* CmdCommitRequest::internal_default_instance() {
  return &CmdCommitRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CmdCommitResponse::kErrorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CmdCommitResponse::CmdCommitResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_kvrpcpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.CmdCommitResponse)
}

void CmdCommitResponse::InitAsDefaultInstance() {
  error_ = const_cast< ::kvrpcpb::KeyError*>(
      ::kvrpcpb::KeyError::internal_default_instance());
}

CmdCommitResponse::CmdCommitResponse(const CmdCommitResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.CmdCommitResponse)
}

void CmdCommitResponse::SharedCtor() {
  _cached_size_ = 0;
  error_ = NULL;
}

CmdCommitResponse::~CmdCommitResponse() {
  // @@protoc_insertion_point(destructor:kvrpcpb.CmdCommitResponse)
  SharedDtor();
}

void CmdCommitResponse::SharedDtor() {
  if (this != &CmdCommitResponse_default_instance_.get()) {
    delete error_;
  }
}

void CmdCommitResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CmdCommitResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CmdCommitResponse_descriptor_;
}

const CmdCommitResponse& CmdCommitResponse::default_instance() {
  protobuf_InitDefaults_kvrpcpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<CmdCommitResponse> CmdCommitResponse_default_instance_;

CmdCommitResponse* CmdCommitResponse::New(::google::protobuf::Arena* arena) const {
  CmdCommitResponse* n = new CmdCommitResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CmdCommitResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.CmdCommitResponse)
  if (has_error()) {
    if (error_ != NULL) error_->::kvrpcpb::KeyError::Clear();
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CmdCommitResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.CmdCommitResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .kvrpcpb.KeyError error = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.CmdCommitResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.CmdCommitResponse)
  return false;
#undef DO_
}

void CmdCommitResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.CmdCommitResponse)
  // optional .kvrpcpb.KeyError error = 1;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->error_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kvrpcpb.CmdCommitResponse)
}

::google::protobuf::uint8* CmdCommitResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.CmdCommitResponse)
  // optional .kvrpcpb.KeyError error = 1;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->error_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.CmdCommitResponse)
  return target;
}

size_t CmdCommitResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.CmdCommitResponse)
  size_t total_size = 0;

  // optional .kvrpcpb.KeyError error = 1;
  if (has_error()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->error_);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CmdCommitResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.CmdCommitResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CmdCommitResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CmdCommitResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.CmdCommitResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.CmdCommitResponse)
    UnsafeMergeFrom(*source);
  }
}

void CmdCommitResponse::MergeFrom(const CmdCommitResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.CmdCommitResponse)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void CmdCommitResponse::UnsafeMergeFrom(const CmdCommitResponse& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      mutable_error()->::kvrpcpb::KeyError::MergeFrom(from.error());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void CmdCommitResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.CmdCommitResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CmdCommitResponse::CopyFrom(const CmdCommitResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.CmdCommitResponse)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool CmdCommitResponse::IsInitialized() const {

  return true;
}

void CmdCommitResponse::Swap(CmdCommitResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CmdCommitResponse::InternalSwap(CmdCommitResponse* other) {
  std::swap(error_, other->error_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CmdCommitResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CmdCommitResponse_descriptor_;
  metadata.reflection = CmdCommitResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CmdCommitResponse

// optional .kvrpcpb.KeyError error = 1;
bool CmdCommitResponse::has_error() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CmdCommitResponse::set_has_error() {
  _has_bits_[0] |= 0x00000001u;
}
void CmdCommitResponse::clear_has_error() {
  _has_bits_[0] &= ~0x00000001u;
}
void CmdCommitResponse::clear_error() {
  if (error_ != NULL) error_->::kvrpcpb::KeyError::Clear();
  clear_has_error();
}
const ::kvrpcpb::KeyError& CmdCommitResponse::error() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.CmdCommitResponse.error)
  return error_ != NULL ? *error_
                         : *::kvrpcpb::KeyError::internal_default_instance();
}
::kvrpcpb::KeyError* CmdCommitResponse::mutable_error() {
  set_has_error();
  if (error_ == NULL) {
    error_ = new ::kvrpcpb::KeyError;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.CmdCommitResponse.error)
  return error_;
}
::kvrpcpb::KeyError* CmdCommitResponse::release_error() {
  // @@protoc_insertion_point(field_release:kvrpcpb.CmdCommitResponse.error)
  clear_has_error();
  ::kvrpcpb::KeyError* temp = error_;
  error_ = NULL;
  return temp;
}
void CmdCommitResponse::set_allocated_error(::kvrpcpb::KeyError* error) {
  delete error_;
  error_ = error;
  if (error) {
    set_has_error();
  } else {
    clear_has_error();
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.CmdCommitResponse.error)
}

inline const CmdCommitResponse* CmdCommitResponse::internal_default_instance() {
  return &CmdCommitResponse_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CmdBatchRollbackRequest::kStartVersionFieldNumber;
const int CmdBatchRollbackRequest::kKeysFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CmdBatchRollbackRequest::CmdBatchRollbackRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_kvrpcpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.CmdBatchRollbackRequest)
}

void CmdBatchRollbackRequest::InitAsDefaultInstance() {
}

CmdBatchRollbackRequest::CmdBatchRollbackRequest(const CmdBatchRollbackRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.CmdBatchRollbackRequest)
}

void CmdBatchRollbackRequest::SharedCtor() {
  _cached_size_ = 0;
  start_version_ = GOOGLE_ULONGLONG(0);
}

CmdBatchRollbackRequest::~CmdBatchRollbackRequest() {
  // @@protoc_insertion_point(destructor:kvrpcpb.CmdBatchRollbackRequest)
  SharedDtor();
}

void CmdBatchRollbackRequest::SharedDtor() {
}

void CmdBatchRollbackRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CmdBatchRollbackRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CmdBatchRollbackRequest_descriptor_;
}

const CmdBatchRollbackRequest& CmdBatchRollbackRequest::default_instance() {
  protobuf_InitDefaults_kvrpcpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<CmdBatchRollbackRequest> CmdBatchRollbackRequest_default_instance_;

CmdBatchRollbackRequest* CmdBatchRollbackRequest::New(::google::protobuf::Arena* arena) const {
  CmdBatchRollbackRequest* n = new CmdBatchRollbackRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CmdBatchRollbackRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.CmdBatchRollbackRequest)
  start_version_ = GOOGLE_ULONGLONG(0);
  keys_.Clear();
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CmdBatchRollbackRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.CmdBatchRollbackRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 start_version = 1;
      case 1: {
        if (tag == 8) {
          set_has_start_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &start_version_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_keys;
        break;
      }

      // repeated bytes keys = 2;
      case 2: {
        if (tag == 18) {
         parse_keys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_keys()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_keys;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.CmdBatchRollbackRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.CmdBatchRollbackRequest)
  return false;
#undef DO_
}

void CmdBatchRollbackRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.CmdBatchRollbackRequest)
  // optional uint64 start_version = 1;
  if (has_start_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->start_version(), output);
  }

  // repeated bytes keys = 2;
  for (int i = 0; i < this->keys_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->keys(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kvrpcpb.CmdBatchRollbackRequest)
}

::google::protobuf::uint8* CmdBatchRollbackRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.CmdBatchRollbackRequest)
  // optional uint64 start_version = 1;
  if (has_start_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->start_version(), target);
  }

  // repeated bytes keys = 2;
  for (int i = 0; i < this->keys_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(2, this->keys(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.CmdBatchRollbackRequest)
  return target;
}

size_t CmdBatchRollbackRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.CmdBatchRollbackRequest)
  size_t total_size = 0;

  // optional uint64 start_version = 1;
  if (has_start_version()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->start_version());
  }

  // repeated bytes keys = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->keys_size());
  for (int i = 0; i < this->keys_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->keys(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CmdBatchRollbackRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.CmdBatchRollbackRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CmdBatchRollbackRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CmdBatchRollbackRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.CmdBatchRollbackRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.CmdBatchRollbackRequest)
    UnsafeMergeFrom(*source);
  }
}

void CmdBatchRollbackRequest::MergeFrom(const CmdBatchRollbackRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.CmdBatchRollbackRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void CmdBatchRollbackRequest::UnsafeMergeFrom(const CmdBatchRollbackRequest& from) {
  GOOGLE_DCHECK(&from != this);
  keys_.UnsafeMergeFrom(from.keys_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_start_version()) {
      set_start_version(from.start_version());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void CmdBatchRollbackRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.CmdBatchRollbackRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CmdBatchRollbackRequest::CopyFrom(const CmdBatchRollbackRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.CmdBatchRollbackRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool CmdBatchRollbackRequest::IsInitialized() const {

  return true;
}

void CmdBatchRollbackRequest::Swap(CmdBatchRollbackRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CmdBatchRollbackRequest::InternalSwap(CmdBatchRollbackRequest* other) {
  std::swap(start_version_, other->start_version_);
  keys_.UnsafeArenaSwap(&other->keys_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CmdBatchRollbackRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CmdBatchRollbackRequest_descriptor_;
  metadata.reflection = CmdBatchRollbackRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CmdBatchRollbackRequest

// optional uint64 start_version = 1;
bool CmdBatchRollbackRequest::has_start_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CmdBatchRollbackRequest::set_has_start_version() {
  _has_bits_[0] |= 0x00000001u;
}
void CmdBatchRollbackRequest::clear_has_start_version() {
  _has_bits_[0] &= ~0x00000001u;
}
void CmdBatchRollbackRequest::clear_start_version() {
  start_version_ = GOOGLE_ULONGLONG(0);
  clear_has_start_version();
}
::google::protobuf::uint64 CmdBatchRollbackRequest::start_version() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.CmdBatchRollbackRequest.start_version)
  return start_version_;
}
void CmdBatchRollbackRequest::set_start_version(::google::protobuf::uint64 value) {
  set_has_start_version();
  start_version_ = value;
  // @@protoc_insertion_point(field_set:kvrpcpb.CmdBatchRollbackRequest.start_version)
}

// repeated bytes keys = 2;
int CmdBatchRollbackRequest::keys_size() const {
  return keys_.size();
}
void CmdBatchRollbackRequest::clear_keys() {
  keys_.Clear();
}
const ::std::string& CmdBatchRollbackRequest::keys(int index) const {
  // @@protoc_insertion_point(field_get:kvrpcpb.CmdBatchRollbackRequest.keys)
  return keys_.Get(index);
}
::std::string* CmdBatchRollbackRequest::mutable_keys(int index) {
  // @@protoc_insertion_point(field_mutable:kvrpcpb.CmdBatchRollbackRequest.keys)
  return keys_.Mutable(index);
}
void CmdBatchRollbackRequest::set_keys(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:kvrpcpb.CmdBatchRollbackRequest.keys)
  keys_.Mutable(index)->assign(value);
}
void CmdBatchRollbackRequest::set_keys(int index, const char* value) {
  keys_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:kvrpcpb.CmdBatchRollbackRequest.keys)
}
void CmdBatchRollbackRequest::set_keys(int index, const void* value, size_t size) {
  keys_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:kvrpcpb.CmdBatchRollbackRequest.keys)
}
::std::string* CmdBatchRollbackRequest::add_keys() {
  // @@protoc_insertion_point(field_add_mutable:kvrpcpb.CmdBatchRollbackRequest.keys)
  return keys_.Add();
}
void CmdBatchRollbackRequest::add_keys(const ::std::string& value) {
  keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:kvrpcpb.CmdBatchRollbackRequest.keys)
}
void CmdBatchRollbackRequest::add_keys(const char* value) {
  keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:kvrpcpb.CmdBatchRollbackRequest.keys)
}
void CmdBatchRollbackRequest::add_keys(const void* value, size_t size) {
  keys_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:kvrpcpb.CmdBatchRollbackRequest.keys)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
CmdBatchRollbackRequest::keys() const {
  // @@protoc_insertion_point(field_list:kvrpcpb.CmdBatchRollbackRequest.keys)
  return keys_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
CmdBatchRollbackRequest::mutable_keys() {
  // @@protoc_insertion_point(field_mutable_list:kvrpcpb.CmdBatchRollbackRequest.keys)
  return &keys_;
}

inline const CmdBatchRollbackRequest* CmdBatchRollbackRequest::internal_default_instance() {
  return &CmdBatchRollbackRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CmdBatchRollbackResponse::kErrorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CmdBatchRollbackResponse::CmdBatchRollbackResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_kvrpcpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.CmdBatchRollbackResponse)
}

void CmdBatchRollbackResponse::InitAsDefaultInstance() {
  error_ = const_cast< ::kvrpcpb::KeyError*>(
      ::kvrpcpb::KeyError::internal_default_instance());
}

CmdBatchRollbackResponse::CmdBatchRollbackResponse(const CmdBatchRollbackResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.CmdBatchRollbackResponse)
}

void CmdBatchRollbackResponse::SharedCtor() {
  _cached_size_ = 0;
  error_ = NULL;
}

CmdBatchRollbackResponse::~CmdBatchRollbackResponse() {
  // @@protoc_insertion_point(destructor:kvrpcpb.CmdBatchRollbackResponse)
  SharedDtor();
}

void CmdBatchRollbackResponse::SharedDtor() {
  if (this != &CmdBatchRollbackResponse_default_instance_.get()) {
    delete error_;
  }
}

void CmdBatchRollbackResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CmdBatchRollbackResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CmdBatchRollbackResponse_descriptor_;
}

const CmdBatchRollbackResponse& CmdBatchRollbackResponse::default_instance() {
  protobuf_InitDefaults_kvrpcpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<CmdBatchRollbackResponse> CmdBatchRollbackResponse_default_instance_;

CmdBatchRollbackResponse* CmdBatchRollbackResponse::New(::google::protobuf::Arena* arena) const {
  CmdBatchRollbackResponse* n = new CmdBatchRollbackResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CmdBatchRollbackResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.CmdBatchRollbackResponse)
  if (has_error()) {
    if (error_ != NULL) error_->::kvrpcpb::KeyError::Clear();
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CmdBatchRollbackResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.CmdBatchRollbackResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .kvrpcpb.KeyError error = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.CmdBatchRollbackResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.CmdBatchRollbackResponse)
  return false;
#undef DO_
}

void CmdBatchRollbackResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.CmdBatchRollbackResponse)
  // optional .kvrpcpb.KeyError error = 1;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->error_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kvrpcpb.CmdBatchRollbackResponse)
}

::google::protobuf::uint8* CmdBatchRollbackResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.CmdBatchRollbackResponse)
  // optional .kvrpcpb.KeyError error = 1;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->error_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.CmdBatchRollbackResponse)
  return target;
}

size_t CmdBatchRollbackResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.CmdBatchRollbackResponse)
  size_t total_size = 0;

  // optional .kvrpcpb.KeyError error = 1;
  if (has_error()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->error_);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CmdBatchRollbackResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.CmdBatchRollbackResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CmdBatchRollbackResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CmdBatchRollbackResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.CmdBatchRollbackResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.CmdBatchRollbackResponse)
    UnsafeMergeFrom(*source);
  }
}

void CmdBatchRollbackResponse::MergeFrom(const CmdBatchRollbackResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.CmdBatchRollbackResponse)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void CmdBatchRollbackResponse::UnsafeMergeFrom(const CmdBatchRollbackResponse& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      mutable_error()->::kvrpcpb::KeyError::MergeFrom(from.error());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void CmdBatchRollbackResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.CmdBatchRollbackResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CmdBatchRollbackResponse::CopyFrom(const CmdBatchRollbackResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.CmdBatchRollbackResponse)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool CmdBatchRollbackResponse::IsInitialized() const {

  return true;
}

void CmdBatchRollbackResponse::Swap(CmdBatchRollbackResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CmdBatchRollbackResponse::InternalSwap(CmdBatchRollbackResponse* other) {
  std::swap(error_, other->error_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CmdBatchRollbackResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CmdBatchRollbackResponse_descriptor_;
  metadata.reflection = CmdBatchRollbackResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CmdBatchRollbackResponse

// optional .kvrpcpb.KeyError error = 1;
bool CmdBatchRollbackResponse::has_error() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CmdBatchRollbackResponse::set_has_error() {
  _has_bits_[0] |= 0x00000001u;
}
void CmdBatchRollbackResponse::clear_has_error() {
  _has_bits_[0] &= ~0x00000001u;
}
void CmdBatchRollbackResponse::clear_error() {
  if (error_ != NULL) error_->::kvrpcpb::KeyError::Clear();
  clear_has_error();
}
const ::kvrpcpb::KeyError& CmdBatchRollbackResponse::error() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.CmdBatchRollbackResponse.error)
  return error_ != NULL ? *error_
                         : *::kvrpcpb::KeyError::internal_default_instance();
}
::kvrpcpb::KeyError* CmdBatchRollbackResponse::mutable_error() {
  set_has_error();
  if (error_ == NULL) {
    error_ = new ::kvrpcpb::KeyError;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.CmdBatchRollbackResponse.error)
  return error_;
}
::kvrpcpb::KeyError* CmdBatchRollbackResponse::release_error() {
  // @@protoc_insertion_point(field_release:kvrpcpb.CmdBatchRollbackResponse.error)
  clear_has_error();
  ::kvrpcpb::KeyError* temp = error_;
  error_ = NULL;
  return temp;
}
void CmdBatchRollbackResponse::set_allocated_error(::kvrpcpb::KeyError* error) {
  delete error_;
  error_ = error;
  if (error) {
    set_has_error();
  } else {
    clear_has_error();
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.CmdBatchRollbackResponse.error)
}

inline const CmdBatchRollbackResponse* CmdBatchRollbackResponse::internal_default_instance() {
  return &CmdBatchRollbackResponse_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CmdCleanupRequest::kKeyFieldNumber;
const int CmdCleanupRequest::kStartVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CmdCleanupRequest::CmdCleanupRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_kvrpcpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.CmdCleanupRequest)
}

void CmdCleanupRequest::InitAsDefaultInstance() {
}

CmdCleanupRequest::CmdCleanupRequest(const CmdCleanupRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.CmdCleanupRequest)
}

void CmdCleanupRequest::SharedCtor() {
  _cached_size_ = 0;
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  start_version_ = GOOGLE_ULONGLONG(0);
}

CmdCleanupRequest::~CmdCleanupRequest() {
  // @@protoc_insertion_point(destructor:kvrpcpb.CmdCleanupRequest)
  SharedDtor();
}

void CmdCleanupRequest::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CmdCleanupRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CmdCleanupRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CmdCleanupRequest_descriptor_;
}

const CmdCleanupRequest& CmdCleanupRequest::default_instance() {
  protobuf_InitDefaults_kvrpcpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<CmdCleanupRequest> CmdCleanupRequest_default_instance_;

CmdCleanupRequest* CmdCleanupRequest::New(::google::protobuf::Arena* arena) const {
  CmdCleanupRequest* n = new CmdCleanupRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CmdCleanupRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.CmdCleanupRequest)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_key()) {
      key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    start_version_ = GOOGLE_ULONGLONG(0);
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CmdCleanupRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.CmdCleanupRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_start_version;
        break;
      }

      // optional uint64 start_version = 2;
      case 2: {
        if (tag == 16) {
         parse_start_version:
          set_has_start_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &start_version_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.CmdCleanupRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.CmdCleanupRequest)
  return false;
#undef DO_
}

void CmdCleanupRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.CmdCleanupRequest)
  // optional bytes key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->key(), output);
  }

  // optional uint64 start_version = 2;
  if (has_start_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->start_version(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kvrpcpb.CmdCleanupRequest)
}

::google::protobuf::uint8* CmdCleanupRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.CmdCleanupRequest)
  // optional bytes key = 1;
  if (has_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->key(), target);
  }

  // optional uint64 start_version = 2;
  if (has_start_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->start_version(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.CmdCleanupRequest)
  return target;
}

size_t CmdCleanupRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.CmdCleanupRequest)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional bytes key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->key());
    }

    // optional uint64 start_version = 2;
    if (has_start_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->start_version());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CmdCleanupRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.CmdCleanupRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CmdCleanupRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CmdCleanupRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.CmdCleanupRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.CmdCleanupRequest)
    UnsafeMergeFrom(*source);
  }
}

void CmdCleanupRequest::MergeFrom(const CmdCleanupRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.CmdCleanupRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void CmdCleanupRequest::UnsafeMergeFrom(const CmdCleanupRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_has_key();
      key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
    }
    if (from.has_start_version()) {
      set_start_version(from.start_version());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void CmdCleanupRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.CmdCleanupRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CmdCleanupRequest::CopyFrom(const CmdCleanupRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.CmdCleanupRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool CmdCleanupRequest::IsInitialized() const {

  return true;
}

void CmdCleanupRequest::Swap(CmdCleanupRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CmdCleanupRequest::InternalSwap(CmdCleanupRequest* other) {
  key_.Swap(&other->key_);
  std::swap(start_version_, other->start_version_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CmdCleanupRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CmdCleanupRequest_descriptor_;
  metadata.reflection = CmdCleanupRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CmdCleanupRequest

// optional bytes key = 1;
bool CmdCleanupRequest::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CmdCleanupRequest::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
void CmdCleanupRequest::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
void CmdCleanupRequest::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
const ::std::string& CmdCleanupRequest::key() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.CmdCleanupRequest.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CmdCleanupRequest::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kvrpcpb.CmdCleanupRequest.key)
}
void CmdCleanupRequest::set_key(const char* value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kvrpcpb.CmdCleanupRequest.key)
}
void CmdCleanupRequest::set_key(const void* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kvrpcpb.CmdCleanupRequest.key)
}
::std::string* CmdCleanupRequest::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:kvrpcpb.CmdCleanupRequest.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CmdCleanupRequest::release_key() {
  // @@protoc_insertion_point(field_release:kvrpcpb.CmdCleanupRequest.key)
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CmdCleanupRequest::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.CmdCleanupRequest.key)
}

// optional uint64 start_version = 2;
bool CmdCleanupRequest::has_start_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CmdCleanupRequest::set_has_start_version() {
  _has_bits_[0] |= 0x00000002u;
}
void CmdCleanupRequest::clear_has_start_version() {
  _has_bits_[0] &= ~0x00000002u;
}
void CmdCleanupRequest::clear_start_version() {
  start_version_ = GOOGLE_ULONGLONG(0);
  clear_has_start_version();
}
::google::protobuf::uint64 CmdCleanupRequest::start_version() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.CmdCleanupRequest.start_version)
  return start_version_;
}
void CmdCleanupRequest::set_start_version(::google::protobuf::uint64 value) {
  set_has_start_version();
  start_version_ = value;
  // @@protoc_insertion_point(field_set:kvrpcpb.CmdCleanupRequest.start_version)
}

inline const CmdCleanupRequest* CmdCleanupRequest::internal_default_instance() {
  return &CmdCleanupRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CmdCleanupResponse::kErrorFieldNumber;
const int CmdCleanupResponse::kCommitVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CmdCleanupResponse::CmdCleanupResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_kvrpcpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.CmdCleanupResponse)
}

void CmdCleanupResponse::InitAsDefaultInstance() {
  error_ = const_cast< ::kvrpcpb::KeyError*>(
      ::kvrpcpb::KeyError::internal_default_instance());
}

CmdCleanupResponse::CmdCleanupResponse(const CmdCleanupResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.CmdCleanupResponse)
}

void CmdCleanupResponse::SharedCtor() {
  _cached_size_ = 0;
  error_ = NULL;
  commit_version_ = GOOGLE_ULONGLONG(0);
}

CmdCleanupResponse::~CmdCleanupResponse() {
  // @@protoc_insertion_point(destructor:kvrpcpb.CmdCleanupResponse)
  SharedDtor();
}

void CmdCleanupResponse::SharedDtor() {
  if (this != &CmdCleanupResponse_default_instance_.get()) {
    delete error_;
  }
}

void CmdCleanupResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CmdCleanupResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CmdCleanupResponse_descriptor_;
}

const CmdCleanupResponse& CmdCleanupResponse::default_instance() {
  protobuf_InitDefaults_kvrpcpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<CmdCleanupResponse> CmdCleanupResponse_default_instance_;

CmdCleanupResponse* CmdCleanupResponse::New(::google::protobuf::Arena* arena) const {
  CmdCleanupResponse* n = new CmdCleanupResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CmdCleanupResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.CmdCleanupResponse)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_error()) {
      if (error_ != NULL) error_->::kvrpcpb::KeyError::Clear();
    }
    commit_version_ = GOOGLE_ULONGLONG(0);
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CmdCleanupResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.CmdCleanupResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .kvrpcpb.KeyError error = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_commit_version;
        break;
      }

      // optional uint64 commit_version = 2;
      case 2: {
        if (tag == 16) {
         parse_commit_version:
          set_has_commit_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &commit_version_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.CmdCleanupResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.CmdCleanupResponse)
  return false;
#undef DO_
}

void CmdCleanupResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.CmdCleanupResponse)
  // optional .kvrpcpb.KeyError error = 1;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->error_, output);
  }

  // optional uint64 commit_version = 2;
  if (has_commit_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->commit_version(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kvrpcpb.CmdCleanupResponse)
}

::google::protobuf::uint8* CmdCleanupResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.CmdCleanupResponse)
  // optional .kvrpcpb.KeyError error = 1;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->error_, false, target);
  }

  // optional uint64 commit_version = 2;
  if (has_commit_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->commit_version(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.CmdCleanupResponse)
  return target;
}

size_t CmdCleanupResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.CmdCleanupResponse)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional .kvrpcpb.KeyError error = 1;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->error_);
    }

    // optional uint64 commit_version = 2;
    if (has_commit_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->commit_version());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CmdCleanupResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.CmdCleanupResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CmdCleanupResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CmdCleanupResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.CmdCleanupResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.CmdCleanupResponse)
    UnsafeMergeFrom(*source);
  }
}

void CmdCleanupResponse::MergeFrom(const CmdCleanupResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.CmdCleanupResponse)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void CmdCleanupResponse::UnsafeMergeFrom(const CmdCleanupResponse& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      mutable_error()->::kvrpcpb::KeyError::MergeFrom(from.error());
    }
    if (from.has_commit_version()) {
      set_commit_version(from.commit_version());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void CmdCleanupResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.CmdCleanupResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CmdCleanupResponse::CopyFrom(const CmdCleanupResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.CmdCleanupResponse)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool CmdCleanupResponse::IsInitialized() const {

  return true;
}

void CmdCleanupResponse::Swap(CmdCleanupResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CmdCleanupResponse::InternalSwap(CmdCleanupResponse* other) {
  std::swap(error_, other->error_);
  std::swap(commit_version_, other->commit_version_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CmdCleanupResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CmdCleanupResponse_descriptor_;
  metadata.reflection = CmdCleanupResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CmdCleanupResponse

// optional .kvrpcpb.KeyError error = 1;
bool CmdCleanupResponse::has_error() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CmdCleanupResponse::set_has_error() {
  _has_bits_[0] |= 0x00000001u;
}
void CmdCleanupResponse::clear_has_error() {
  _has_bits_[0] &= ~0x00000001u;
}
void CmdCleanupResponse::clear_error() {
  if (error_ != NULL) error_->::kvrpcpb::KeyError::Clear();
  clear_has_error();
}
const ::kvrpcpb::KeyError& CmdCleanupResponse::error() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.CmdCleanupResponse.error)
  return error_ != NULL ? *error_
                         : *::kvrpcpb::KeyError::internal_default_instance();
}
::kvrpcpb::KeyError* CmdCleanupResponse::mutable_error() {
  set_has_error();
  if (error_ == NULL) {
    error_ = new ::kvrpcpb::KeyError;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.CmdCleanupResponse.error)
  return error_;
}
::kvrpcpb::KeyError* CmdCleanupResponse::release_error() {
  // @@protoc_insertion_point(field_release:kvrpcpb.CmdCleanupResponse.error)
  clear_has_error();
  ::kvrpcpb::KeyError* temp = error_;
  error_ = NULL;
  return temp;
}
void CmdCleanupResponse::set_allocated_error(::kvrpcpb::KeyError* error) {
  delete error_;
  error_ = error;
  if (error) {
    set_has_error();
  } else {
    clear_has_error();
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.CmdCleanupResponse.error)
}

// optional uint64 commit_version = 2;
bool CmdCleanupResponse::has_commit_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CmdCleanupResponse::set_has_commit_version() {
  _has_bits_[0] |= 0x00000002u;
}
void CmdCleanupResponse::clear_has_commit_version() {
  _has_bits_[0] &= ~0x00000002u;
}
void CmdCleanupResponse::clear_commit_version() {
  commit_version_ = GOOGLE_ULONGLONG(0);
  clear_has_commit_version();
}
::google::protobuf::uint64 CmdCleanupResponse::commit_version() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.CmdCleanupResponse.commit_version)
  return commit_version_;
}
void CmdCleanupResponse::set_commit_version(::google::protobuf::uint64 value) {
  set_has_commit_version();
  commit_version_ = value;
  // @@protoc_insertion_point(field_set:kvrpcpb.CmdCleanupResponse.commit_version)
}

inline const CmdCleanupResponse* CmdCleanupResponse::internal_default_instance() {
  return &CmdCleanupResponse_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CmdBatchGetRequest::kKeysFieldNumber;
const int CmdBatchGetRequest::kVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CmdBatchGetRequest::CmdBatchGetRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_kvrpcpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.CmdBatchGetRequest)
}

void CmdBatchGetRequest::InitAsDefaultInstance() {
}

CmdBatchGetRequest::CmdBatchGetRequest(const CmdBatchGetRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.CmdBatchGetRequest)
}

void CmdBatchGetRequest::SharedCtor() {
  _cached_size_ = 0;
  version_ = GOOGLE_ULONGLONG(0);
}

CmdBatchGetRequest::~CmdBatchGetRequest() {
  // @@protoc_insertion_point(destructor:kvrpcpb.CmdBatchGetRequest)
  SharedDtor();
}

void CmdBatchGetRequest::SharedDtor() {
}

void CmdBatchGetRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CmdBatchGetRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CmdBatchGetRequest_descriptor_;
}

const CmdBatchGetRequest& CmdBatchGetRequest::default_instance() {
  protobuf_InitDefaults_kvrpcpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<CmdBatchGetRequest> CmdBatchGetRequest_default_instance_;

CmdBatchGetRequest* CmdBatchGetRequest::New(::google::protobuf::Arena* arena) const {
  CmdBatchGetRequest* n = new CmdBatchGetRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CmdBatchGetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.CmdBatchGetRequest)
  version_ = GOOGLE_ULONGLONG(0);
  keys_.Clear();
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CmdBatchGetRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.CmdBatchGetRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated bytes keys = 1;
      case 1: {
        if (tag == 10) {
         parse_keys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_keys()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_keys;
        if (input->ExpectTag(16)) goto parse_version;
        break;
      }

      // optional uint64 version = 2;
      case 2: {
        if (tag == 16) {
         parse_version:
          set_has_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.CmdBatchGetRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.CmdBatchGetRequest)
  return false;
#undef DO_
}

void CmdBatchGetRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.CmdBatchGetRequest)
  // repeated bytes keys = 1;
  for (int i = 0; i < this->keys_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->keys(i), output);
  }

  // optional uint64 version = 2;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->version(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kvrpcpb.CmdBatchGetRequest)
}

::google::protobuf::uint8* CmdBatchGetRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.CmdBatchGetRequest)
  // repeated bytes keys = 1;
  for (int i = 0; i < this->keys_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(1, this->keys(i), target);
  }

  // optional uint64 version = 2;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->version(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.CmdBatchGetRequest)
  return target;
}

size_t CmdBatchGetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.CmdBatchGetRequest)
  size_t total_size = 0;

  // optional uint64 version = 2;
  if (has_version()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->version());
  }

  // repeated bytes keys = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->keys_size());
  for (int i = 0; i < this->keys_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->keys(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CmdBatchGetRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.CmdBatchGetRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CmdBatchGetRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CmdBatchGetRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.CmdBatchGetRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.CmdBatchGetRequest)
    UnsafeMergeFrom(*source);
  }
}

void CmdBatchGetRequest::MergeFrom(const CmdBatchGetRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.CmdBatchGetRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void CmdBatchGetRequest::UnsafeMergeFrom(const CmdBatchGetRequest& from) {
  GOOGLE_DCHECK(&from != this);
  keys_.UnsafeMergeFrom(from.keys_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void CmdBatchGetRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.CmdBatchGetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CmdBatchGetRequest::CopyFrom(const CmdBatchGetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.CmdBatchGetRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool CmdBatchGetRequest::IsInitialized() const {

  return true;
}

void CmdBatchGetRequest::Swap(CmdBatchGetRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CmdBatchGetRequest::InternalSwap(CmdBatchGetRequest* other) {
  keys_.UnsafeArenaSwap(&other->keys_);
  std::swap(version_, other->version_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CmdBatchGetRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CmdBatchGetRequest_descriptor_;
  metadata.reflection = CmdBatchGetRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CmdBatchGetRequest

// repeated bytes keys = 1;
int CmdBatchGetRequest::keys_size() const {
  return keys_.size();
}
void CmdBatchGetRequest::clear_keys() {
  keys_.Clear();
}
const ::std::string& CmdBatchGetRequest::keys(int index) const {
  // @@protoc_insertion_point(field_get:kvrpcpb.CmdBatchGetRequest.keys)
  return keys_.Get(index);
}
::std::string* CmdBatchGetRequest::mutable_keys(int index) {
  // @@protoc_insertion_point(field_mutable:kvrpcpb.CmdBatchGetRequest.keys)
  return keys_.Mutable(index);
}
void CmdBatchGetRequest::set_keys(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:kvrpcpb.CmdBatchGetRequest.keys)
  keys_.Mutable(index)->assign(value);
}
void CmdBatchGetRequest::set_keys(int index, const char* value) {
  keys_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:kvrpcpb.CmdBatchGetRequest.keys)
}
void CmdBatchGetRequest::set_keys(int index, const void* value, size_t size) {
  keys_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:kvrpcpb.CmdBatchGetRequest.keys)
}
::std::string* CmdBatchGetRequest::add_keys() {
  // @@protoc_insertion_point(field_add_mutable:kvrpcpb.CmdBatchGetRequest.keys)
  return keys_.Add();
}
void CmdBatchGetRequest::add_keys(const ::std::string& value) {
  keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:kvrpcpb.CmdBatchGetRequest.keys)
}
void CmdBatchGetRequest::add_keys(const char* value) {
  keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:kvrpcpb.CmdBatchGetRequest.keys)
}
void CmdBatchGetRequest::add_keys(const void* value, size_t size) {
  keys_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:kvrpcpb.CmdBatchGetRequest.keys)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
CmdBatchGetRequest::keys() const {
  // @@protoc_insertion_point(field_list:kvrpcpb.CmdBatchGetRequest.keys)
  return keys_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
CmdBatchGetRequest::mutable_keys() {
  // @@protoc_insertion_point(field_mutable_list:kvrpcpb.CmdBatchGetRequest.keys)
  return &keys_;
}

// optional uint64 version = 2;
bool CmdBatchGetRequest::has_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CmdBatchGetRequest::set_has_version() {
  _has_bits_[0] |= 0x00000002u;
}
void CmdBatchGetRequest::clear_has_version() {
  _has_bits_[0] &= ~0x00000002u;
}
void CmdBatchGetRequest::clear_version() {
  version_ = GOOGLE_ULONGLONG(0);
  clear_has_version();
}
::google::protobuf::uint64 CmdBatchGetRequest::version() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.CmdBatchGetRequest.version)
  return version_;
}
void CmdBatchGetRequest::set_version(::google::protobuf::uint64 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:kvrpcpb.CmdBatchGetRequest.version)
}

inline const CmdBatchGetRequest* CmdBatchGetRequest::internal_default_instance() {
  return &CmdBatchGetRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CmdBatchGetResponse::kPairsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CmdBatchGetResponse::CmdBatchGetResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_kvrpcpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.CmdBatchGetResponse)
}

void CmdBatchGetResponse::InitAsDefaultInstance() {
}

CmdBatchGetResponse::CmdBatchGetResponse(const CmdBatchGetResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.CmdBatchGetResponse)
}

void CmdBatchGetResponse::SharedCtor() {
  _cached_size_ = 0;
}

CmdBatchGetResponse::~CmdBatchGetResponse() {
  // @@protoc_insertion_point(destructor:kvrpcpb.CmdBatchGetResponse)
  SharedDtor();
}

void CmdBatchGetResponse::SharedDtor() {
}

void CmdBatchGetResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CmdBatchGetResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CmdBatchGetResponse_descriptor_;
}

const CmdBatchGetResponse& CmdBatchGetResponse::default_instance() {
  protobuf_InitDefaults_kvrpcpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<CmdBatchGetResponse> CmdBatchGetResponse_default_instance_;

CmdBatchGetResponse* CmdBatchGetResponse::New(::google::protobuf::Arena* arena) const {
  CmdBatchGetResponse* n = new CmdBatchGetResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CmdBatchGetResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.CmdBatchGetResponse)
  pairs_.Clear();
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CmdBatchGetResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.CmdBatchGetResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .kvrpcpb.KvPair pairs = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_pairs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_pairs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_pairs;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.CmdBatchGetResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.CmdBatchGetResponse)
  return false;
#undef DO_
}

void CmdBatchGetResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.CmdBatchGetResponse)
  // repeated .kvrpcpb.KvPair pairs = 1;
  for (unsigned int i = 0, n = this->pairs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pairs(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kvrpcpb.CmdBatchGetResponse)
}

::google::protobuf::uint8* CmdBatchGetResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.CmdBatchGetResponse)
  // repeated .kvrpcpb.KvPair pairs = 1;
  for (unsigned int i = 0, n = this->pairs_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->pairs(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.CmdBatchGetResponse)
  return target;
}

size_t CmdBatchGetResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.CmdBatchGetResponse)
  size_t total_size = 0;

  // repeated .kvrpcpb.KvPair pairs = 1;
  {
    unsigned int count = this->pairs_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pairs(i));
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CmdBatchGetResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.CmdBatchGetResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CmdBatchGetResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CmdBatchGetResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.CmdBatchGetResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.CmdBatchGetResponse)
    UnsafeMergeFrom(*source);
  }
}

void CmdBatchGetResponse::MergeFrom(const CmdBatchGetResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.CmdBatchGetResponse)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void CmdBatchGetResponse::UnsafeMergeFrom(const CmdBatchGetResponse& from) {
  GOOGLE_DCHECK(&from != this);
  pairs_.MergeFrom(from.pairs_);
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void CmdBatchGetResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.CmdBatchGetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CmdBatchGetResponse::CopyFrom(const CmdBatchGetResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.CmdBatchGetResponse)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool CmdBatchGetResponse::IsInitialized() const {

  return true;
}

void CmdBatchGetResponse::Swap(CmdBatchGetResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CmdBatchGetResponse::InternalSwap(CmdBatchGetResponse* other) {
  pairs_.UnsafeArenaSwap(&other->pairs_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CmdBatchGetResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CmdBatchGetResponse_descriptor_;
  metadata.reflection = CmdBatchGetResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CmdBatchGetResponse

// repeated .kvrpcpb.KvPair pairs = 1;
int CmdBatchGetResponse::pairs_size() const {
  return pairs_.size();
}
void CmdBatchGetResponse::clear_pairs() {
  pairs_.Clear();
}
const ::kvrpcpb::KvPair& CmdBatchGetResponse::pairs(int index) const {
  // @@protoc_insertion_point(field_get:kvrpcpb.CmdBatchGetResponse.pairs)
  return pairs_.Get(index);
}
::kvrpcpb::KvPair* CmdBatchGetResponse::mutable_pairs(int index) {
  // @@protoc_insertion_point(field_mutable:kvrpcpb.CmdBatchGetResponse.pairs)
  return pairs_.Mutable(index);
}
::kvrpcpb::KvPair* CmdBatchGetResponse::add_pairs() {
  // @@protoc_insertion_point(field_add:kvrpcpb.CmdBatchGetResponse.pairs)
  return pairs_.Add();
}
::google::protobuf::RepeatedPtrField< ::kvrpcpb::KvPair >*
CmdBatchGetResponse::mutable_pairs() {
  // @@protoc_insertion_point(field_mutable_list:kvrpcpb.CmdBatchGetResponse.pairs)
  return &pairs_;
}
const ::google::protobuf::RepeatedPtrField< ::kvrpcpb::KvPair >&
CmdBatchGetResponse::pairs() const {
  // @@protoc_insertion_point(field_list:kvrpcpb.CmdBatchGetResponse.pairs)
  return pairs_;
}

inline const CmdBatchGetResponse* CmdBatchGetResponse::internal_default_instance() {
  return &CmdBatchGetResponse_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CmdScanLockRequest::kMaxVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CmdScanLockRequest::CmdScanLockRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_kvrpcpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.CmdScanLockRequest)
}

void CmdScanLockRequest::InitAsDefaultInstance() {
}

CmdScanLockRequest::CmdScanLockRequest(const CmdScanLockRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.CmdScanLockRequest)
}

void CmdScanLockRequest::SharedCtor() {
  _cached_size_ = 0;
  max_version_ = GOOGLE_ULONGLONG(0);
}

CmdScanLockRequest::~CmdScanLockRequest() {
  // @@protoc_insertion_point(destructor:kvrpcpb.CmdScanLockRequest)
  SharedDtor();
}

void CmdScanLockRequest::SharedDtor() {
}

void CmdScanLockRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CmdScanLockRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CmdScanLockRequest_descriptor_;
}

const CmdScanLockRequest& CmdScanLockRequest::default_instance() {
  protobuf_InitDefaults_kvrpcpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<CmdScanLockRequest> CmdScanLockRequest_default_instance_;

CmdScanLockRequest* CmdScanLockRequest::New(::google::protobuf::Arena* arena) const {
  CmdScanLockRequest* n = new CmdScanLockRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CmdScanLockRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.CmdScanLockRequest)
  max_version_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CmdScanLockRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.CmdScanLockRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 max_version = 1;
      case 1: {
        if (tag == 8) {
          set_has_max_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &max_version_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.CmdScanLockRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.CmdScanLockRequest)
  return false;
#undef DO_
}

void CmdScanLockRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.CmdScanLockRequest)
  // optional uint64 max_version = 1;
  if (has_max_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->max_version(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kvrpcpb.CmdScanLockRequest)
}

::google::protobuf::uint8* CmdScanLockRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.CmdScanLockRequest)
  // optional uint64 max_version = 1;
  if (has_max_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->max_version(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.CmdScanLockRequest)
  return target;
}

size_t CmdScanLockRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.CmdScanLockRequest)
  size_t total_size = 0;

  // optional uint64 max_version = 1;
  if (has_max_version()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->max_version());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CmdScanLockRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.CmdScanLockRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CmdScanLockRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CmdScanLockRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.CmdScanLockRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.CmdScanLockRequest)
    UnsafeMergeFrom(*source);
  }
}

void CmdScanLockRequest::MergeFrom(const CmdScanLockRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.CmdScanLockRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void CmdScanLockRequest::UnsafeMergeFrom(const CmdScanLockRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_max_version()) {
      set_max_version(from.max_version());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void CmdScanLockRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.CmdScanLockRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CmdScanLockRequest::CopyFrom(const CmdScanLockRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.CmdScanLockRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool CmdScanLockRequest::IsInitialized() const {

  return true;
}

void CmdScanLockRequest::Swap(CmdScanLockRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CmdScanLockRequest::InternalSwap(CmdScanLockRequest* other) {
  std::swap(max_version_, other->max_version_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CmdScanLockRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CmdScanLockRequest_descriptor_;
  metadata.reflection = CmdScanLockRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CmdScanLockRequest

// optional uint64 max_version = 1;
bool CmdScanLockRequest::has_max_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CmdScanLockRequest::set_has_max_version() {
  _has_bits_[0] |= 0x00000001u;
}
void CmdScanLockRequest::clear_has_max_version() {
  _has_bits_[0] &= ~0x00000001u;
}
void CmdScanLockRequest::clear_max_version() {
  max_version_ = GOOGLE_ULONGLONG(0);
  clear_has_max_version();
}
::google::protobuf::uint64 CmdScanLockRequest::max_version() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.CmdScanLockRequest.max_version)
  return max_version_;
}
void CmdScanLockRequest::set_max_version(::google::protobuf::uint64 value) {
  set_has_max_version();
  max_version_ = value;
  // @@protoc_insertion_point(field_set:kvrpcpb.CmdScanLockRequest.max_version)
}

inline const CmdScanLockRequest* CmdScanLockRequest::internal_default_instance() {
  return &CmdScanLockRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CmdScanLockResponse::kErrorFieldNumber;
const int CmdScanLockResponse::kLocksFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CmdScanLockResponse::CmdScanLockResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_kvrpcpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.CmdScanLockResponse)
}

void CmdScanLockResponse::InitAsDefaultInstance() {
  error_ = const_cast< ::kvrpcpb::KeyError*>(
      ::kvrpcpb::KeyError::internal_default_instance());
}

CmdScanLockResponse::CmdScanLockResponse(const CmdScanLockResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.CmdScanLockResponse)
}

void CmdScanLockResponse::SharedCtor() {
  _cached_size_ = 0;
  error_ = NULL;
}

CmdScanLockResponse::~CmdScanLockResponse() {
  // @@protoc_insertion_point(destructor:kvrpcpb.CmdScanLockResponse)
  SharedDtor();
}

void CmdScanLockResponse::SharedDtor() {
  if (this != &CmdScanLockResponse_default_instance_.get()) {
    delete error_;
  }
}

void CmdScanLockResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CmdScanLockResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CmdScanLockResponse_descriptor_;
}

const CmdScanLockResponse& CmdScanLockResponse::default_instance() {
  protobuf_InitDefaults_kvrpcpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<CmdScanLockResponse> CmdScanLockResponse_default_instance_;

CmdScanLockResponse* CmdScanLockResponse::New(::google::protobuf::Arena* arena) const {
  CmdScanLockResponse* n = new CmdScanLockResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CmdScanLockResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.CmdScanLockResponse)
  if (has_error()) {
    if (error_ != NULL) error_->::kvrpcpb::KeyError::Clear();
  }
  locks_.Clear();
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CmdScanLockResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.CmdScanLockResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .kvrpcpb.KeyError error = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_locks;
        break;
      }

      // repeated .kvrpcpb.LockInfo locks = 2;
      case 2: {
        if (tag == 18) {
         parse_locks:
          DO_(input->IncrementRecursionDepth());
         parse_loop_locks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_locks()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_locks;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.CmdScanLockResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.CmdScanLockResponse)
  return false;
#undef DO_
}

void CmdScanLockResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.CmdScanLockResponse)
  // optional .kvrpcpb.KeyError error = 1;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->error_, output);
  }

  // repeated .kvrpcpb.LockInfo locks = 2;
  for (unsigned int i = 0, n = this->locks_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->locks(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kvrpcpb.CmdScanLockResponse)
}

::google::protobuf::uint8* CmdScanLockResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.CmdScanLockResponse)
  // optional .kvrpcpb.KeyError error = 1;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->error_, false, target);
  }

  // repeated .kvrpcpb.LockInfo locks = 2;
  for (unsigned int i = 0, n = this->locks_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->locks(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.CmdScanLockResponse)
  return target;
}

size_t CmdScanLockResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.CmdScanLockResponse)
  size_t total_size = 0;

  // optional .kvrpcpb.KeyError error = 1;
  if (has_error()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->error_);
  }

  // repeated .kvrpcpb.LockInfo locks = 2;
  {
    unsigned int count = this->locks_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->locks(i));
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CmdScanLockResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.CmdScanLockResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CmdScanLockResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CmdScanLockResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.CmdScanLockResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.CmdScanLockResponse)
    UnsafeMergeFrom(*source);
  }
}

void CmdScanLockResponse::MergeFrom(const CmdScanLockResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.CmdScanLockResponse)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void CmdScanLockResponse::UnsafeMergeFrom(const CmdScanLockResponse& from) {
  GOOGLE_DCHECK(&from != this);
  locks_.MergeFrom(from.locks_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      mutable_error()->::kvrpcpb::KeyError::MergeFrom(from.error());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void CmdScanLockResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.CmdScanLockResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CmdScanLockResponse::CopyFrom(const CmdScanLockResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.CmdScanLockResponse)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool CmdScanLockResponse::IsInitialized() const {

  return true;
}

void CmdScanLockResponse::Swap(CmdScanLockResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CmdScanLockResponse::InternalSwap(CmdScanLockResponse* other) {
  std::swap(error_, other->error_);
  locks_.UnsafeArenaSwap(&other->locks_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CmdScanLockResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CmdScanLockResponse_descriptor_;
  metadata.reflection = CmdScanLockResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CmdScanLockResponse

// optional .kvrpcpb.KeyError error = 1;
bool CmdScanLockResponse::has_error() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CmdScanLockResponse::set_has_error() {
  _has_bits_[0] |= 0x00000001u;
}
void CmdScanLockResponse::clear_has_error() {
  _has_bits_[0] &= ~0x00000001u;
}
void CmdScanLockResponse::clear_error() {
  if (error_ != NULL) error_->::kvrpcpb::KeyError::Clear();
  clear_has_error();
}
const ::kvrpcpb::KeyError& CmdScanLockResponse::error() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.CmdScanLockResponse.error)
  return error_ != NULL ? *error_
                         : *::kvrpcpb::KeyError::internal_default_instance();
}
::kvrpcpb::KeyError* CmdScanLockResponse::mutable_error() {
  set_has_error();
  if (error_ == NULL) {
    error_ = new ::kvrpcpb::KeyError;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.CmdScanLockResponse.error)
  return error_;
}
::kvrpcpb::KeyError* CmdScanLockResponse::release_error() {
  // @@protoc_insertion_point(field_release:kvrpcpb.CmdScanLockResponse.error)
  clear_has_error();
  ::kvrpcpb::KeyError* temp = error_;
  error_ = NULL;
  return temp;
}
void CmdScanLockResponse::set_allocated_error(::kvrpcpb::KeyError* error) {
  delete error_;
  error_ = error;
  if (error) {
    set_has_error();
  } else {
    clear_has_error();
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.CmdScanLockResponse.error)
}

// repeated .kvrpcpb.LockInfo locks = 2;
int CmdScanLockResponse::locks_size() const {
  return locks_.size();
}
void CmdScanLockResponse::clear_locks() {
  locks_.Clear();
}
const ::kvrpcpb::LockInfo& CmdScanLockResponse::locks(int index) const {
  // @@protoc_insertion_point(field_get:kvrpcpb.CmdScanLockResponse.locks)
  return locks_.Get(index);
}
::kvrpcpb::LockInfo* CmdScanLockResponse::mutable_locks(int index) {
  // @@protoc_insertion_point(field_mutable:kvrpcpb.CmdScanLockResponse.locks)
  return locks_.Mutable(index);
}
::kvrpcpb::LockInfo* CmdScanLockResponse::add_locks() {
  // @@protoc_insertion_point(field_add:kvrpcpb.CmdScanLockResponse.locks)
  return locks_.Add();
}
::google::protobuf::RepeatedPtrField< ::kvrpcpb::LockInfo >*
CmdScanLockResponse::mutable_locks() {
  // @@protoc_insertion_point(field_mutable_list:kvrpcpb.CmdScanLockResponse.locks)
  return &locks_;
}
const ::google::protobuf::RepeatedPtrField< ::kvrpcpb::LockInfo >&
CmdScanLockResponse::locks() const {
  // @@protoc_insertion_point(field_list:kvrpcpb.CmdScanLockResponse.locks)
  return locks_;
}

inline const CmdScanLockResponse* CmdScanLockResponse::internal_default_instance() {
  return &CmdScanLockResponse_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CmdResolveLockRequest::kStartVersionFieldNumber;
const int CmdResolveLockRequest::kCommitVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CmdResolveLockRequest::CmdResolveLockRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_kvrpcpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.CmdResolveLockRequest)
}

void CmdResolveLockRequest::InitAsDefaultInstance() {
}

CmdResolveLockRequest::CmdResolveLockRequest(const CmdResolveLockRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.CmdResolveLockRequest)
}

void CmdResolveLockRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&start_version_, 0, reinterpret_cast<char*>(&commit_version_) -
    reinterpret_cast<char*>(&start_version_) + sizeof(commit_version_));
}

CmdResolveLockRequest::~CmdResolveLockRequest() {
  // @@protoc_insertion_point(destructor:kvrpcpb.CmdResolveLockRequest)
  SharedDtor();
}

void CmdResolveLockRequest::SharedDtor() {
}

void CmdResolveLockRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CmdResolveLockRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CmdResolveLockRequest_descriptor_;
}

const CmdResolveLockRequest& CmdResolveLockRequest::default_instance() {
  protobuf_InitDefaults_kvrpcpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<CmdResolveLockRequest> CmdResolveLockRequest_default_instance_;

CmdResolveLockRequest* CmdResolveLockRequest::New(::google::protobuf::Arena* arena) const {
  CmdResolveLockRequest* n = new CmdResolveLockRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CmdResolveLockRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.CmdResolveLockRequest)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(CmdResolveLockRequest, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CmdResolveLockRequest*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(start_version_, commit_version_);

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CmdResolveLockRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.CmdResolveLockRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 start_version = 1;
      case 1: {
        if (tag == 8) {
          set_has_start_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &start_version_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_commit_version;
        break;
      }

      // optional uint64 commit_version = 2;
      case 2: {
        if (tag == 16) {
         parse_commit_version:
          set_has_commit_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &commit_version_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.CmdResolveLockRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.CmdResolveLockRequest)
  return false;
#undef DO_
}

void CmdResolveLockRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.CmdResolveLockRequest)
  // optional uint64 start_version = 1;
  if (has_start_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->start_version(), output);
  }

  // optional uint64 commit_version = 2;
  if (has_commit_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->commit_version(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kvrpcpb.CmdResolveLockRequest)
}

::google::protobuf::uint8* CmdResolveLockRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.CmdResolveLockRequest)
  // optional uint64 start_version = 1;
  if (has_start_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->start_version(), target);
  }

  // optional uint64 commit_version = 2;
  if (has_commit_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->commit_version(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.CmdResolveLockRequest)
  return target;
}

size_t CmdResolveLockRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.CmdResolveLockRequest)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional uint64 start_version = 1;
    if (has_start_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->start_version());
    }

    // optional uint64 commit_version = 2;
    if (has_commit_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->commit_version());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CmdResolveLockRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.CmdResolveLockRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CmdResolveLockRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CmdResolveLockRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.CmdResolveLockRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.CmdResolveLockRequest)
    UnsafeMergeFrom(*source);
  }
}

void CmdResolveLockRequest::MergeFrom(const CmdResolveLockRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.CmdResolveLockRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void CmdResolveLockRequest::UnsafeMergeFrom(const CmdResolveLockRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_start_version()) {
      set_start_version(from.start_version());
    }
    if (from.has_commit_version()) {
      set_commit_version(from.commit_version());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void CmdResolveLockRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.CmdResolveLockRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CmdResolveLockRequest::CopyFrom(const CmdResolveLockRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.CmdResolveLockRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool CmdResolveLockRequest::IsInitialized() const {

  return true;
}

void CmdResolveLockRequest::Swap(CmdResolveLockRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CmdResolveLockRequest::InternalSwap(CmdResolveLockRequest* other) {
  std::swap(start_version_, other->start_version_);
  std::swap(commit_version_, other->commit_version_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CmdResolveLockRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CmdResolveLockRequest_descriptor_;
  metadata.reflection = CmdResolveLockRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CmdResolveLockRequest

// optional uint64 start_version = 1;
bool CmdResolveLockRequest::has_start_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CmdResolveLockRequest::set_has_start_version() {
  _has_bits_[0] |= 0x00000001u;
}
void CmdResolveLockRequest::clear_has_start_version() {
  _has_bits_[0] &= ~0x00000001u;
}
void CmdResolveLockRequest::clear_start_version() {
  start_version_ = GOOGLE_ULONGLONG(0);
  clear_has_start_version();
}
::google::protobuf::uint64 CmdResolveLockRequest::start_version() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.CmdResolveLockRequest.start_version)
  return start_version_;
}
void CmdResolveLockRequest::set_start_version(::google::protobuf::uint64 value) {
  set_has_start_version();
  start_version_ = value;
  // @@protoc_insertion_point(field_set:kvrpcpb.CmdResolveLockRequest.start_version)
}

// optional uint64 commit_version = 2;
bool CmdResolveLockRequest::has_commit_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CmdResolveLockRequest::set_has_commit_version() {
  _has_bits_[0] |= 0x00000002u;
}
void CmdResolveLockRequest::clear_has_commit_version() {
  _has_bits_[0] &= ~0x00000002u;
}
void CmdResolveLockRequest::clear_commit_version() {
  commit_version_ = GOOGLE_ULONGLONG(0);
  clear_has_commit_version();
}
::google::protobuf::uint64 CmdResolveLockRequest::commit_version() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.CmdResolveLockRequest.commit_version)
  return commit_version_;
}
void CmdResolveLockRequest::set_commit_version(::google::protobuf::uint64 value) {
  set_has_commit_version();
  commit_version_ = value;
  // @@protoc_insertion_point(field_set:kvrpcpb.CmdResolveLockRequest.commit_version)
}

inline const CmdResolveLockRequest* CmdResolveLockRequest::internal_default_instance() {
  return &CmdResolveLockRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CmdResolveLockResponse::kErrorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CmdResolveLockResponse::CmdResolveLockResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_kvrpcpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.CmdResolveLockResponse)
}

void CmdResolveLockResponse::InitAsDefaultInstance() {
  error_ = const_cast< ::kvrpcpb::KeyError*>(
      ::kvrpcpb::KeyError::internal_default_instance());
}

CmdResolveLockResponse::CmdResolveLockResponse(const CmdResolveLockResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.CmdResolveLockResponse)
}

void CmdResolveLockResponse::SharedCtor() {
  _cached_size_ = 0;
  error_ = NULL;
}

CmdResolveLockResponse::~CmdResolveLockResponse() {
  // @@protoc_insertion_point(destructor:kvrpcpb.CmdResolveLockResponse)
  SharedDtor();
}

void CmdResolveLockResponse::SharedDtor() {
  if (this != &CmdResolveLockResponse_default_instance_.get()) {
    delete error_;
  }
}

void CmdResolveLockResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CmdResolveLockResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CmdResolveLockResponse_descriptor_;
}

const CmdResolveLockResponse& CmdResolveLockResponse::default_instance() {
  protobuf_InitDefaults_kvrpcpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<CmdResolveLockResponse> CmdResolveLockResponse_default_instance_;

CmdResolveLockResponse* CmdResolveLockResponse::New(::google::protobuf::Arena* arena) const {
  CmdResolveLockResponse* n = new CmdResolveLockResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CmdResolveLockResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.CmdResolveLockResponse)
  if (has_error()) {
    if (error_ != NULL) error_->::kvrpcpb::KeyError::Clear();
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CmdResolveLockResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.CmdResolveLockResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .kvrpcpb.KeyError error = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.CmdResolveLockResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.CmdResolveLockResponse)
  return false;
#undef DO_
}

void CmdResolveLockResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.CmdResolveLockResponse)
  // optional .kvrpcpb.KeyError error = 1;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->error_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kvrpcpb.CmdResolveLockResponse)
}

::google::protobuf::uint8* CmdResolveLockResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.CmdResolveLockResponse)
  // optional .kvrpcpb.KeyError error = 1;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->error_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.CmdResolveLockResponse)
  return target;
}

size_t CmdResolveLockResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.CmdResolveLockResponse)
  size_t total_size = 0;

  // optional .kvrpcpb.KeyError error = 1;
  if (has_error()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->error_);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CmdResolveLockResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.CmdResolveLockResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CmdResolveLockResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CmdResolveLockResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.CmdResolveLockResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.CmdResolveLockResponse)
    UnsafeMergeFrom(*source);
  }
}

void CmdResolveLockResponse::MergeFrom(const CmdResolveLockResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.CmdResolveLockResponse)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void CmdResolveLockResponse::UnsafeMergeFrom(const CmdResolveLockResponse& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      mutable_error()->::kvrpcpb::KeyError::MergeFrom(from.error());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void CmdResolveLockResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.CmdResolveLockResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CmdResolveLockResponse::CopyFrom(const CmdResolveLockResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.CmdResolveLockResponse)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool CmdResolveLockResponse::IsInitialized() const {

  return true;
}

void CmdResolveLockResponse::Swap(CmdResolveLockResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CmdResolveLockResponse::InternalSwap(CmdResolveLockResponse* other) {
  std::swap(error_, other->error_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CmdResolveLockResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CmdResolveLockResponse_descriptor_;
  metadata.reflection = CmdResolveLockResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CmdResolveLockResponse

// optional .kvrpcpb.KeyError error = 1;
bool CmdResolveLockResponse::has_error() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CmdResolveLockResponse::set_has_error() {
  _has_bits_[0] |= 0x00000001u;
}
void CmdResolveLockResponse::clear_has_error() {
  _has_bits_[0] &= ~0x00000001u;
}
void CmdResolveLockResponse::clear_error() {
  if (error_ != NULL) error_->::kvrpcpb::KeyError::Clear();
  clear_has_error();
}
const ::kvrpcpb::KeyError& CmdResolveLockResponse::error() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.CmdResolveLockResponse.error)
  return error_ != NULL ? *error_
                         : *::kvrpcpb::KeyError::internal_default_instance();
}
::kvrpcpb::KeyError* CmdResolveLockResponse::mutable_error() {
  set_has_error();
  if (error_ == NULL) {
    error_ = new ::kvrpcpb::KeyError;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.CmdResolveLockResponse.error)
  return error_;
}
::kvrpcpb::KeyError* CmdResolveLockResponse::release_error() {
  // @@protoc_insertion_point(field_release:kvrpcpb.CmdResolveLockResponse.error)
  clear_has_error();
  ::kvrpcpb::KeyError* temp = error_;
  error_ = NULL;
  return temp;
}
void CmdResolveLockResponse::set_allocated_error(::kvrpcpb::KeyError* error) {
  delete error_;
  error_ = error;
  if (error) {
    set_has_error();
  } else {
    clear_has_error();
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.CmdResolveLockResponse.error)
}

inline const CmdResolveLockResponse* CmdResolveLockResponse::internal_default_instance() {
  return &CmdResolveLockResponse_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CmdGCRequest::kSafePointFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CmdGCRequest::CmdGCRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_kvrpcpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.CmdGCRequest)
}

void CmdGCRequest::InitAsDefaultInstance() {
}

CmdGCRequest::CmdGCRequest(const CmdGCRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.CmdGCRequest)
}

void CmdGCRequest::SharedCtor() {
  _cached_size_ = 0;
  safe_point_ = GOOGLE_ULONGLONG(0);
}

CmdGCRequest::~CmdGCRequest() {
  // @@protoc_insertion_point(destructor:kvrpcpb.CmdGCRequest)
  SharedDtor();
}

void CmdGCRequest::SharedDtor() {
}

void CmdGCRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CmdGCRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CmdGCRequest_descriptor_;
}

const CmdGCRequest& CmdGCRequest::default_instance() {
  protobuf_InitDefaults_kvrpcpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<CmdGCRequest> CmdGCRequest_default_instance_;

CmdGCRequest* CmdGCRequest::New(::google::protobuf::Arena* arena) const {
  CmdGCRequest* n = new CmdGCRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CmdGCRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.CmdGCRequest)
  safe_point_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CmdGCRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.CmdGCRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 safe_point = 1;
      case 1: {
        if (tag == 8) {
          set_has_safe_point();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &safe_point_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.CmdGCRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.CmdGCRequest)
  return false;
#undef DO_
}

void CmdGCRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.CmdGCRequest)
  // optional uint64 safe_point = 1;
  if (has_safe_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->safe_point(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kvrpcpb.CmdGCRequest)
}

::google::protobuf::uint8* CmdGCRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.CmdGCRequest)
  // optional uint64 safe_point = 1;
  if (has_safe_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->safe_point(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.CmdGCRequest)
  return target;
}

size_t CmdGCRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.CmdGCRequest)
  size_t total_size = 0;

  // optional uint64 safe_point = 1;
  if (has_safe_point()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->safe_point());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CmdGCRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.CmdGCRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CmdGCRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CmdGCRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.CmdGCRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.CmdGCRequest)
    UnsafeMergeFrom(*source);
  }
}

void CmdGCRequest::MergeFrom(const CmdGCRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.CmdGCRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void CmdGCRequest::UnsafeMergeFrom(const CmdGCRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_safe_point()) {
      set_safe_point(from.safe_point());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void CmdGCRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.CmdGCRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CmdGCRequest::CopyFrom(const CmdGCRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.CmdGCRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool CmdGCRequest::IsInitialized() const {

  return true;
}

void CmdGCRequest::Swap(CmdGCRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CmdGCRequest::InternalSwap(CmdGCRequest* other) {
  std::swap(safe_point_, other->safe_point_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CmdGCRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CmdGCRequest_descriptor_;
  metadata.reflection = CmdGCRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CmdGCRequest

// optional uint64 safe_point = 1;
bool CmdGCRequest::has_safe_point() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CmdGCRequest::set_has_safe_point() {
  _has_bits_[0] |= 0x00000001u;
}
void CmdGCRequest::clear_has_safe_point() {
  _has_bits_[0] &= ~0x00000001u;
}
void CmdGCRequest::clear_safe_point() {
  safe_point_ = GOOGLE_ULONGLONG(0);
  clear_has_safe_point();
}
::google::protobuf::uint64 CmdGCRequest::safe_point() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.CmdGCRequest.safe_point)
  return safe_point_;
}
void CmdGCRequest::set_safe_point(::google::protobuf::uint64 value) {
  set_has_safe_point();
  safe_point_ = value;
  // @@protoc_insertion_point(field_set:kvrpcpb.CmdGCRequest.safe_point)
}

inline const CmdGCRequest* CmdGCRequest::internal_default_instance() {
  return &CmdGCRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CmdGCResponse::kErrorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CmdGCResponse::CmdGCResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_kvrpcpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.CmdGCResponse)
}

void CmdGCResponse::InitAsDefaultInstance() {
  error_ = const_cast< ::kvrpcpb::KeyError*>(
      ::kvrpcpb::KeyError::internal_default_instance());
}

CmdGCResponse::CmdGCResponse(const CmdGCResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.CmdGCResponse)
}

void CmdGCResponse::SharedCtor() {
  _cached_size_ = 0;
  error_ = NULL;
}

CmdGCResponse::~CmdGCResponse() {
  // @@protoc_insertion_point(destructor:kvrpcpb.CmdGCResponse)
  SharedDtor();
}

void CmdGCResponse::SharedDtor() {
  if (this != &CmdGCResponse_default_instance_.get()) {
    delete error_;
  }
}

void CmdGCResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CmdGCResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CmdGCResponse_descriptor_;
}

const CmdGCResponse& CmdGCResponse::default_instance() {
  protobuf_InitDefaults_kvrpcpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<CmdGCResponse> CmdGCResponse_default_instance_;

CmdGCResponse* CmdGCResponse::New(::google::protobuf::Arena* arena) const {
  CmdGCResponse* n = new CmdGCResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CmdGCResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.CmdGCResponse)
  if (has_error()) {
    if (error_ != NULL) error_->::kvrpcpb::KeyError::Clear();
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CmdGCResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.CmdGCResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .kvrpcpb.KeyError error = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.CmdGCResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.CmdGCResponse)
  return false;
#undef DO_
}

void CmdGCResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.CmdGCResponse)
  // optional .kvrpcpb.KeyError error = 1;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->error_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kvrpcpb.CmdGCResponse)
}

::google::protobuf::uint8* CmdGCResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.CmdGCResponse)
  // optional .kvrpcpb.KeyError error = 1;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->error_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.CmdGCResponse)
  return target;
}

size_t CmdGCResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.CmdGCResponse)
  size_t total_size = 0;

  // optional .kvrpcpb.KeyError error = 1;
  if (has_error()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->error_);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CmdGCResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.CmdGCResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CmdGCResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CmdGCResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.CmdGCResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.CmdGCResponse)
    UnsafeMergeFrom(*source);
  }
}

void CmdGCResponse::MergeFrom(const CmdGCResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.CmdGCResponse)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void CmdGCResponse::UnsafeMergeFrom(const CmdGCResponse& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      mutable_error()->::kvrpcpb::KeyError::MergeFrom(from.error());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void CmdGCResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.CmdGCResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CmdGCResponse::CopyFrom(const CmdGCResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.CmdGCResponse)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool CmdGCResponse::IsInitialized() const {

  return true;
}

void CmdGCResponse::Swap(CmdGCResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CmdGCResponse::InternalSwap(CmdGCResponse* other) {
  std::swap(error_, other->error_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CmdGCResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CmdGCResponse_descriptor_;
  metadata.reflection = CmdGCResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CmdGCResponse

// optional .kvrpcpb.KeyError error = 1;
bool CmdGCResponse::has_error() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CmdGCResponse::set_has_error() {
  _has_bits_[0] |= 0x00000001u;
}
void CmdGCResponse::clear_has_error() {
  _has_bits_[0] &= ~0x00000001u;
}
void CmdGCResponse::clear_error() {
  if (error_ != NULL) error_->::kvrpcpb::KeyError::Clear();
  clear_has_error();
}
const ::kvrpcpb::KeyError& CmdGCResponse::error() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.CmdGCResponse.error)
  return error_ != NULL ? *error_
                         : *::kvrpcpb::KeyError::internal_default_instance();
}
::kvrpcpb::KeyError* CmdGCResponse::mutable_error() {
  set_has_error();
  if (error_ == NULL) {
    error_ = new ::kvrpcpb::KeyError;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.CmdGCResponse.error)
  return error_;
}
::kvrpcpb::KeyError* CmdGCResponse::release_error() {
  // @@protoc_insertion_point(field_release:kvrpcpb.CmdGCResponse.error)
  clear_has_error();
  ::kvrpcpb::KeyError* temp = error_;
  error_ = NULL;
  return temp;
}
void CmdGCResponse::set_allocated_error(::kvrpcpb::KeyError* error) {
  delete error_;
  error_ = error;
  if (error) {
    set_has_error();
  } else {
    clear_has_error();
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.CmdGCResponse.error)
}

inline const CmdGCResponse* CmdGCResponse::internal_default_instance() {
  return &CmdGCResponse_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CmdRawGetRequest::kKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CmdRawGetRequest::CmdRawGetRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_kvrpcpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.CmdRawGetRequest)
}

void CmdRawGetRequest::InitAsDefaultInstance() {
}

CmdRawGetRequest::CmdRawGetRequest(const CmdRawGetRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.CmdRawGetRequest)
}

void CmdRawGetRequest::SharedCtor() {
  _cached_size_ = 0;
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CmdRawGetRequest::~CmdRawGetRequest() {
  // @@protoc_insertion_point(destructor:kvrpcpb.CmdRawGetRequest)
  SharedDtor();
}

void CmdRawGetRequest::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CmdRawGetRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CmdRawGetRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CmdRawGetRequest_descriptor_;
}

const CmdRawGetRequest& CmdRawGetRequest::default_instance() {
  protobuf_InitDefaults_kvrpcpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<CmdRawGetRequest> CmdRawGetRequest_default_instance_;

CmdRawGetRequest* CmdRawGetRequest::New(::google::protobuf::Arena* arena) const {
  CmdRawGetRequest* n = new CmdRawGetRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CmdRawGetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.CmdRawGetRequest)
  if (has_key()) {
    key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CmdRawGetRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.CmdRawGetRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.CmdRawGetRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.CmdRawGetRequest)
  return false;
#undef DO_
}

void CmdRawGetRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.CmdRawGetRequest)
  // optional bytes key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->key(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kvrpcpb.CmdRawGetRequest)
}

::google::protobuf::uint8* CmdRawGetRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.CmdRawGetRequest)
  // optional bytes key = 1;
  if (has_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->key(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.CmdRawGetRequest)
  return target;
}

size_t CmdRawGetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.CmdRawGetRequest)
  size_t total_size = 0;

  // optional bytes key = 1;
  if (has_key()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->key());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CmdRawGetRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.CmdRawGetRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CmdRawGetRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CmdRawGetRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.CmdRawGetRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.CmdRawGetRequest)
    UnsafeMergeFrom(*source);
  }
}

void CmdRawGetRequest::MergeFrom(const CmdRawGetRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.CmdRawGetRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void CmdRawGetRequest::UnsafeMergeFrom(const CmdRawGetRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_has_key();
      key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void CmdRawGetRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.CmdRawGetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CmdRawGetRequest::CopyFrom(const CmdRawGetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.CmdRawGetRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool CmdRawGetRequest::IsInitialized() const {

  return true;
}

void CmdRawGetRequest::Swap(CmdRawGetRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CmdRawGetRequest::InternalSwap(CmdRawGetRequest* other) {
  key_.Swap(&other->key_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CmdRawGetRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CmdRawGetRequest_descriptor_;
  metadata.reflection = CmdRawGetRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CmdRawGetRequest

// optional bytes key = 1;
bool CmdRawGetRequest::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CmdRawGetRequest::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
void CmdRawGetRequest::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
void CmdRawGetRequest::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
const ::std::string& CmdRawGetRequest::key() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.CmdRawGetRequest.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CmdRawGetRequest::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kvrpcpb.CmdRawGetRequest.key)
}
void CmdRawGetRequest::set_key(const char* value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kvrpcpb.CmdRawGetRequest.key)
}
void CmdRawGetRequest::set_key(const void* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kvrpcpb.CmdRawGetRequest.key)
}
::std::string* CmdRawGetRequest::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:kvrpcpb.CmdRawGetRequest.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CmdRawGetRequest::release_key() {
  // @@protoc_insertion_point(field_release:kvrpcpb.CmdRawGetRequest.key)
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CmdRawGetRequest::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.CmdRawGetRequest.key)
}

inline const CmdRawGetRequest* CmdRawGetRequest::internal_default_instance() {
  return &CmdRawGetRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CmdRawGetResponse::kErrorFieldNumber;
const int CmdRawGetResponse::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CmdRawGetResponse::CmdRawGetResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_kvrpcpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.CmdRawGetResponse)
}

void CmdRawGetResponse::InitAsDefaultInstance() {
}

CmdRawGetResponse::CmdRawGetResponse(const CmdRawGetResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.CmdRawGetResponse)
}

void CmdRawGetResponse::SharedCtor() {
  _cached_size_ = 0;
  error_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CmdRawGetResponse::~CmdRawGetResponse() {
  // @@protoc_insertion_point(destructor:kvrpcpb.CmdRawGetResponse)
  SharedDtor();
}

void CmdRawGetResponse::SharedDtor() {
  error_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CmdRawGetResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CmdRawGetResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CmdRawGetResponse_descriptor_;
}

const CmdRawGetResponse& CmdRawGetResponse::default_instance() {
  protobuf_InitDefaults_kvrpcpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<CmdRawGetResponse> CmdRawGetResponse_default_instance_;

CmdRawGetResponse* CmdRawGetResponse::New(::google::protobuf::Arena* arena) const {
  CmdRawGetResponse* n = new CmdRawGetResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CmdRawGetResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.CmdRawGetResponse)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_error()) {
      error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_value()) {
      value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CmdRawGetResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.CmdRawGetResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string error = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->error().data(), this->error().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "kvrpcpb.CmdRawGetResponse.error");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // optional bytes value = 2;
      case 2: {
        if (tag == 18) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.CmdRawGetResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.CmdRawGetResponse)
  return false;
#undef DO_
}

void CmdRawGetResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.CmdRawGetResponse)
  // optional string error = 1;
  if (has_error()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kvrpcpb.CmdRawGetResponse.error");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->error(), output);
  }

  // optional bytes value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kvrpcpb.CmdRawGetResponse)
}

::google::protobuf::uint8* CmdRawGetResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.CmdRawGetResponse)
  // optional string error = 1;
  if (has_error()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kvrpcpb.CmdRawGetResponse.error");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->error(), target);
  }

  // optional bytes value = 2;
  if (has_value()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.CmdRawGetResponse)
  return target;
}

size_t CmdRawGetResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.CmdRawGetResponse)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional string error = 1;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->error());
    }

    // optional bytes value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->value());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CmdRawGetResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.CmdRawGetResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CmdRawGetResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CmdRawGetResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.CmdRawGetResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.CmdRawGetResponse)
    UnsafeMergeFrom(*source);
  }
}

void CmdRawGetResponse::MergeFrom(const CmdRawGetResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.CmdRawGetResponse)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void CmdRawGetResponse::UnsafeMergeFrom(const CmdRawGetResponse& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      set_has_error();
      error_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_);
    }
    if (from.has_value()) {
      set_has_value();
      value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void CmdRawGetResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.CmdRawGetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CmdRawGetResponse::CopyFrom(const CmdRawGetResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.CmdRawGetResponse)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool CmdRawGetResponse::IsInitialized() const {

  return true;
}

void CmdRawGetResponse::Swap(CmdRawGetResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CmdRawGetResponse::InternalSwap(CmdRawGetResponse* other) {
  error_.Swap(&other->error_);
  value_.Swap(&other->value_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CmdRawGetResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CmdRawGetResponse_descriptor_;
  metadata.reflection = CmdRawGetResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CmdRawGetResponse

// optional string error = 1;
bool CmdRawGetResponse::has_error() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CmdRawGetResponse::set_has_error() {
  _has_bits_[0] |= 0x00000001u;
}
void CmdRawGetResponse::clear_has_error() {
  _has_bits_[0] &= ~0x00000001u;
}
void CmdRawGetResponse::clear_error() {
  error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_error();
}
const ::std::string& CmdRawGetResponse::error() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.CmdRawGetResponse.error)
  return error_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CmdRawGetResponse::set_error(const ::std::string& value) {
  set_has_error();
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kvrpcpb.CmdRawGetResponse.error)
}
void CmdRawGetResponse::set_error(const char* value) {
  set_has_error();
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kvrpcpb.CmdRawGetResponse.error)
}
void CmdRawGetResponse::set_error(const char* value, size_t size) {
  set_has_error();
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kvrpcpb.CmdRawGetResponse.error)
}
::std::string* CmdRawGetResponse::mutable_error() {
  set_has_error();
  // @@protoc_insertion_point(field_mutable:kvrpcpb.CmdRawGetResponse.error)
  return error_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CmdRawGetResponse::release_error() {
  // @@protoc_insertion_point(field_release:kvrpcpb.CmdRawGetResponse.error)
  clear_has_error();
  return error_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CmdRawGetResponse::set_allocated_error(::std::string* error) {
  if (error != NULL) {
    set_has_error();
  } else {
    clear_has_error();
  }
  error_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error);
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.CmdRawGetResponse.error)
}

// optional bytes value = 2;
bool CmdRawGetResponse::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CmdRawGetResponse::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
void CmdRawGetResponse::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
void CmdRawGetResponse::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}
const ::std::string& CmdRawGetResponse::value() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.CmdRawGetResponse.value)
  return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CmdRawGetResponse::set_value(const ::std::string& value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kvrpcpb.CmdRawGetResponse.value)
}
void CmdRawGetResponse::set_value(const char* value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kvrpcpb.CmdRawGetResponse.value)
}
void CmdRawGetResponse::set_value(const void* value, size_t size) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kvrpcpb.CmdRawGetResponse.value)
}
::std::string* CmdRawGetResponse::mutable_value() {
  set_has_value();
  // @@protoc_insertion_point(field_mutable:kvrpcpb.CmdRawGetResponse.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CmdRawGetResponse::release_value() {
  // @@protoc_insertion_point(field_release:kvrpcpb.CmdRawGetResponse.value)
  clear_has_value();
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CmdRawGetResponse::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    set_has_value();
  } else {
    clear_has_value();
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.CmdRawGetResponse.value)
}

inline const CmdRawGetResponse* CmdRawGetResponse::internal_default_instance() {
  return &CmdRawGetResponse_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CmdRawPutRequest::kKeyFieldNumber;
const int CmdRawPutRequest::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CmdRawPutRequest::CmdRawPutRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_kvrpcpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.CmdRawPutRequest)
}

void CmdRawPutRequest::InitAsDefaultInstance() {
}

CmdRawPutRequest::CmdRawPutRequest(const CmdRawPutRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.CmdRawPutRequest)
}

void CmdRawPutRequest::SharedCtor() {
  _cached_size_ = 0;
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CmdRawPutRequest::~CmdRawPutRequest() {
  // @@protoc_insertion_point(destructor:kvrpcpb.CmdRawPutRequest)
  SharedDtor();
}

void CmdRawPutRequest::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CmdRawPutRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CmdRawPutRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CmdRawPutRequest_descriptor_;
}

const CmdRawPutRequest& CmdRawPutRequest::default_instance() {
  protobuf_InitDefaults_kvrpcpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<CmdRawPutRequest> CmdRawPutRequest_default_instance_;

CmdRawPutRequest* CmdRawPutRequest::New(::google::protobuf::Arena* arena) const {
  CmdRawPutRequest* n = new CmdRawPutRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CmdRawPutRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.CmdRawPutRequest)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_key()) {
      key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_value()) {
      value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CmdRawPutRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.CmdRawPutRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // optional bytes value = 2;
      case 2: {
        if (tag == 18) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.CmdRawPutRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.CmdRawPutRequest)
  return false;
#undef DO_
}

void CmdRawPutRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.CmdRawPutRequest)
  // optional bytes key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->key(), output);
  }

  // optional bytes value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kvrpcpb.CmdRawPutRequest)
}

::google::protobuf::uint8* CmdRawPutRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.CmdRawPutRequest)
  // optional bytes key = 1;
  if (has_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->key(), target);
  }

  // optional bytes value = 2;
  if (has_value()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.CmdRawPutRequest)
  return target;
}

size_t CmdRawPutRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.CmdRawPutRequest)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional bytes key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->key());
    }

    // optional bytes value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->value());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CmdRawPutRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.CmdRawPutRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CmdRawPutRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CmdRawPutRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.CmdRawPutRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.CmdRawPutRequest)
    UnsafeMergeFrom(*source);
  }
}

void CmdRawPutRequest::MergeFrom(const CmdRawPutRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.CmdRawPutRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void CmdRawPutRequest::UnsafeMergeFrom(const CmdRawPutRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_has_key();
      key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
    }
    if (from.has_value()) {
      set_has_value();
      value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void CmdRawPutRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.CmdRawPutRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CmdRawPutRequest::CopyFrom(const CmdRawPutRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.CmdRawPutRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool CmdRawPutRequest::IsInitialized() const {

  return true;
}

void CmdRawPutRequest::Swap(CmdRawPutRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CmdRawPutRequest::InternalSwap(CmdRawPutRequest* other) {
  key_.Swap(&other->key_);
  value_.Swap(&other->value_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CmdRawPutRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CmdRawPutRequest_descriptor_;
  metadata.reflection = CmdRawPutRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CmdRawPutRequest

// optional bytes key = 1;
bool CmdRawPutRequest::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CmdRawPutRequest::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
void CmdRawPutRequest::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
void CmdRawPutRequest::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
const ::std::string& CmdRawPutRequest::key() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.CmdRawPutRequest.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CmdRawPutRequest::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kvrpcpb.CmdRawPutRequest.key)
}
void CmdRawPutRequest::set_key(const char* value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kvrpcpb.CmdRawPutRequest.key)
}
void CmdRawPutRequest::set_key(const void* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kvrpcpb.CmdRawPutRequest.key)
}
::std::string* CmdRawPutRequest::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:kvrpcpb.CmdRawPutRequest.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CmdRawPutRequest::release_key() {
  // @@protoc_insertion_point(field_release:kvrpcpb.CmdRawPutRequest.key)
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CmdRawPutRequest::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.CmdRawPutRequest.key)
}

// optional bytes value = 2;
bool CmdRawPutRequest::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CmdRawPutRequest::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
void CmdRawPutRequest::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
void CmdRawPutRequest::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}
const ::std::string& CmdRawPutRequest::value() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.CmdRawPutRequest.value)
  return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CmdRawPutRequest::set_value(const ::std::string& value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kvrpcpb.CmdRawPutRequest.value)
}
void CmdRawPutRequest::set_value(const char* value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kvrpcpb.CmdRawPutRequest.value)
}
void CmdRawPutRequest::set_value(const void* value, size_t size) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kvrpcpb.CmdRawPutRequest.value)
}
::std::string* CmdRawPutRequest::mutable_value() {
  set_has_value();
  // @@protoc_insertion_point(field_mutable:kvrpcpb.CmdRawPutRequest.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CmdRawPutRequest::release_value() {
  // @@protoc_insertion_point(field_release:kvrpcpb.CmdRawPutRequest.value)
  clear_has_value();
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CmdRawPutRequest::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    set_has_value();
  } else {
    clear_has_value();
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.CmdRawPutRequest.value)
}

inline const CmdRawPutRequest* CmdRawPutRequest::internal_default_instance() {
  return &CmdRawPutRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CmdRawPutResponse::kErrorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CmdRawPutResponse::CmdRawPutResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_kvrpcpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.CmdRawPutResponse)
}

void CmdRawPutResponse::InitAsDefaultInstance() {
}

CmdRawPutResponse::CmdRawPutResponse(const CmdRawPutResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.CmdRawPutResponse)
}

void CmdRawPutResponse::SharedCtor() {
  _cached_size_ = 0;
  error_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CmdRawPutResponse::~CmdRawPutResponse() {
  // @@protoc_insertion_point(destructor:kvrpcpb.CmdRawPutResponse)
  SharedDtor();
}

void CmdRawPutResponse::SharedDtor() {
  error_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CmdRawPutResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CmdRawPutResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CmdRawPutResponse_descriptor_;
}

const CmdRawPutResponse& CmdRawPutResponse::default_instance() {
  protobuf_InitDefaults_kvrpcpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<CmdRawPutResponse> CmdRawPutResponse_default_instance_;

CmdRawPutResponse* CmdRawPutResponse::New(::google::protobuf::Arena* arena) const {
  CmdRawPutResponse* n = new CmdRawPutResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CmdRawPutResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.CmdRawPutResponse)
  if (has_error()) {
    error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CmdRawPutResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.CmdRawPutResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string error = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->error().data(), this->error().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "kvrpcpb.CmdRawPutResponse.error");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.CmdRawPutResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.CmdRawPutResponse)
  return false;
#undef DO_
}

void CmdRawPutResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.CmdRawPutResponse)
  // optional string error = 1;
  if (has_error()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kvrpcpb.CmdRawPutResponse.error");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->error(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kvrpcpb.CmdRawPutResponse)
}

::google::protobuf::uint8* CmdRawPutResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.CmdRawPutResponse)
  // optional string error = 1;
  if (has_error()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kvrpcpb.CmdRawPutResponse.error");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->error(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.CmdRawPutResponse)
  return target;
}

size_t CmdRawPutResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.CmdRawPutResponse)
  size_t total_size = 0;

  // optional string error = 1;
  if (has_error()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->error());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CmdRawPutResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.CmdRawPutResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CmdRawPutResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CmdRawPutResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.CmdRawPutResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.CmdRawPutResponse)
    UnsafeMergeFrom(*source);
  }
}

void CmdRawPutResponse::MergeFrom(const CmdRawPutResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.CmdRawPutResponse)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void CmdRawPutResponse::UnsafeMergeFrom(const CmdRawPutResponse& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      set_has_error();
      error_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void CmdRawPutResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.CmdRawPutResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CmdRawPutResponse::CopyFrom(const CmdRawPutResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.CmdRawPutResponse)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool CmdRawPutResponse::IsInitialized() const {

  return true;
}

void CmdRawPutResponse::Swap(CmdRawPutResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CmdRawPutResponse::InternalSwap(CmdRawPutResponse* other) {
  error_.Swap(&other->error_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CmdRawPutResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CmdRawPutResponse_descriptor_;
  metadata.reflection = CmdRawPutResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CmdRawPutResponse

// optional string error = 1;
bool CmdRawPutResponse::has_error() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CmdRawPutResponse::set_has_error() {
  _has_bits_[0] |= 0x00000001u;
}
void CmdRawPutResponse::clear_has_error() {
  _has_bits_[0] &= ~0x00000001u;
}
void CmdRawPutResponse::clear_error() {
  error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_error();
}
const ::std::string& CmdRawPutResponse::error() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.CmdRawPutResponse.error)
  return error_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CmdRawPutResponse::set_error(const ::std::string& value) {
  set_has_error();
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kvrpcpb.CmdRawPutResponse.error)
}
void CmdRawPutResponse::set_error(const char* value) {
  set_has_error();
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kvrpcpb.CmdRawPutResponse.error)
}
void CmdRawPutResponse::set_error(const char* value, size_t size) {
  set_has_error();
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kvrpcpb.CmdRawPutResponse.error)
}
::std::string* CmdRawPutResponse::mutable_error() {
  set_has_error();
  // @@protoc_insertion_point(field_mutable:kvrpcpb.CmdRawPutResponse.error)
  return error_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CmdRawPutResponse::release_error() {
  // @@protoc_insertion_point(field_release:kvrpcpb.CmdRawPutResponse.error)
  clear_has_error();
  return error_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CmdRawPutResponse::set_allocated_error(::std::string* error) {
  if (error != NULL) {
    set_has_error();
  } else {
    clear_has_error();
  }
  error_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error);
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.CmdRawPutResponse.error)
}

inline const CmdRawPutResponse* CmdRawPutResponse::internal_default_instance() {
  return &CmdRawPutResponse_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CmdRawDeleteRequest::kKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CmdRawDeleteRequest::CmdRawDeleteRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_kvrpcpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.CmdRawDeleteRequest)
}

void CmdRawDeleteRequest::InitAsDefaultInstance() {
}

CmdRawDeleteRequest::CmdRawDeleteRequest(const CmdRawDeleteRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.CmdRawDeleteRequest)
}

void CmdRawDeleteRequest::SharedCtor() {
  _cached_size_ = 0;
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CmdRawDeleteRequest::~CmdRawDeleteRequest() {
  // @@protoc_insertion_point(destructor:kvrpcpb.CmdRawDeleteRequest)
  SharedDtor();
}

void CmdRawDeleteRequest::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CmdRawDeleteRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CmdRawDeleteRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CmdRawDeleteRequest_descriptor_;
}

const CmdRawDeleteRequest& CmdRawDeleteRequest::default_instance() {
  protobuf_InitDefaults_kvrpcpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<CmdRawDeleteRequest> CmdRawDeleteRequest_default_instance_;

CmdRawDeleteRequest* CmdRawDeleteRequest::New(::google::protobuf::Arena* arena) const {
  CmdRawDeleteRequest* n = new CmdRawDeleteRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CmdRawDeleteRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.CmdRawDeleteRequest)
  if (has_key()) {
    key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CmdRawDeleteRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.CmdRawDeleteRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.CmdRawDeleteRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.CmdRawDeleteRequest)
  return false;
#undef DO_
}

void CmdRawDeleteRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.CmdRawDeleteRequest)
  // optional bytes key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->key(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kvrpcpb.CmdRawDeleteRequest)
}

::google::protobuf::uint8* CmdRawDeleteRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.CmdRawDeleteRequest)
  // optional bytes key = 1;
  if (has_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->key(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.CmdRawDeleteRequest)
  return target;
}

size_t CmdRawDeleteRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.CmdRawDeleteRequest)
  size_t total_size = 0;

  // optional bytes key = 1;
  if (has_key()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->key());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CmdRawDeleteRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.CmdRawDeleteRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CmdRawDeleteRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CmdRawDeleteRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.CmdRawDeleteRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.CmdRawDeleteRequest)
    UnsafeMergeFrom(*source);
  }
}

void CmdRawDeleteRequest::MergeFrom(const CmdRawDeleteRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.CmdRawDeleteRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void CmdRawDeleteRequest::UnsafeMergeFrom(const CmdRawDeleteRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_has_key();
      key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void CmdRawDeleteRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.CmdRawDeleteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CmdRawDeleteRequest::CopyFrom(const CmdRawDeleteRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.CmdRawDeleteRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool CmdRawDeleteRequest::IsInitialized() const {

  return true;
}

void CmdRawDeleteRequest::Swap(CmdRawDeleteRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CmdRawDeleteRequest::InternalSwap(CmdRawDeleteRequest* other) {
  key_.Swap(&other->key_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CmdRawDeleteRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CmdRawDeleteRequest_descriptor_;
  metadata.reflection = CmdRawDeleteRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CmdRawDeleteRequest

// optional bytes key = 1;
bool CmdRawDeleteRequest::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CmdRawDeleteRequest::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
void CmdRawDeleteRequest::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
void CmdRawDeleteRequest::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
const ::std::string& CmdRawDeleteRequest::key() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.CmdRawDeleteRequest.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CmdRawDeleteRequest::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kvrpcpb.CmdRawDeleteRequest.key)
}
void CmdRawDeleteRequest::set_key(const char* value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kvrpcpb.CmdRawDeleteRequest.key)
}
void CmdRawDeleteRequest::set_key(const void* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kvrpcpb.CmdRawDeleteRequest.key)
}
::std::string* CmdRawDeleteRequest::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:kvrpcpb.CmdRawDeleteRequest.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CmdRawDeleteRequest::release_key() {
  // @@protoc_insertion_point(field_release:kvrpcpb.CmdRawDeleteRequest.key)
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CmdRawDeleteRequest::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.CmdRawDeleteRequest.key)
}

inline const CmdRawDeleteRequest* CmdRawDeleteRequest::internal_default_instance() {
  return &CmdRawDeleteRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CmdRawDeleteResponse::kErrorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CmdRawDeleteResponse::CmdRawDeleteResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_kvrpcpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.CmdRawDeleteResponse)
}

void CmdRawDeleteResponse::InitAsDefaultInstance() {
}

CmdRawDeleteResponse::CmdRawDeleteResponse(const CmdRawDeleteResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.CmdRawDeleteResponse)
}

void CmdRawDeleteResponse::SharedCtor() {
  _cached_size_ = 0;
  error_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CmdRawDeleteResponse::~CmdRawDeleteResponse() {
  // @@protoc_insertion_point(destructor:kvrpcpb.CmdRawDeleteResponse)
  SharedDtor();
}

void CmdRawDeleteResponse::SharedDtor() {
  error_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CmdRawDeleteResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CmdRawDeleteResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CmdRawDeleteResponse_descriptor_;
}

const CmdRawDeleteResponse& CmdRawDeleteResponse::default_instance() {
  protobuf_InitDefaults_kvrpcpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<CmdRawDeleteResponse> CmdRawDeleteResponse_default_instance_;

CmdRawDeleteResponse* CmdRawDeleteResponse::New(::google::protobuf::Arena* arena) const {
  CmdRawDeleteResponse* n = new CmdRawDeleteResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CmdRawDeleteResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.CmdRawDeleteResponse)
  if (has_error()) {
    error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CmdRawDeleteResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.CmdRawDeleteResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string error = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->error().data(), this->error().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "kvrpcpb.CmdRawDeleteResponse.error");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.CmdRawDeleteResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.CmdRawDeleteResponse)
  return false;
#undef DO_
}

void CmdRawDeleteResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.CmdRawDeleteResponse)
  // optional string error = 1;
  if (has_error()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kvrpcpb.CmdRawDeleteResponse.error");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->error(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kvrpcpb.CmdRawDeleteResponse)
}

::google::protobuf::uint8* CmdRawDeleteResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.CmdRawDeleteResponse)
  // optional string error = 1;
  if (has_error()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kvrpcpb.CmdRawDeleteResponse.error");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->error(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.CmdRawDeleteResponse)
  return target;
}

size_t CmdRawDeleteResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.CmdRawDeleteResponse)
  size_t total_size = 0;

  // optional string error = 1;
  if (has_error()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->error());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CmdRawDeleteResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.CmdRawDeleteResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CmdRawDeleteResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CmdRawDeleteResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.CmdRawDeleteResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.CmdRawDeleteResponse)
    UnsafeMergeFrom(*source);
  }
}

void CmdRawDeleteResponse::MergeFrom(const CmdRawDeleteResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.CmdRawDeleteResponse)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void CmdRawDeleteResponse::UnsafeMergeFrom(const CmdRawDeleteResponse& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      set_has_error();
      error_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void CmdRawDeleteResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.CmdRawDeleteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CmdRawDeleteResponse::CopyFrom(const CmdRawDeleteResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.CmdRawDeleteResponse)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool CmdRawDeleteResponse::IsInitialized() const {

  return true;
}

void CmdRawDeleteResponse::Swap(CmdRawDeleteResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CmdRawDeleteResponse::InternalSwap(CmdRawDeleteResponse* other) {
  error_.Swap(&other->error_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CmdRawDeleteResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CmdRawDeleteResponse_descriptor_;
  metadata.reflection = CmdRawDeleteResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CmdRawDeleteResponse

// optional string error = 1;
bool CmdRawDeleteResponse::has_error() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CmdRawDeleteResponse::set_has_error() {
  _has_bits_[0] |= 0x00000001u;
}
void CmdRawDeleteResponse::clear_has_error() {
  _has_bits_[0] &= ~0x00000001u;
}
void CmdRawDeleteResponse::clear_error() {
  error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_error();
}
const ::std::string& CmdRawDeleteResponse::error() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.CmdRawDeleteResponse.error)
  return error_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CmdRawDeleteResponse::set_error(const ::std::string& value) {
  set_has_error();
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kvrpcpb.CmdRawDeleteResponse.error)
}
void CmdRawDeleteResponse::set_error(const char* value) {
  set_has_error();
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kvrpcpb.CmdRawDeleteResponse.error)
}
void CmdRawDeleteResponse::set_error(const char* value, size_t size) {
  set_has_error();
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kvrpcpb.CmdRawDeleteResponse.error)
}
::std::string* CmdRawDeleteResponse::mutable_error() {
  set_has_error();
  // @@protoc_insertion_point(field_mutable:kvrpcpb.CmdRawDeleteResponse.error)
  return error_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CmdRawDeleteResponse::release_error() {
  // @@protoc_insertion_point(field_release:kvrpcpb.CmdRawDeleteResponse.error)
  clear_has_error();
  return error_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CmdRawDeleteResponse::set_allocated_error(::std::string* error) {
  if (error != NULL) {
    set_has_error();
  } else {
    clear_has_error();
  }
  error_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error);
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.CmdRawDeleteResponse.error)
}

inline const CmdRawDeleteResponse* CmdRawDeleteResponse::internal_default_instance() {
  return &CmdRawDeleteResponse_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Request::kTypeFieldNumber;
const int Request::kContextFieldNumber;
const int Request::kCmdGetReqFieldNumber;
const int Request::kCmdScanReqFieldNumber;
const int Request::kCmdPrewriteReqFieldNumber;
const int Request::kCmdCommitReqFieldNumber;
const int Request::kCmdCleanupReqFieldNumber;
const int Request::kCmdBatchGetReqFieldNumber;
const int Request::kCmdBatchRollbackReqFieldNumber;
const int Request::kCmdScanLockReqFieldNumber;
const int Request::kCmdResolveLockReqFieldNumber;
const int Request::kCmdGcReqFieldNumber;
const int Request::kCmdRawGetReqFieldNumber;
const int Request::kCmdRawPutReqFieldNumber;
const int Request::kCmdRawDeleteReqFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Request::Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_kvrpcpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.Request)
}

void Request::InitAsDefaultInstance() {
  context_ = const_cast< ::kvrpcpb::Context*>(
      ::kvrpcpb::Context::internal_default_instance());
  cmd_get_req_ = const_cast< ::kvrpcpb::CmdGetRequest*>(
      ::kvrpcpb::CmdGetRequest::internal_default_instance());
  cmd_scan_req_ = const_cast< ::kvrpcpb::CmdScanRequest*>(
      ::kvrpcpb::CmdScanRequest::internal_default_instance());
  cmd_prewrite_req_ = const_cast< ::kvrpcpb::CmdPrewriteRequest*>(
      ::kvrpcpb::CmdPrewriteRequest::internal_default_instance());
  cmd_commit_req_ = const_cast< ::kvrpcpb::CmdCommitRequest*>(
      ::kvrpcpb::CmdCommitRequest::internal_default_instance());
  cmd_cleanup_req_ = const_cast< ::kvrpcpb::CmdCleanupRequest*>(
      ::kvrpcpb::CmdCleanupRequest::internal_default_instance());
  cmd_batch_get_req_ = const_cast< ::kvrpcpb::CmdBatchGetRequest*>(
      ::kvrpcpb::CmdBatchGetRequest::internal_default_instance());
  cmd_batch_rollback_req_ = const_cast< ::kvrpcpb::CmdBatchRollbackRequest*>(
      ::kvrpcpb::CmdBatchRollbackRequest::internal_default_instance());
  cmd_scan_lock_req_ = const_cast< ::kvrpcpb::CmdScanLockRequest*>(
      ::kvrpcpb::CmdScanLockRequest::internal_default_instance());
  cmd_resolve_lock_req_ = const_cast< ::kvrpcpb::CmdResolveLockRequest*>(
      ::kvrpcpb::CmdResolveLockRequest::internal_default_instance());
  cmd_gc_req_ = const_cast< ::kvrpcpb::CmdGCRequest*>(
      ::kvrpcpb::CmdGCRequest::internal_default_instance());
  cmd_raw_get_req_ = const_cast< ::kvrpcpb::CmdRawGetRequest*>(
      ::kvrpcpb::CmdRawGetRequest::internal_default_instance());
  cmd_raw_put_req_ = const_cast< ::kvrpcpb::CmdRawPutRequest*>(
      ::kvrpcpb::CmdRawPutRequest::internal_default_instance());
  cmd_raw_delete_req_ = const_cast< ::kvrpcpb::CmdRawDeleteRequest*>(
      ::kvrpcpb::CmdRawDeleteRequest::internal_default_instance());
}

Request::Request(const Request& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.Request)
}

void Request::SharedCtor() {
  _cached_size_ = 0;
  context_ = NULL;
  cmd_get_req_ = NULL;
  cmd_scan_req_ = NULL;
  cmd_prewrite_req_ = NULL;
  cmd_commit_req_ = NULL;
  cmd_cleanup_req_ = NULL;
  cmd_batch_get_req_ = NULL;
  cmd_batch_rollback_req_ = NULL;
  cmd_scan_lock_req_ = NULL;
  cmd_resolve_lock_req_ = NULL;
  cmd_gc_req_ = NULL;
  cmd_raw_get_req_ = NULL;
  cmd_raw_put_req_ = NULL;
  cmd_raw_delete_req_ = NULL;
  type_ = 0;
}

Request::~Request() {
  // @@protoc_insertion_point(destructor:kvrpcpb.Request)
  SharedDtor();
}

void Request::SharedDtor() {
  if (this != &Request_default_instance_.get()) {
    delete context_;
    delete cmd_get_req_;
    delete cmd_scan_req_;
    delete cmd_prewrite_req_;
    delete cmd_commit_req_;
    delete cmd_cleanup_req_;
    delete cmd_batch_get_req_;
    delete cmd_batch_rollback_req_;
    delete cmd_scan_lock_req_;
    delete cmd_resolve_lock_req_;
    delete cmd_gc_req_;
    delete cmd_raw_get_req_;
    delete cmd_raw_put_req_;
    delete cmd_raw_delete_req_;
  }
}

void Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_descriptor_;
}

const Request& Request::default_instance() {
  protobuf_InitDefaults_kvrpcpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Request> Request_default_instance_;

Request* Request::New(::google::protobuf::Arena* arena) const {
  Request* n = new Request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Request::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.Request)
  if (_has_bits_[0 / 32] & 255u) {
    type_ = 0;
    if (has_context()) {
      if (context_ != NULL) context_->::kvrpcpb::Context::Clear();
    }
    if (has_cmd_get_req()) {
      if (cmd_get_req_ != NULL) cmd_get_req_->::kvrpcpb::CmdGetRequest::Clear();
    }
    if (has_cmd_scan_req()) {
      if (cmd_scan_req_ != NULL) cmd_scan_req_->::kvrpcpb::CmdScanRequest::Clear();
    }
    if (has_cmd_prewrite_req()) {
      if (cmd_prewrite_req_ != NULL) cmd_prewrite_req_->::kvrpcpb::CmdPrewriteRequest::Clear();
    }
    if (has_cmd_commit_req()) {
      if (cmd_commit_req_ != NULL) cmd_commit_req_->::kvrpcpb::CmdCommitRequest::Clear();
    }
    if (has_cmd_cleanup_req()) {
      if (cmd_cleanup_req_ != NULL) cmd_cleanup_req_->::kvrpcpb::CmdCleanupRequest::Clear();
    }
    if (has_cmd_batch_get_req()) {
      if (cmd_batch_get_req_ != NULL) cmd_batch_get_req_->::kvrpcpb::CmdBatchGetRequest::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 32512u) {
    if (has_cmd_batch_rollback_req()) {
      if (cmd_batch_rollback_req_ != NULL) cmd_batch_rollback_req_->::kvrpcpb::CmdBatchRollbackRequest::Clear();
    }
    if (has_cmd_scan_lock_req()) {
      if (cmd_scan_lock_req_ != NULL) cmd_scan_lock_req_->::kvrpcpb::CmdScanLockRequest::Clear();
    }
    if (has_cmd_resolve_lock_req()) {
      if (cmd_resolve_lock_req_ != NULL) cmd_resolve_lock_req_->::kvrpcpb::CmdResolveLockRequest::Clear();
    }
    if (has_cmd_gc_req()) {
      if (cmd_gc_req_ != NULL) cmd_gc_req_->::kvrpcpb::CmdGCRequest::Clear();
    }
    if (has_cmd_raw_get_req()) {
      if (cmd_raw_get_req_ != NULL) cmd_raw_get_req_->::kvrpcpb::CmdRawGetRequest::Clear();
    }
    if (has_cmd_raw_put_req()) {
      if (cmd_raw_put_req_ != NULL) cmd_raw_put_req_->::kvrpcpb::CmdRawPutRequest::Clear();
    }
    if (has_cmd_raw_delete_req()) {
      if (cmd_raw_delete_req_ != NULL) cmd_raw_delete_req_->::kvrpcpb::CmdRawDeleteRequest::Clear();
    }
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .kvrpcpb.MessageType type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::kvrpcpb::MessageType_IsValid(value)) {
            set_type(static_cast< ::kvrpcpb::MessageType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_context;
        break;
      }

      // optional .kvrpcpb.Context context = 2;
      case 2: {
        if (tag == 18) {
         parse_context:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_context()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_cmd_get_req;
        break;
      }

      // optional .kvrpcpb.CmdGetRequest cmd_get_req = 3;
      case 3: {
        if (tag == 26) {
         parse_cmd_get_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cmd_get_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_cmd_scan_req;
        break;
      }

      // optional .kvrpcpb.CmdScanRequest cmd_scan_req = 4;
      case 4: {
        if (tag == 34) {
         parse_cmd_scan_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cmd_scan_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_cmd_prewrite_req;
        break;
      }

      // optional .kvrpcpb.CmdPrewriteRequest cmd_prewrite_req = 5;
      case 5: {
        if (tag == 42) {
         parse_cmd_prewrite_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cmd_prewrite_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_cmd_commit_req;
        break;
      }

      // optional .kvrpcpb.CmdCommitRequest cmd_commit_req = 6;
      case 6: {
        if (tag == 50) {
         parse_cmd_commit_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cmd_commit_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_cmd_cleanup_req;
        break;
      }

      // optional .kvrpcpb.CmdCleanupRequest cmd_cleanup_req = 7;
      case 7: {
        if (tag == 58) {
         parse_cmd_cleanup_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cmd_cleanup_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_cmd_batch_get_req;
        break;
      }

      // optional .kvrpcpb.CmdBatchGetRequest cmd_batch_get_req = 10;
      case 10: {
        if (tag == 82) {
         parse_cmd_batch_get_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cmd_batch_get_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_cmd_batch_rollback_req;
        break;
      }

      // optional .kvrpcpb.CmdBatchRollbackRequest cmd_batch_rollback_req = 11;
      case 11: {
        if (tag == 90) {
         parse_cmd_batch_rollback_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cmd_batch_rollback_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_cmd_scan_lock_req;
        break;
      }

      // optional .kvrpcpb.CmdScanLockRequest cmd_scan_lock_req = 12;
      case 12: {
        if (tag == 98) {
         parse_cmd_scan_lock_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cmd_scan_lock_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_cmd_resolve_lock_req;
        break;
      }

      // optional .kvrpcpb.CmdResolveLockRequest cmd_resolve_lock_req = 13;
      case 13: {
        if (tag == 106) {
         parse_cmd_resolve_lock_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cmd_resolve_lock_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_cmd_gc_req;
        break;
      }

      // optional .kvrpcpb.CmdGCRequest cmd_gc_req = 14;
      case 14: {
        if (tag == 114) {
         parse_cmd_gc_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cmd_gc_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(2050)) goto parse_cmd_raw_get_req;
        break;
      }

      // optional .kvrpcpb.CmdRawGetRequest cmd_raw_get_req = 256;
      case 256: {
        if (tag == 2050) {
         parse_cmd_raw_get_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cmd_raw_get_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(2058)) goto parse_cmd_raw_put_req;
        break;
      }

      // optional .kvrpcpb.CmdRawPutRequest cmd_raw_put_req = 257;
      case 257: {
        if (tag == 2058) {
         parse_cmd_raw_put_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cmd_raw_put_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(2066)) goto parse_cmd_raw_delete_req;
        break;
      }

      // optional .kvrpcpb.CmdRawDeleteRequest cmd_raw_delete_req = 258;
      case 258: {
        if (tag == 2066) {
         parse_cmd_raw_delete_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cmd_raw_delete_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.Request)
  return false;
#undef DO_
}

void Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.Request)
  // optional .kvrpcpb.MessageType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .kvrpcpb.Context context = 2;
  if (has_context()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->context_, output);
  }

  // optional .kvrpcpb.CmdGetRequest cmd_get_req = 3;
  if (has_cmd_get_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->cmd_get_req_, output);
  }

  // optional .kvrpcpb.CmdScanRequest cmd_scan_req = 4;
  if (has_cmd_scan_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->cmd_scan_req_, output);
  }

  // optional .kvrpcpb.CmdPrewriteRequest cmd_prewrite_req = 5;
  if (has_cmd_prewrite_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->cmd_prewrite_req_, output);
  }

  // optional .kvrpcpb.CmdCommitRequest cmd_commit_req = 6;
  if (has_cmd_commit_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->cmd_commit_req_, output);
  }

  // optional .kvrpcpb.CmdCleanupRequest cmd_cleanup_req = 7;
  if (has_cmd_cleanup_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->cmd_cleanup_req_, output);
  }

  // optional .kvrpcpb.CmdBatchGetRequest cmd_batch_get_req = 10;
  if (has_cmd_batch_get_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->cmd_batch_get_req_, output);
  }

  // optional .kvrpcpb.CmdBatchRollbackRequest cmd_batch_rollback_req = 11;
  if (has_cmd_batch_rollback_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *this->cmd_batch_rollback_req_, output);
  }

  // optional .kvrpcpb.CmdScanLockRequest cmd_scan_lock_req = 12;
  if (has_cmd_scan_lock_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *this->cmd_scan_lock_req_, output);
  }

  // optional .kvrpcpb.CmdResolveLockRequest cmd_resolve_lock_req = 13;
  if (has_cmd_resolve_lock_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, *this->cmd_resolve_lock_req_, output);
  }

  // optional .kvrpcpb.CmdGCRequest cmd_gc_req = 14;
  if (has_cmd_gc_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, *this->cmd_gc_req_, output);
  }

  // optional .kvrpcpb.CmdRawGetRequest cmd_raw_get_req = 256;
  if (has_cmd_raw_get_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      256, *this->cmd_raw_get_req_, output);
  }

  // optional .kvrpcpb.CmdRawPutRequest cmd_raw_put_req = 257;
  if (has_cmd_raw_put_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      257, *this->cmd_raw_put_req_, output);
  }

  // optional .kvrpcpb.CmdRawDeleteRequest cmd_raw_delete_req = 258;
  if (has_cmd_raw_delete_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      258, *this->cmd_raw_delete_req_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kvrpcpb.Request)
}

::google::protobuf::uint8* Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.Request)
  // optional .kvrpcpb.MessageType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional .kvrpcpb.Context context = 2;
  if (has_context()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->context_, false, target);
  }

  // optional .kvrpcpb.CmdGetRequest cmd_get_req = 3;
  if (has_cmd_get_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->cmd_get_req_, false, target);
  }

  // optional .kvrpcpb.CmdScanRequest cmd_scan_req = 4;
  if (has_cmd_scan_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->cmd_scan_req_, false, target);
  }

  // optional .kvrpcpb.CmdPrewriteRequest cmd_prewrite_req = 5;
  if (has_cmd_prewrite_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->cmd_prewrite_req_, false, target);
  }

  // optional .kvrpcpb.CmdCommitRequest cmd_commit_req = 6;
  if (has_cmd_commit_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->cmd_commit_req_, false, target);
  }

  // optional .kvrpcpb.CmdCleanupRequest cmd_cleanup_req = 7;
  if (has_cmd_cleanup_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->cmd_cleanup_req_, false, target);
  }

  // optional .kvrpcpb.CmdBatchGetRequest cmd_batch_get_req = 10;
  if (has_cmd_batch_get_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *this->cmd_batch_get_req_, false, target);
  }

  // optional .kvrpcpb.CmdBatchRollbackRequest cmd_batch_rollback_req = 11;
  if (has_cmd_batch_rollback_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, *this->cmd_batch_rollback_req_, false, target);
  }

  // optional .kvrpcpb.CmdScanLockRequest cmd_scan_lock_req = 12;
  if (has_cmd_scan_lock_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, *this->cmd_scan_lock_req_, false, target);
  }

  // optional .kvrpcpb.CmdResolveLockRequest cmd_resolve_lock_req = 13;
  if (has_cmd_resolve_lock_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        13, *this->cmd_resolve_lock_req_, false, target);
  }

  // optional .kvrpcpb.CmdGCRequest cmd_gc_req = 14;
  if (has_cmd_gc_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        14, *this->cmd_gc_req_, false, target);
  }

  // optional .kvrpcpb.CmdRawGetRequest cmd_raw_get_req = 256;
  if (has_cmd_raw_get_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        256, *this->cmd_raw_get_req_, false, target);
  }

  // optional .kvrpcpb.CmdRawPutRequest cmd_raw_put_req = 257;
  if (has_cmd_raw_put_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        257, *this->cmd_raw_put_req_, false, target);
  }

  // optional .kvrpcpb.CmdRawDeleteRequest cmd_raw_delete_req = 258;
  if (has_cmd_raw_delete_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        258, *this->cmd_raw_delete_req_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.Request)
  return target;
}

size_t Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.Request)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional .kvrpcpb.MessageType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .kvrpcpb.Context context = 2;
    if (has_context()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->context_);
    }

    // optional .kvrpcpb.CmdGetRequest cmd_get_req = 3;
    if (has_cmd_get_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->cmd_get_req_);
    }

    // optional .kvrpcpb.CmdScanRequest cmd_scan_req = 4;
    if (has_cmd_scan_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->cmd_scan_req_);
    }

    // optional .kvrpcpb.CmdPrewriteRequest cmd_prewrite_req = 5;
    if (has_cmd_prewrite_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->cmd_prewrite_req_);
    }

    // optional .kvrpcpb.CmdCommitRequest cmd_commit_req = 6;
    if (has_cmd_commit_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->cmd_commit_req_);
    }

    // optional .kvrpcpb.CmdCleanupRequest cmd_cleanup_req = 7;
    if (has_cmd_cleanup_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->cmd_cleanup_req_);
    }

    // optional .kvrpcpb.CmdBatchGetRequest cmd_batch_get_req = 10;
    if (has_cmd_batch_get_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->cmd_batch_get_req_);
    }

  }
  if (_has_bits_[8 / 32] & 32512u) {
    // optional .kvrpcpb.CmdBatchRollbackRequest cmd_batch_rollback_req = 11;
    if (has_cmd_batch_rollback_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->cmd_batch_rollback_req_);
    }

    // optional .kvrpcpb.CmdScanLockRequest cmd_scan_lock_req = 12;
    if (has_cmd_scan_lock_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->cmd_scan_lock_req_);
    }

    // optional .kvrpcpb.CmdResolveLockRequest cmd_resolve_lock_req = 13;
    if (has_cmd_resolve_lock_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->cmd_resolve_lock_req_);
    }

    // optional .kvrpcpb.CmdGCRequest cmd_gc_req = 14;
    if (has_cmd_gc_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->cmd_gc_req_);
    }

    // optional .kvrpcpb.CmdRawGetRequest cmd_raw_get_req = 256;
    if (has_cmd_raw_get_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->cmd_raw_get_req_);
    }

    // optional .kvrpcpb.CmdRawPutRequest cmd_raw_put_req = 257;
    if (has_cmd_raw_put_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->cmd_raw_put_req_);
    }

    // optional .kvrpcpb.CmdRawDeleteRequest cmd_raw_delete_req = 258;
    if (has_cmd_raw_delete_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->cmd_raw_delete_req_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.Request)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.Request)
    UnsafeMergeFrom(*source);
  }
}

void Request::MergeFrom(const Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.Request)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Request::UnsafeMergeFrom(const Request& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_context()) {
      mutable_context()->::kvrpcpb::Context::MergeFrom(from.context());
    }
    if (from.has_cmd_get_req()) {
      mutable_cmd_get_req()->::kvrpcpb::CmdGetRequest::MergeFrom(from.cmd_get_req());
    }
    if (from.has_cmd_scan_req()) {
      mutable_cmd_scan_req()->::kvrpcpb::CmdScanRequest::MergeFrom(from.cmd_scan_req());
    }
    if (from.has_cmd_prewrite_req()) {
      mutable_cmd_prewrite_req()->::kvrpcpb::CmdPrewriteRequest::MergeFrom(from.cmd_prewrite_req());
    }
    if (from.has_cmd_commit_req()) {
      mutable_cmd_commit_req()->::kvrpcpb::CmdCommitRequest::MergeFrom(from.cmd_commit_req());
    }
    if (from.has_cmd_cleanup_req()) {
      mutable_cmd_cleanup_req()->::kvrpcpb::CmdCleanupRequest::MergeFrom(from.cmd_cleanup_req());
    }
    if (from.has_cmd_batch_get_req()) {
      mutable_cmd_batch_get_req()->::kvrpcpb::CmdBatchGetRequest::MergeFrom(from.cmd_batch_get_req());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_cmd_batch_rollback_req()) {
      mutable_cmd_batch_rollback_req()->::kvrpcpb::CmdBatchRollbackRequest::MergeFrom(from.cmd_batch_rollback_req());
    }
    if (from.has_cmd_scan_lock_req()) {
      mutable_cmd_scan_lock_req()->::kvrpcpb::CmdScanLockRequest::MergeFrom(from.cmd_scan_lock_req());
    }
    if (from.has_cmd_resolve_lock_req()) {
      mutable_cmd_resolve_lock_req()->::kvrpcpb::CmdResolveLockRequest::MergeFrom(from.cmd_resolve_lock_req());
    }
    if (from.has_cmd_gc_req()) {
      mutable_cmd_gc_req()->::kvrpcpb::CmdGCRequest::MergeFrom(from.cmd_gc_req());
    }
    if (from.has_cmd_raw_get_req()) {
      mutable_cmd_raw_get_req()->::kvrpcpb::CmdRawGetRequest::MergeFrom(from.cmd_raw_get_req());
    }
    if (from.has_cmd_raw_put_req()) {
      mutable_cmd_raw_put_req()->::kvrpcpb::CmdRawPutRequest::MergeFrom(from.cmd_raw_put_req());
    }
    if (from.has_cmd_raw_delete_req()) {
      mutable_cmd_raw_delete_req()->::kvrpcpb::CmdRawDeleteRequest::MergeFrom(from.cmd_raw_delete_req());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request::CopyFrom(const Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.Request)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Request::IsInitialized() const {

  return true;
}

void Request::Swap(Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Request::InternalSwap(Request* other) {
  std::swap(type_, other->type_);
  std::swap(context_, other->context_);
  std::swap(cmd_get_req_, other->cmd_get_req_);
  std::swap(cmd_scan_req_, other->cmd_scan_req_);
  std::swap(cmd_prewrite_req_, other->cmd_prewrite_req_);
  std::swap(cmd_commit_req_, other->cmd_commit_req_);
  std::swap(cmd_cleanup_req_, other->cmd_cleanup_req_);
  std::swap(cmd_batch_get_req_, other->cmd_batch_get_req_);
  std::swap(cmd_batch_rollback_req_, other->cmd_batch_rollback_req_);
  std::swap(cmd_scan_lock_req_, other->cmd_scan_lock_req_);
  std::swap(cmd_resolve_lock_req_, other->cmd_resolve_lock_req_);
  std::swap(cmd_gc_req_, other->cmd_gc_req_);
  std::swap(cmd_raw_get_req_, other->cmd_raw_get_req_);
  std::swap(cmd_raw_put_req_, other->cmd_raw_put_req_);
  std::swap(cmd_raw_delete_req_, other->cmd_raw_delete_req_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Request_descriptor_;
  metadata.reflection = Request_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Request

// optional .kvrpcpb.MessageType type = 1;
bool Request::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Request::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
void Request::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void Request::clear_type() {
  type_ = 0;
  clear_has_type();
}
::kvrpcpb::MessageType Request::type() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.Request.type)
  return static_cast< ::kvrpcpb::MessageType >(type_);
}
void Request::set_type(::kvrpcpb::MessageType value) {
  assert(::kvrpcpb::MessageType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:kvrpcpb.Request.type)
}

// optional .kvrpcpb.Context context = 2;
bool Request::has_context() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Request::set_has_context() {
  _has_bits_[0] |= 0x00000002u;
}
void Request::clear_has_context() {
  _has_bits_[0] &= ~0x00000002u;
}
void Request::clear_context() {
  if (context_ != NULL) context_->::kvrpcpb::Context::Clear();
  clear_has_context();
}
const ::kvrpcpb::Context& Request::context() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.Request.context)
  return context_ != NULL ? *context_
                         : *::kvrpcpb::Context::internal_default_instance();
}
::kvrpcpb::Context* Request::mutable_context() {
  set_has_context();
  if (context_ == NULL) {
    context_ = new ::kvrpcpb::Context;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.Request.context)
  return context_;
}
::kvrpcpb::Context* Request::release_context() {
  // @@protoc_insertion_point(field_release:kvrpcpb.Request.context)
  clear_has_context();
  ::kvrpcpb::Context* temp = context_;
  context_ = NULL;
  return temp;
}
void Request::set_allocated_context(::kvrpcpb::Context* context) {
  delete context_;
  context_ = context;
  if (context) {
    set_has_context();
  } else {
    clear_has_context();
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.Request.context)
}

// optional .kvrpcpb.CmdGetRequest cmd_get_req = 3;
bool Request::has_cmd_get_req() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Request::set_has_cmd_get_req() {
  _has_bits_[0] |= 0x00000004u;
}
void Request::clear_has_cmd_get_req() {
  _has_bits_[0] &= ~0x00000004u;
}
void Request::clear_cmd_get_req() {
  if (cmd_get_req_ != NULL) cmd_get_req_->::kvrpcpb::CmdGetRequest::Clear();
  clear_has_cmd_get_req();
}
const ::kvrpcpb::CmdGetRequest& Request::cmd_get_req() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.Request.cmd_get_req)
  return cmd_get_req_ != NULL ? *cmd_get_req_
                         : *::kvrpcpb::CmdGetRequest::internal_default_instance();
}
::kvrpcpb::CmdGetRequest* Request::mutable_cmd_get_req() {
  set_has_cmd_get_req();
  if (cmd_get_req_ == NULL) {
    cmd_get_req_ = new ::kvrpcpb::CmdGetRequest;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.Request.cmd_get_req)
  return cmd_get_req_;
}
::kvrpcpb::CmdGetRequest* Request::release_cmd_get_req() {
  // @@protoc_insertion_point(field_release:kvrpcpb.Request.cmd_get_req)
  clear_has_cmd_get_req();
  ::kvrpcpb::CmdGetRequest* temp = cmd_get_req_;
  cmd_get_req_ = NULL;
  return temp;
}
void Request::set_allocated_cmd_get_req(::kvrpcpb::CmdGetRequest* cmd_get_req) {
  delete cmd_get_req_;
  cmd_get_req_ = cmd_get_req;
  if (cmd_get_req) {
    set_has_cmd_get_req();
  } else {
    clear_has_cmd_get_req();
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.Request.cmd_get_req)
}

// optional .kvrpcpb.CmdScanRequest cmd_scan_req = 4;
bool Request::has_cmd_scan_req() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Request::set_has_cmd_scan_req() {
  _has_bits_[0] |= 0x00000008u;
}
void Request::clear_has_cmd_scan_req() {
  _has_bits_[0] &= ~0x00000008u;
}
void Request::clear_cmd_scan_req() {
  if (cmd_scan_req_ != NULL) cmd_scan_req_->::kvrpcpb::CmdScanRequest::Clear();
  clear_has_cmd_scan_req();
}
const ::kvrpcpb::CmdScanRequest& Request::cmd_scan_req() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.Request.cmd_scan_req)
  return cmd_scan_req_ != NULL ? *cmd_scan_req_
                         : *::kvrpcpb::CmdScanRequest::internal_default_instance();
}
::kvrpcpb::CmdScanRequest* Request::mutable_cmd_scan_req() {
  set_has_cmd_scan_req();
  if (cmd_scan_req_ == NULL) {
    cmd_scan_req_ = new ::kvrpcpb::CmdScanRequest;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.Request.cmd_scan_req)
  return cmd_scan_req_;
}
::kvrpcpb::CmdScanRequest* Request::release_cmd_scan_req() {
  // @@protoc_insertion_point(field_release:kvrpcpb.Request.cmd_scan_req)
  clear_has_cmd_scan_req();
  ::kvrpcpb::CmdScanRequest* temp = cmd_scan_req_;
  cmd_scan_req_ = NULL;
  return temp;
}
void Request::set_allocated_cmd_scan_req(::kvrpcpb::CmdScanRequest* cmd_scan_req) {
  delete cmd_scan_req_;
  cmd_scan_req_ = cmd_scan_req;
  if (cmd_scan_req) {
    set_has_cmd_scan_req();
  } else {
    clear_has_cmd_scan_req();
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.Request.cmd_scan_req)
}

// optional .kvrpcpb.CmdPrewriteRequest cmd_prewrite_req = 5;
bool Request::has_cmd_prewrite_req() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Request::set_has_cmd_prewrite_req() {
  _has_bits_[0] |= 0x00000010u;
}
void Request::clear_has_cmd_prewrite_req() {
  _has_bits_[0] &= ~0x00000010u;
}
void Request::clear_cmd_prewrite_req() {
  if (cmd_prewrite_req_ != NULL) cmd_prewrite_req_->::kvrpcpb::CmdPrewriteRequest::Clear();
  clear_has_cmd_prewrite_req();
}
const ::kvrpcpb::CmdPrewriteRequest& Request::cmd_prewrite_req() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.Request.cmd_prewrite_req)
  return cmd_prewrite_req_ != NULL ? *cmd_prewrite_req_
                         : *::kvrpcpb::CmdPrewriteRequest::internal_default_instance();
}
::kvrpcpb::CmdPrewriteRequest* Request::mutable_cmd_prewrite_req() {
  set_has_cmd_prewrite_req();
  if (cmd_prewrite_req_ == NULL) {
    cmd_prewrite_req_ = new ::kvrpcpb::CmdPrewriteRequest;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.Request.cmd_prewrite_req)
  return cmd_prewrite_req_;
}
::kvrpcpb::CmdPrewriteRequest* Request::release_cmd_prewrite_req() {
  // @@protoc_insertion_point(field_release:kvrpcpb.Request.cmd_prewrite_req)
  clear_has_cmd_prewrite_req();
  ::kvrpcpb::CmdPrewriteRequest* temp = cmd_prewrite_req_;
  cmd_prewrite_req_ = NULL;
  return temp;
}
void Request::set_allocated_cmd_prewrite_req(::kvrpcpb::CmdPrewriteRequest* cmd_prewrite_req) {
  delete cmd_prewrite_req_;
  cmd_prewrite_req_ = cmd_prewrite_req;
  if (cmd_prewrite_req) {
    set_has_cmd_prewrite_req();
  } else {
    clear_has_cmd_prewrite_req();
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.Request.cmd_prewrite_req)
}

// optional .kvrpcpb.CmdCommitRequest cmd_commit_req = 6;
bool Request::has_cmd_commit_req() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Request::set_has_cmd_commit_req() {
  _has_bits_[0] |= 0x00000020u;
}
void Request::clear_has_cmd_commit_req() {
  _has_bits_[0] &= ~0x00000020u;
}
void Request::clear_cmd_commit_req() {
  if (cmd_commit_req_ != NULL) cmd_commit_req_->::kvrpcpb::CmdCommitRequest::Clear();
  clear_has_cmd_commit_req();
}
const ::kvrpcpb::CmdCommitRequest& Request::cmd_commit_req() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.Request.cmd_commit_req)
  return cmd_commit_req_ != NULL ? *cmd_commit_req_
                         : *::kvrpcpb::CmdCommitRequest::internal_default_instance();
}
::kvrpcpb::CmdCommitRequest* Request::mutable_cmd_commit_req() {
  set_has_cmd_commit_req();
  if (cmd_commit_req_ == NULL) {
    cmd_commit_req_ = new ::kvrpcpb::CmdCommitRequest;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.Request.cmd_commit_req)
  return cmd_commit_req_;
}
::kvrpcpb::CmdCommitRequest* Request::release_cmd_commit_req() {
  // @@protoc_insertion_point(field_release:kvrpcpb.Request.cmd_commit_req)
  clear_has_cmd_commit_req();
  ::kvrpcpb::CmdCommitRequest* temp = cmd_commit_req_;
  cmd_commit_req_ = NULL;
  return temp;
}
void Request::set_allocated_cmd_commit_req(::kvrpcpb::CmdCommitRequest* cmd_commit_req) {
  delete cmd_commit_req_;
  cmd_commit_req_ = cmd_commit_req;
  if (cmd_commit_req) {
    set_has_cmd_commit_req();
  } else {
    clear_has_cmd_commit_req();
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.Request.cmd_commit_req)
}

// optional .kvrpcpb.CmdCleanupRequest cmd_cleanup_req = 7;
bool Request::has_cmd_cleanup_req() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Request::set_has_cmd_cleanup_req() {
  _has_bits_[0] |= 0x00000040u;
}
void Request::clear_has_cmd_cleanup_req() {
  _has_bits_[0] &= ~0x00000040u;
}
void Request::clear_cmd_cleanup_req() {
  if (cmd_cleanup_req_ != NULL) cmd_cleanup_req_->::kvrpcpb::CmdCleanupRequest::Clear();
  clear_has_cmd_cleanup_req();
}
const ::kvrpcpb::CmdCleanupRequest& Request::cmd_cleanup_req() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.Request.cmd_cleanup_req)
  return cmd_cleanup_req_ != NULL ? *cmd_cleanup_req_
                         : *::kvrpcpb::CmdCleanupRequest::internal_default_instance();
}
::kvrpcpb::CmdCleanupRequest* Request::mutable_cmd_cleanup_req() {
  set_has_cmd_cleanup_req();
  if (cmd_cleanup_req_ == NULL) {
    cmd_cleanup_req_ = new ::kvrpcpb::CmdCleanupRequest;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.Request.cmd_cleanup_req)
  return cmd_cleanup_req_;
}
::kvrpcpb::CmdCleanupRequest* Request::release_cmd_cleanup_req() {
  // @@protoc_insertion_point(field_release:kvrpcpb.Request.cmd_cleanup_req)
  clear_has_cmd_cleanup_req();
  ::kvrpcpb::CmdCleanupRequest* temp = cmd_cleanup_req_;
  cmd_cleanup_req_ = NULL;
  return temp;
}
void Request::set_allocated_cmd_cleanup_req(::kvrpcpb::CmdCleanupRequest* cmd_cleanup_req) {
  delete cmd_cleanup_req_;
  cmd_cleanup_req_ = cmd_cleanup_req;
  if (cmd_cleanup_req) {
    set_has_cmd_cleanup_req();
  } else {
    clear_has_cmd_cleanup_req();
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.Request.cmd_cleanup_req)
}

// optional .kvrpcpb.CmdBatchGetRequest cmd_batch_get_req = 10;
bool Request::has_cmd_batch_get_req() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Request::set_has_cmd_batch_get_req() {
  _has_bits_[0] |= 0x00000080u;
}
void Request::clear_has_cmd_batch_get_req() {
  _has_bits_[0] &= ~0x00000080u;
}
void Request::clear_cmd_batch_get_req() {
  if (cmd_batch_get_req_ != NULL) cmd_batch_get_req_->::kvrpcpb::CmdBatchGetRequest::Clear();
  clear_has_cmd_batch_get_req();
}
const ::kvrpcpb::CmdBatchGetRequest& Request::cmd_batch_get_req() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.Request.cmd_batch_get_req)
  return cmd_batch_get_req_ != NULL ? *cmd_batch_get_req_
                         : *::kvrpcpb::CmdBatchGetRequest::internal_default_instance();
}
::kvrpcpb::CmdBatchGetRequest* Request::mutable_cmd_batch_get_req() {
  set_has_cmd_batch_get_req();
  if (cmd_batch_get_req_ == NULL) {
    cmd_batch_get_req_ = new ::kvrpcpb::CmdBatchGetRequest;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.Request.cmd_batch_get_req)
  return cmd_batch_get_req_;
}
::kvrpcpb::CmdBatchGetRequest* Request::release_cmd_batch_get_req() {
  // @@protoc_insertion_point(field_release:kvrpcpb.Request.cmd_batch_get_req)
  clear_has_cmd_batch_get_req();
  ::kvrpcpb::CmdBatchGetRequest* temp = cmd_batch_get_req_;
  cmd_batch_get_req_ = NULL;
  return temp;
}
void Request::set_allocated_cmd_batch_get_req(::kvrpcpb::CmdBatchGetRequest* cmd_batch_get_req) {
  delete cmd_batch_get_req_;
  cmd_batch_get_req_ = cmd_batch_get_req;
  if (cmd_batch_get_req) {
    set_has_cmd_batch_get_req();
  } else {
    clear_has_cmd_batch_get_req();
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.Request.cmd_batch_get_req)
}

// optional .kvrpcpb.CmdBatchRollbackRequest cmd_batch_rollback_req = 11;
bool Request::has_cmd_batch_rollback_req() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Request::set_has_cmd_batch_rollback_req() {
  _has_bits_[0] |= 0x00000100u;
}
void Request::clear_has_cmd_batch_rollback_req() {
  _has_bits_[0] &= ~0x00000100u;
}
void Request::clear_cmd_batch_rollback_req() {
  if (cmd_batch_rollback_req_ != NULL) cmd_batch_rollback_req_->::kvrpcpb::CmdBatchRollbackRequest::Clear();
  clear_has_cmd_batch_rollback_req();
}
const ::kvrpcpb::CmdBatchRollbackRequest& Request::cmd_batch_rollback_req() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.Request.cmd_batch_rollback_req)
  return cmd_batch_rollback_req_ != NULL ? *cmd_batch_rollback_req_
                         : *::kvrpcpb::CmdBatchRollbackRequest::internal_default_instance();
}
::kvrpcpb::CmdBatchRollbackRequest* Request::mutable_cmd_batch_rollback_req() {
  set_has_cmd_batch_rollback_req();
  if (cmd_batch_rollback_req_ == NULL) {
    cmd_batch_rollback_req_ = new ::kvrpcpb::CmdBatchRollbackRequest;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.Request.cmd_batch_rollback_req)
  return cmd_batch_rollback_req_;
}
::kvrpcpb::CmdBatchRollbackRequest* Request::release_cmd_batch_rollback_req() {
  // @@protoc_insertion_point(field_release:kvrpcpb.Request.cmd_batch_rollback_req)
  clear_has_cmd_batch_rollback_req();
  ::kvrpcpb::CmdBatchRollbackRequest* temp = cmd_batch_rollback_req_;
  cmd_batch_rollback_req_ = NULL;
  return temp;
}
void Request::set_allocated_cmd_batch_rollback_req(::kvrpcpb::CmdBatchRollbackRequest* cmd_batch_rollback_req) {
  delete cmd_batch_rollback_req_;
  cmd_batch_rollback_req_ = cmd_batch_rollback_req;
  if (cmd_batch_rollback_req) {
    set_has_cmd_batch_rollback_req();
  } else {
    clear_has_cmd_batch_rollback_req();
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.Request.cmd_batch_rollback_req)
}

// optional .kvrpcpb.CmdScanLockRequest cmd_scan_lock_req = 12;
bool Request::has_cmd_scan_lock_req() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void Request::set_has_cmd_scan_lock_req() {
  _has_bits_[0] |= 0x00000200u;
}
void Request::clear_has_cmd_scan_lock_req() {
  _has_bits_[0] &= ~0x00000200u;
}
void Request::clear_cmd_scan_lock_req() {
  if (cmd_scan_lock_req_ != NULL) cmd_scan_lock_req_->::kvrpcpb::CmdScanLockRequest::Clear();
  clear_has_cmd_scan_lock_req();
}
const ::kvrpcpb::CmdScanLockRequest& Request::cmd_scan_lock_req() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.Request.cmd_scan_lock_req)
  return cmd_scan_lock_req_ != NULL ? *cmd_scan_lock_req_
                         : *::kvrpcpb::CmdScanLockRequest::internal_default_instance();
}
::kvrpcpb::CmdScanLockRequest* Request::mutable_cmd_scan_lock_req() {
  set_has_cmd_scan_lock_req();
  if (cmd_scan_lock_req_ == NULL) {
    cmd_scan_lock_req_ = new ::kvrpcpb::CmdScanLockRequest;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.Request.cmd_scan_lock_req)
  return cmd_scan_lock_req_;
}
::kvrpcpb::CmdScanLockRequest* Request::release_cmd_scan_lock_req() {
  // @@protoc_insertion_point(field_release:kvrpcpb.Request.cmd_scan_lock_req)
  clear_has_cmd_scan_lock_req();
  ::kvrpcpb::CmdScanLockRequest* temp = cmd_scan_lock_req_;
  cmd_scan_lock_req_ = NULL;
  return temp;
}
void Request::set_allocated_cmd_scan_lock_req(::kvrpcpb::CmdScanLockRequest* cmd_scan_lock_req) {
  delete cmd_scan_lock_req_;
  cmd_scan_lock_req_ = cmd_scan_lock_req;
  if (cmd_scan_lock_req) {
    set_has_cmd_scan_lock_req();
  } else {
    clear_has_cmd_scan_lock_req();
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.Request.cmd_scan_lock_req)
}

// optional .kvrpcpb.CmdResolveLockRequest cmd_resolve_lock_req = 13;
bool Request::has_cmd_resolve_lock_req() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void Request::set_has_cmd_resolve_lock_req() {
  _has_bits_[0] |= 0x00000400u;
}
void Request::clear_has_cmd_resolve_lock_req() {
  _has_bits_[0] &= ~0x00000400u;
}
void Request::clear_cmd_resolve_lock_req() {
  if (cmd_resolve_lock_req_ != NULL) cmd_resolve_lock_req_->::kvrpcpb::CmdResolveLockRequest::Clear();
  clear_has_cmd_resolve_lock_req();
}
const ::kvrpcpb::CmdResolveLockRequest& Request::cmd_resolve_lock_req() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.Request.cmd_resolve_lock_req)
  return cmd_resolve_lock_req_ != NULL ? *cmd_resolve_lock_req_
                         : *::kvrpcpb::CmdResolveLockRequest::internal_default_instance();
}
::kvrpcpb::CmdResolveLockRequest* Request::mutable_cmd_resolve_lock_req() {
  set_has_cmd_resolve_lock_req();
  if (cmd_resolve_lock_req_ == NULL) {
    cmd_resolve_lock_req_ = new ::kvrpcpb::CmdResolveLockRequest;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.Request.cmd_resolve_lock_req)
  return cmd_resolve_lock_req_;
}
::kvrpcpb::CmdResolveLockRequest* Request::release_cmd_resolve_lock_req() {
  // @@protoc_insertion_point(field_release:kvrpcpb.Request.cmd_resolve_lock_req)
  clear_has_cmd_resolve_lock_req();
  ::kvrpcpb::CmdResolveLockRequest* temp = cmd_resolve_lock_req_;
  cmd_resolve_lock_req_ = NULL;
  return temp;
}
void Request::set_allocated_cmd_resolve_lock_req(::kvrpcpb::CmdResolveLockRequest* cmd_resolve_lock_req) {
  delete cmd_resolve_lock_req_;
  cmd_resolve_lock_req_ = cmd_resolve_lock_req;
  if (cmd_resolve_lock_req) {
    set_has_cmd_resolve_lock_req();
  } else {
    clear_has_cmd_resolve_lock_req();
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.Request.cmd_resolve_lock_req)
}

// optional .kvrpcpb.CmdGCRequest cmd_gc_req = 14;
bool Request::has_cmd_gc_req() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void Request::set_has_cmd_gc_req() {
  _has_bits_[0] |= 0x00000800u;
}
void Request::clear_has_cmd_gc_req() {
  _has_bits_[0] &= ~0x00000800u;
}
void Request::clear_cmd_gc_req() {
  if (cmd_gc_req_ != NULL) cmd_gc_req_->::kvrpcpb::CmdGCRequest::Clear();
  clear_has_cmd_gc_req();
}
const ::kvrpcpb::CmdGCRequest& Request::cmd_gc_req() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.Request.cmd_gc_req)
  return cmd_gc_req_ != NULL ? *cmd_gc_req_
                         : *::kvrpcpb::CmdGCRequest::internal_default_instance();
}
::kvrpcpb::CmdGCRequest* Request::mutable_cmd_gc_req() {
  set_has_cmd_gc_req();
  if (cmd_gc_req_ == NULL) {
    cmd_gc_req_ = new ::kvrpcpb::CmdGCRequest;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.Request.cmd_gc_req)
  return cmd_gc_req_;
}
::kvrpcpb::CmdGCRequest* Request::release_cmd_gc_req() {
  // @@protoc_insertion_point(field_release:kvrpcpb.Request.cmd_gc_req)
  clear_has_cmd_gc_req();
  ::kvrpcpb::CmdGCRequest* temp = cmd_gc_req_;
  cmd_gc_req_ = NULL;
  return temp;
}
void Request::set_allocated_cmd_gc_req(::kvrpcpb::CmdGCRequest* cmd_gc_req) {
  delete cmd_gc_req_;
  cmd_gc_req_ = cmd_gc_req;
  if (cmd_gc_req) {
    set_has_cmd_gc_req();
  } else {
    clear_has_cmd_gc_req();
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.Request.cmd_gc_req)
}

// optional .kvrpcpb.CmdRawGetRequest cmd_raw_get_req = 256;
bool Request::has_cmd_raw_get_req() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void Request::set_has_cmd_raw_get_req() {
  _has_bits_[0] |= 0x00001000u;
}
void Request::clear_has_cmd_raw_get_req() {
  _has_bits_[0] &= ~0x00001000u;
}
void Request::clear_cmd_raw_get_req() {
  if (cmd_raw_get_req_ != NULL) cmd_raw_get_req_->::kvrpcpb::CmdRawGetRequest::Clear();
  clear_has_cmd_raw_get_req();
}
const ::kvrpcpb::CmdRawGetRequest& Request::cmd_raw_get_req() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.Request.cmd_raw_get_req)
  return cmd_raw_get_req_ != NULL ? *cmd_raw_get_req_
                         : *::kvrpcpb::CmdRawGetRequest::internal_default_instance();
}
::kvrpcpb::CmdRawGetRequest* Request::mutable_cmd_raw_get_req() {
  set_has_cmd_raw_get_req();
  if (cmd_raw_get_req_ == NULL) {
    cmd_raw_get_req_ = new ::kvrpcpb::CmdRawGetRequest;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.Request.cmd_raw_get_req)
  return cmd_raw_get_req_;
}
::kvrpcpb::CmdRawGetRequest* Request::release_cmd_raw_get_req() {
  // @@protoc_insertion_point(field_release:kvrpcpb.Request.cmd_raw_get_req)
  clear_has_cmd_raw_get_req();
  ::kvrpcpb::CmdRawGetRequest* temp = cmd_raw_get_req_;
  cmd_raw_get_req_ = NULL;
  return temp;
}
void Request::set_allocated_cmd_raw_get_req(::kvrpcpb::CmdRawGetRequest* cmd_raw_get_req) {
  delete cmd_raw_get_req_;
  cmd_raw_get_req_ = cmd_raw_get_req;
  if (cmd_raw_get_req) {
    set_has_cmd_raw_get_req();
  } else {
    clear_has_cmd_raw_get_req();
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.Request.cmd_raw_get_req)
}

// optional .kvrpcpb.CmdRawPutRequest cmd_raw_put_req = 257;
bool Request::has_cmd_raw_put_req() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void Request::set_has_cmd_raw_put_req() {
  _has_bits_[0] |= 0x00002000u;
}
void Request::clear_has_cmd_raw_put_req() {
  _has_bits_[0] &= ~0x00002000u;
}
void Request::clear_cmd_raw_put_req() {
  if (cmd_raw_put_req_ != NULL) cmd_raw_put_req_->::kvrpcpb::CmdRawPutRequest::Clear();
  clear_has_cmd_raw_put_req();
}
const ::kvrpcpb::CmdRawPutRequest& Request::cmd_raw_put_req() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.Request.cmd_raw_put_req)
  return cmd_raw_put_req_ != NULL ? *cmd_raw_put_req_
                         : *::kvrpcpb::CmdRawPutRequest::internal_default_instance();
}
::kvrpcpb::CmdRawPutRequest* Request::mutable_cmd_raw_put_req() {
  set_has_cmd_raw_put_req();
  if (cmd_raw_put_req_ == NULL) {
    cmd_raw_put_req_ = new ::kvrpcpb::CmdRawPutRequest;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.Request.cmd_raw_put_req)
  return cmd_raw_put_req_;
}
::kvrpcpb::CmdRawPutRequest* Request::release_cmd_raw_put_req() {
  // @@protoc_insertion_point(field_release:kvrpcpb.Request.cmd_raw_put_req)
  clear_has_cmd_raw_put_req();
  ::kvrpcpb::CmdRawPutRequest* temp = cmd_raw_put_req_;
  cmd_raw_put_req_ = NULL;
  return temp;
}
void Request::set_allocated_cmd_raw_put_req(::kvrpcpb::CmdRawPutRequest* cmd_raw_put_req) {
  delete cmd_raw_put_req_;
  cmd_raw_put_req_ = cmd_raw_put_req;
  if (cmd_raw_put_req) {
    set_has_cmd_raw_put_req();
  } else {
    clear_has_cmd_raw_put_req();
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.Request.cmd_raw_put_req)
}

// optional .kvrpcpb.CmdRawDeleteRequest cmd_raw_delete_req = 258;
bool Request::has_cmd_raw_delete_req() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void Request::set_has_cmd_raw_delete_req() {
  _has_bits_[0] |= 0x00004000u;
}
void Request::clear_has_cmd_raw_delete_req() {
  _has_bits_[0] &= ~0x00004000u;
}
void Request::clear_cmd_raw_delete_req() {
  if (cmd_raw_delete_req_ != NULL) cmd_raw_delete_req_->::kvrpcpb::CmdRawDeleteRequest::Clear();
  clear_has_cmd_raw_delete_req();
}
const ::kvrpcpb::CmdRawDeleteRequest& Request::cmd_raw_delete_req() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.Request.cmd_raw_delete_req)
  return cmd_raw_delete_req_ != NULL ? *cmd_raw_delete_req_
                         : *::kvrpcpb::CmdRawDeleteRequest::internal_default_instance();
}
::kvrpcpb::CmdRawDeleteRequest* Request::mutable_cmd_raw_delete_req() {
  set_has_cmd_raw_delete_req();
  if (cmd_raw_delete_req_ == NULL) {
    cmd_raw_delete_req_ = new ::kvrpcpb::CmdRawDeleteRequest;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.Request.cmd_raw_delete_req)
  return cmd_raw_delete_req_;
}
::kvrpcpb::CmdRawDeleteRequest* Request::release_cmd_raw_delete_req() {
  // @@protoc_insertion_point(field_release:kvrpcpb.Request.cmd_raw_delete_req)
  clear_has_cmd_raw_delete_req();
  ::kvrpcpb::CmdRawDeleteRequest* temp = cmd_raw_delete_req_;
  cmd_raw_delete_req_ = NULL;
  return temp;
}
void Request::set_allocated_cmd_raw_delete_req(::kvrpcpb::CmdRawDeleteRequest* cmd_raw_delete_req) {
  delete cmd_raw_delete_req_;
  cmd_raw_delete_req_ = cmd_raw_delete_req;
  if (cmd_raw_delete_req) {
    set_has_cmd_raw_delete_req();
  } else {
    clear_has_cmd_raw_delete_req();
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.Request.cmd_raw_delete_req)
}

inline const Request* Request::internal_default_instance() {
  return &Request_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Response::kTypeFieldNumber;
const int Response::kRegionErrorFieldNumber;
const int Response::kCmdGetRespFieldNumber;
const int Response::kCmdScanRespFieldNumber;
const int Response::kCmdPrewriteRespFieldNumber;
const int Response::kCmdCommitRespFieldNumber;
const int Response::kCmdCleanupRespFieldNumber;
const int Response::kCmdBatchGetRespFieldNumber;
const int Response::kCmdBatchRollbackRespFieldNumber;
const int Response::kCmdScanLockRespFieldNumber;
const int Response::kCmdResolveLockRespFieldNumber;
const int Response::kCmdGcRespFieldNumber;
const int Response::kCmdRawGetRespFieldNumber;
const int Response::kCmdRawPutRespFieldNumber;
const int Response::kCmdRawDeleteRespFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Response::Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_kvrpcpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.Response)
}

void Response::InitAsDefaultInstance() {
  region_error_ = const_cast< ::errorpb::Error*>(
      ::errorpb::Error::internal_default_instance());
  cmd_get_resp_ = const_cast< ::kvrpcpb::CmdGetResponse*>(
      ::kvrpcpb::CmdGetResponse::internal_default_instance());
  cmd_scan_resp_ = const_cast< ::kvrpcpb::CmdScanResponse*>(
      ::kvrpcpb::CmdScanResponse::internal_default_instance());
  cmd_prewrite_resp_ = const_cast< ::kvrpcpb::CmdPrewriteResponse*>(
      ::kvrpcpb::CmdPrewriteResponse::internal_default_instance());
  cmd_commit_resp_ = const_cast< ::kvrpcpb::CmdCommitResponse*>(
      ::kvrpcpb::CmdCommitResponse::internal_default_instance());
  cmd_cleanup_resp_ = const_cast< ::kvrpcpb::CmdCleanupResponse*>(
      ::kvrpcpb::CmdCleanupResponse::internal_default_instance());
  cmd_batch_get_resp_ = const_cast< ::kvrpcpb::CmdBatchGetResponse*>(
      ::kvrpcpb::CmdBatchGetResponse::internal_default_instance());
  cmd_batch_rollback_resp_ = const_cast< ::kvrpcpb::CmdBatchRollbackResponse*>(
      ::kvrpcpb::CmdBatchRollbackResponse::internal_default_instance());
  cmd_scan_lock_resp_ = const_cast< ::kvrpcpb::CmdScanLockResponse*>(
      ::kvrpcpb::CmdScanLockResponse::internal_default_instance());
  cmd_resolve_lock_resp_ = const_cast< ::kvrpcpb::CmdResolveLockResponse*>(
      ::kvrpcpb::CmdResolveLockResponse::internal_default_instance());
  cmd_gc_resp_ = const_cast< ::kvrpcpb::CmdGCResponse*>(
      ::kvrpcpb::CmdGCResponse::internal_default_instance());
  cmd_raw_get_resp_ = const_cast< ::kvrpcpb::CmdRawGetResponse*>(
      ::kvrpcpb::CmdRawGetResponse::internal_default_instance());
  cmd_raw_put_resp_ = const_cast< ::kvrpcpb::CmdRawPutResponse*>(
      ::kvrpcpb::CmdRawPutResponse::internal_default_instance());
  cmd_raw_delete_resp_ = const_cast< ::kvrpcpb::CmdRawDeleteResponse*>(
      ::kvrpcpb::CmdRawDeleteResponse::internal_default_instance());
}

Response::Response(const Response& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.Response)
}

void Response::SharedCtor() {
  _cached_size_ = 0;
  region_error_ = NULL;
  cmd_get_resp_ = NULL;
  cmd_scan_resp_ = NULL;
  cmd_prewrite_resp_ = NULL;
  cmd_commit_resp_ = NULL;
  cmd_cleanup_resp_ = NULL;
  cmd_batch_get_resp_ = NULL;
  cmd_batch_rollback_resp_ = NULL;
  cmd_scan_lock_resp_ = NULL;
  cmd_resolve_lock_resp_ = NULL;
  cmd_gc_resp_ = NULL;
  cmd_raw_get_resp_ = NULL;
  cmd_raw_put_resp_ = NULL;
  cmd_raw_delete_resp_ = NULL;
  type_ = 0;
}

Response::~Response() {
  // @@protoc_insertion_point(destructor:kvrpcpb.Response)
  SharedDtor();
}

void Response::SharedDtor() {
  if (this != &Response_default_instance_.get()) {
    delete region_error_;
    delete cmd_get_resp_;
    delete cmd_scan_resp_;
    delete cmd_prewrite_resp_;
    delete cmd_commit_resp_;
    delete cmd_cleanup_resp_;
    delete cmd_batch_get_resp_;
    delete cmd_batch_rollback_resp_;
    delete cmd_scan_lock_resp_;
    delete cmd_resolve_lock_resp_;
    delete cmd_gc_resp_;
    delete cmd_raw_get_resp_;
    delete cmd_raw_put_resp_;
    delete cmd_raw_delete_resp_;
  }
}

void Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Response_descriptor_;
}

const Response& Response::default_instance() {
  protobuf_InitDefaults_kvrpcpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Response> Response_default_instance_;

Response* Response::New(::google::protobuf::Arena* arena) const {
  Response* n = new Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Response::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.Response)
  if (_has_bits_[0 / 32] & 255u) {
    type_ = 0;
    if (has_region_error()) {
      if (region_error_ != NULL) region_error_->::errorpb::Error::Clear();
    }
    if (has_cmd_get_resp()) {
      if (cmd_get_resp_ != NULL) cmd_get_resp_->::kvrpcpb::CmdGetResponse::Clear();
    }
    if (has_cmd_scan_resp()) {
      if (cmd_scan_resp_ != NULL) cmd_scan_resp_->::kvrpcpb::CmdScanResponse::Clear();
    }
    if (has_cmd_prewrite_resp()) {
      if (cmd_prewrite_resp_ != NULL) cmd_prewrite_resp_->::kvrpcpb::CmdPrewriteResponse::Clear();
    }
    if (has_cmd_commit_resp()) {
      if (cmd_commit_resp_ != NULL) cmd_commit_resp_->::kvrpcpb::CmdCommitResponse::Clear();
    }
    if (has_cmd_cleanup_resp()) {
      if (cmd_cleanup_resp_ != NULL) cmd_cleanup_resp_->::kvrpcpb::CmdCleanupResponse::Clear();
    }
    if (has_cmd_batch_get_resp()) {
      if (cmd_batch_get_resp_ != NULL) cmd_batch_get_resp_->::kvrpcpb::CmdBatchGetResponse::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 32512u) {
    if (has_cmd_batch_rollback_resp()) {
      if (cmd_batch_rollback_resp_ != NULL) cmd_batch_rollback_resp_->::kvrpcpb::CmdBatchRollbackResponse::Clear();
    }
    if (has_cmd_scan_lock_resp()) {
      if (cmd_scan_lock_resp_ != NULL) cmd_scan_lock_resp_->::kvrpcpb::CmdScanLockResponse::Clear();
    }
    if (has_cmd_resolve_lock_resp()) {
      if (cmd_resolve_lock_resp_ != NULL) cmd_resolve_lock_resp_->::kvrpcpb::CmdResolveLockResponse::Clear();
    }
    if (has_cmd_gc_resp()) {
      if (cmd_gc_resp_ != NULL) cmd_gc_resp_->::kvrpcpb::CmdGCResponse::Clear();
    }
    if (has_cmd_raw_get_resp()) {
      if (cmd_raw_get_resp_ != NULL) cmd_raw_get_resp_->::kvrpcpb::CmdRawGetResponse::Clear();
    }
    if (has_cmd_raw_put_resp()) {
      if (cmd_raw_put_resp_ != NULL) cmd_raw_put_resp_->::kvrpcpb::CmdRawPutResponse::Clear();
    }
    if (has_cmd_raw_delete_resp()) {
      if (cmd_raw_delete_resp_ != NULL) cmd_raw_delete_resp_->::kvrpcpb::CmdRawDeleteResponse::Clear();
    }
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .kvrpcpb.MessageType type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::kvrpcpb::MessageType_IsValid(value)) {
            set_type(static_cast< ::kvrpcpb::MessageType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_region_error;
        break;
      }

      // optional .errorpb.Error region_error = 2;
      case 2: {
        if (tag == 18) {
         parse_region_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_region_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_cmd_get_resp;
        break;
      }

      // optional .kvrpcpb.CmdGetResponse cmd_get_resp = 3;
      case 3: {
        if (tag == 26) {
         parse_cmd_get_resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cmd_get_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_cmd_scan_resp;
        break;
      }

      // optional .kvrpcpb.CmdScanResponse cmd_scan_resp = 4;
      case 4: {
        if (tag == 34) {
         parse_cmd_scan_resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cmd_scan_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_cmd_prewrite_resp;
        break;
      }

      // optional .kvrpcpb.CmdPrewriteResponse cmd_prewrite_resp = 5;
      case 5: {
        if (tag == 42) {
         parse_cmd_prewrite_resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cmd_prewrite_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_cmd_commit_resp;
        break;
      }

      // optional .kvrpcpb.CmdCommitResponse cmd_commit_resp = 6;
      case 6: {
        if (tag == 50) {
         parse_cmd_commit_resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cmd_commit_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_cmd_cleanup_resp;
        break;
      }

      // optional .kvrpcpb.CmdCleanupResponse cmd_cleanup_resp = 7;
      case 7: {
        if (tag == 58) {
         parse_cmd_cleanup_resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cmd_cleanup_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_cmd_batch_get_resp;
        break;
      }

      // optional .kvrpcpb.CmdBatchGetResponse cmd_batch_get_resp = 10;
      case 10: {
        if (tag == 82) {
         parse_cmd_batch_get_resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cmd_batch_get_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_cmd_batch_rollback_resp;
        break;
      }

      // optional .kvrpcpb.CmdBatchRollbackResponse cmd_batch_rollback_resp = 11;
      case 11: {
        if (tag == 90) {
         parse_cmd_batch_rollback_resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cmd_batch_rollback_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_cmd_scan_lock_resp;
        break;
      }

      // optional .kvrpcpb.CmdScanLockResponse cmd_scan_lock_resp = 12;
      case 12: {
        if (tag == 98) {
         parse_cmd_scan_lock_resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cmd_scan_lock_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_cmd_resolve_lock_resp;
        break;
      }

      // optional .kvrpcpb.CmdResolveLockResponse cmd_resolve_lock_resp = 13;
      case 13: {
        if (tag == 106) {
         parse_cmd_resolve_lock_resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cmd_resolve_lock_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_cmd_gc_resp;
        break;
      }

      // optional .kvrpcpb.CmdGCResponse cmd_gc_resp = 14;
      case 14: {
        if (tag == 114) {
         parse_cmd_gc_resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cmd_gc_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(2050)) goto parse_cmd_raw_get_resp;
        break;
      }

      // optional .kvrpcpb.CmdRawGetResponse cmd_raw_get_resp = 256;
      case 256: {
        if (tag == 2050) {
         parse_cmd_raw_get_resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cmd_raw_get_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(2058)) goto parse_cmd_raw_put_resp;
        break;
      }

      // optional .kvrpcpb.CmdRawPutResponse cmd_raw_put_resp = 257;
      case 257: {
        if (tag == 2058) {
         parse_cmd_raw_put_resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cmd_raw_put_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(2066)) goto parse_cmd_raw_delete_resp;
        break;
      }

      // optional .kvrpcpb.CmdRawDeleteResponse cmd_raw_delete_resp = 258;
      case 258: {
        if (tag == 2066) {
         parse_cmd_raw_delete_resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cmd_raw_delete_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.Response)
  return false;
#undef DO_
}

void Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.Response)
  // optional .kvrpcpb.MessageType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .errorpb.Error region_error = 2;
  if (has_region_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->region_error_, output);
  }

  // optional .kvrpcpb.CmdGetResponse cmd_get_resp = 3;
  if (has_cmd_get_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->cmd_get_resp_, output);
  }

  // optional .kvrpcpb.CmdScanResponse cmd_scan_resp = 4;
  if (has_cmd_scan_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->cmd_scan_resp_, output);
  }

  // optional .kvrpcpb.CmdPrewriteResponse cmd_prewrite_resp = 5;
  if (has_cmd_prewrite_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->cmd_prewrite_resp_, output);
  }

  // optional .kvrpcpb.CmdCommitResponse cmd_commit_resp = 6;
  if (has_cmd_commit_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->cmd_commit_resp_, output);
  }

  // optional .kvrpcpb.CmdCleanupResponse cmd_cleanup_resp = 7;
  if (has_cmd_cleanup_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->cmd_cleanup_resp_, output);
  }

  // optional .kvrpcpb.CmdBatchGetResponse cmd_batch_get_resp = 10;
  if (has_cmd_batch_get_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->cmd_batch_get_resp_, output);
  }

  // optional .kvrpcpb.CmdBatchRollbackResponse cmd_batch_rollback_resp = 11;
  if (has_cmd_batch_rollback_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *this->cmd_batch_rollback_resp_, output);
  }

  // optional .kvrpcpb.CmdScanLockResponse cmd_scan_lock_resp = 12;
  if (has_cmd_scan_lock_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *this->cmd_scan_lock_resp_, output);
  }

  // optional .kvrpcpb.CmdResolveLockResponse cmd_resolve_lock_resp = 13;
  if (has_cmd_resolve_lock_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, *this->cmd_resolve_lock_resp_, output);
  }

  // optional .kvrpcpb.CmdGCResponse cmd_gc_resp = 14;
  if (has_cmd_gc_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, *this->cmd_gc_resp_, output);
  }

  // optional .kvrpcpb.CmdRawGetResponse cmd_raw_get_resp = 256;
  if (has_cmd_raw_get_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      256, *this->cmd_raw_get_resp_, output);
  }

  // optional .kvrpcpb.CmdRawPutResponse cmd_raw_put_resp = 257;
  if (has_cmd_raw_put_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      257, *this->cmd_raw_put_resp_, output);
  }

  // optional .kvrpcpb.CmdRawDeleteResponse cmd_raw_delete_resp = 258;
  if (has_cmd_raw_delete_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      258, *this->cmd_raw_delete_resp_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kvrpcpb.Response)
}

::google::protobuf::uint8* Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.Response)
  // optional .kvrpcpb.MessageType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional .errorpb.Error region_error = 2;
  if (has_region_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->region_error_, false, target);
  }

  // optional .kvrpcpb.CmdGetResponse cmd_get_resp = 3;
  if (has_cmd_get_resp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->cmd_get_resp_, false, target);
  }

  // optional .kvrpcpb.CmdScanResponse cmd_scan_resp = 4;
  if (has_cmd_scan_resp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->cmd_scan_resp_, false, target);
  }

  // optional .kvrpcpb.CmdPrewriteResponse cmd_prewrite_resp = 5;
  if (has_cmd_prewrite_resp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->cmd_prewrite_resp_, false, target);
  }

  // optional .kvrpcpb.CmdCommitResponse cmd_commit_resp = 6;
  if (has_cmd_commit_resp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->cmd_commit_resp_, false, target);
  }

  // optional .kvrpcpb.CmdCleanupResponse cmd_cleanup_resp = 7;
  if (has_cmd_cleanup_resp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->cmd_cleanup_resp_, false, target);
  }

  // optional .kvrpcpb.CmdBatchGetResponse cmd_batch_get_resp = 10;
  if (has_cmd_batch_get_resp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *this->cmd_batch_get_resp_, false, target);
  }

  // optional .kvrpcpb.CmdBatchRollbackResponse cmd_batch_rollback_resp = 11;
  if (has_cmd_batch_rollback_resp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, *this->cmd_batch_rollback_resp_, false, target);
  }

  // optional .kvrpcpb.CmdScanLockResponse cmd_scan_lock_resp = 12;
  if (has_cmd_scan_lock_resp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, *this->cmd_scan_lock_resp_, false, target);
  }

  // optional .kvrpcpb.CmdResolveLockResponse cmd_resolve_lock_resp = 13;
  if (has_cmd_resolve_lock_resp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        13, *this->cmd_resolve_lock_resp_, false, target);
  }

  // optional .kvrpcpb.CmdGCResponse cmd_gc_resp = 14;
  if (has_cmd_gc_resp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        14, *this->cmd_gc_resp_, false, target);
  }

  // optional .kvrpcpb.CmdRawGetResponse cmd_raw_get_resp = 256;
  if (has_cmd_raw_get_resp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        256, *this->cmd_raw_get_resp_, false, target);
  }

  // optional .kvrpcpb.CmdRawPutResponse cmd_raw_put_resp = 257;
  if (has_cmd_raw_put_resp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        257, *this->cmd_raw_put_resp_, false, target);
  }

  // optional .kvrpcpb.CmdRawDeleteResponse cmd_raw_delete_resp = 258;
  if (has_cmd_raw_delete_resp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        258, *this->cmd_raw_delete_resp_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.Response)
  return target;
}

size_t Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.Response)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional .kvrpcpb.MessageType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .errorpb.Error region_error = 2;
    if (has_region_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->region_error_);
    }

    // optional .kvrpcpb.CmdGetResponse cmd_get_resp = 3;
    if (has_cmd_get_resp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->cmd_get_resp_);
    }

    // optional .kvrpcpb.CmdScanResponse cmd_scan_resp = 4;
    if (has_cmd_scan_resp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->cmd_scan_resp_);
    }

    // optional .kvrpcpb.CmdPrewriteResponse cmd_prewrite_resp = 5;
    if (has_cmd_prewrite_resp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->cmd_prewrite_resp_);
    }

    // optional .kvrpcpb.CmdCommitResponse cmd_commit_resp = 6;
    if (has_cmd_commit_resp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->cmd_commit_resp_);
    }

    // optional .kvrpcpb.CmdCleanupResponse cmd_cleanup_resp = 7;
    if (has_cmd_cleanup_resp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->cmd_cleanup_resp_);
    }

    // optional .kvrpcpb.CmdBatchGetResponse cmd_batch_get_resp = 10;
    if (has_cmd_batch_get_resp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->cmd_batch_get_resp_);
    }

  }
  if (_has_bits_[8 / 32] & 32512u) {
    // optional .kvrpcpb.CmdBatchRollbackResponse cmd_batch_rollback_resp = 11;
    if (has_cmd_batch_rollback_resp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->cmd_batch_rollback_resp_);
    }

    // optional .kvrpcpb.CmdScanLockResponse cmd_scan_lock_resp = 12;
    if (has_cmd_scan_lock_resp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->cmd_scan_lock_resp_);
    }

    // optional .kvrpcpb.CmdResolveLockResponse cmd_resolve_lock_resp = 13;
    if (has_cmd_resolve_lock_resp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->cmd_resolve_lock_resp_);
    }

    // optional .kvrpcpb.CmdGCResponse cmd_gc_resp = 14;
    if (has_cmd_gc_resp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->cmd_gc_resp_);
    }

    // optional .kvrpcpb.CmdRawGetResponse cmd_raw_get_resp = 256;
    if (has_cmd_raw_get_resp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->cmd_raw_get_resp_);
    }

    // optional .kvrpcpb.CmdRawPutResponse cmd_raw_put_resp = 257;
    if (has_cmd_raw_put_resp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->cmd_raw_put_resp_);
    }

    // optional .kvrpcpb.CmdRawDeleteResponse cmd_raw_delete_resp = 258;
    if (has_cmd_raw_delete_resp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->cmd_raw_delete_resp_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.Response)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.Response)
    UnsafeMergeFrom(*source);
  }
}

void Response::MergeFrom(const Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.Response)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Response::UnsafeMergeFrom(const Response& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_region_error()) {
      mutable_region_error()->::errorpb::Error::MergeFrom(from.region_error());
    }
    if (from.has_cmd_get_resp()) {
      mutable_cmd_get_resp()->::kvrpcpb::CmdGetResponse::MergeFrom(from.cmd_get_resp());
    }
    if (from.has_cmd_scan_resp()) {
      mutable_cmd_scan_resp()->::kvrpcpb::CmdScanResponse::MergeFrom(from.cmd_scan_resp());
    }
    if (from.has_cmd_prewrite_resp()) {
      mutable_cmd_prewrite_resp()->::kvrpcpb::CmdPrewriteResponse::MergeFrom(from.cmd_prewrite_resp());
    }
    if (from.has_cmd_commit_resp()) {
      mutable_cmd_commit_resp()->::kvrpcpb::CmdCommitResponse::MergeFrom(from.cmd_commit_resp());
    }
    if (from.has_cmd_cleanup_resp()) {
      mutable_cmd_cleanup_resp()->::kvrpcpb::CmdCleanupResponse::MergeFrom(from.cmd_cleanup_resp());
    }
    if (from.has_cmd_batch_get_resp()) {
      mutable_cmd_batch_get_resp()->::kvrpcpb::CmdBatchGetResponse::MergeFrom(from.cmd_batch_get_resp());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_cmd_batch_rollback_resp()) {
      mutable_cmd_batch_rollback_resp()->::kvrpcpb::CmdBatchRollbackResponse::MergeFrom(from.cmd_batch_rollback_resp());
    }
    if (from.has_cmd_scan_lock_resp()) {
      mutable_cmd_scan_lock_resp()->::kvrpcpb::CmdScanLockResponse::MergeFrom(from.cmd_scan_lock_resp());
    }
    if (from.has_cmd_resolve_lock_resp()) {
      mutable_cmd_resolve_lock_resp()->::kvrpcpb::CmdResolveLockResponse::MergeFrom(from.cmd_resolve_lock_resp());
    }
    if (from.has_cmd_gc_resp()) {
      mutable_cmd_gc_resp()->::kvrpcpb::CmdGCResponse::MergeFrom(from.cmd_gc_resp());
    }
    if (from.has_cmd_raw_get_resp()) {
      mutable_cmd_raw_get_resp()->::kvrpcpb::CmdRawGetResponse::MergeFrom(from.cmd_raw_get_resp());
    }
    if (from.has_cmd_raw_put_resp()) {
      mutable_cmd_raw_put_resp()->::kvrpcpb::CmdRawPutResponse::MergeFrom(from.cmd_raw_put_resp());
    }
    if (from.has_cmd_raw_delete_resp()) {
      mutable_cmd_raw_delete_resp()->::kvrpcpb::CmdRawDeleteResponse::MergeFrom(from.cmd_raw_delete_resp());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Response::CopyFrom(const Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.Response)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Response::IsInitialized() const {

  return true;
}

void Response::Swap(Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Response::InternalSwap(Response* other) {
  std::swap(type_, other->type_);
  std::swap(region_error_, other->region_error_);
  std::swap(cmd_get_resp_, other->cmd_get_resp_);
  std::swap(cmd_scan_resp_, other->cmd_scan_resp_);
  std::swap(cmd_prewrite_resp_, other->cmd_prewrite_resp_);
  std::swap(cmd_commit_resp_, other->cmd_commit_resp_);
  std::swap(cmd_cleanup_resp_, other->cmd_cleanup_resp_);
  std::swap(cmd_batch_get_resp_, other->cmd_batch_get_resp_);
  std::swap(cmd_batch_rollback_resp_, other->cmd_batch_rollback_resp_);
  std::swap(cmd_scan_lock_resp_, other->cmd_scan_lock_resp_);
  std::swap(cmd_resolve_lock_resp_, other->cmd_resolve_lock_resp_);
  std::swap(cmd_gc_resp_, other->cmd_gc_resp_);
  std::swap(cmd_raw_get_resp_, other->cmd_raw_get_resp_);
  std::swap(cmd_raw_put_resp_, other->cmd_raw_put_resp_);
  std::swap(cmd_raw_delete_resp_, other->cmd_raw_delete_resp_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Response_descriptor_;
  metadata.reflection = Response_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Response

// optional .kvrpcpb.MessageType type = 1;
bool Response::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Response::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
void Response::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void Response::clear_type() {
  type_ = 0;
  clear_has_type();
}
::kvrpcpb::MessageType Response::type() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.Response.type)
  return static_cast< ::kvrpcpb::MessageType >(type_);
}
void Response::set_type(::kvrpcpb::MessageType value) {
  assert(::kvrpcpb::MessageType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:kvrpcpb.Response.type)
}

// optional .errorpb.Error region_error = 2;
bool Response::has_region_error() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Response::set_has_region_error() {
  _has_bits_[0] |= 0x00000002u;
}
void Response::clear_has_region_error() {
  _has_bits_[0] &= ~0x00000002u;
}
void Response::clear_region_error() {
  if (region_error_ != NULL) region_error_->::errorpb::Error::Clear();
  clear_has_region_error();
}
const ::errorpb::Error& Response::region_error() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.Response.region_error)
  return region_error_ != NULL ? *region_error_
                         : *::errorpb::Error::internal_default_instance();
}
::errorpb::Error* Response::mutable_region_error() {
  set_has_region_error();
  if (region_error_ == NULL) {
    region_error_ = new ::errorpb::Error;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.Response.region_error)
  return region_error_;
}
::errorpb::Error* Response::release_region_error() {
  // @@protoc_insertion_point(field_release:kvrpcpb.Response.region_error)
  clear_has_region_error();
  ::errorpb::Error* temp = region_error_;
  region_error_ = NULL;
  return temp;
}
void Response::set_allocated_region_error(::errorpb::Error* region_error) {
  delete region_error_;
  region_error_ = region_error;
  if (region_error) {
    set_has_region_error();
  } else {
    clear_has_region_error();
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.Response.region_error)
}

// optional .kvrpcpb.CmdGetResponse cmd_get_resp = 3;
bool Response::has_cmd_get_resp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Response::set_has_cmd_get_resp() {
  _has_bits_[0] |= 0x00000004u;
}
void Response::clear_has_cmd_get_resp() {
  _has_bits_[0] &= ~0x00000004u;
}
void Response::clear_cmd_get_resp() {
  if (cmd_get_resp_ != NULL) cmd_get_resp_->::kvrpcpb::CmdGetResponse::Clear();
  clear_has_cmd_get_resp();
}
const ::kvrpcpb::CmdGetResponse& Response::cmd_get_resp() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.Response.cmd_get_resp)
  return cmd_get_resp_ != NULL ? *cmd_get_resp_
                         : *::kvrpcpb::CmdGetResponse::internal_default_instance();
}
::kvrpcpb::CmdGetResponse* Response::mutable_cmd_get_resp() {
  set_has_cmd_get_resp();
  if (cmd_get_resp_ == NULL) {
    cmd_get_resp_ = new ::kvrpcpb::CmdGetResponse;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.Response.cmd_get_resp)
  return cmd_get_resp_;
}
::kvrpcpb::CmdGetResponse* Response::release_cmd_get_resp() {
  // @@protoc_insertion_point(field_release:kvrpcpb.Response.cmd_get_resp)
  clear_has_cmd_get_resp();
  ::kvrpcpb::CmdGetResponse* temp = cmd_get_resp_;
  cmd_get_resp_ = NULL;
  return temp;
}
void Response::set_allocated_cmd_get_resp(::kvrpcpb::CmdGetResponse* cmd_get_resp) {
  delete cmd_get_resp_;
  cmd_get_resp_ = cmd_get_resp;
  if (cmd_get_resp) {
    set_has_cmd_get_resp();
  } else {
    clear_has_cmd_get_resp();
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.Response.cmd_get_resp)
}

// optional .kvrpcpb.CmdScanResponse cmd_scan_resp = 4;
bool Response::has_cmd_scan_resp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Response::set_has_cmd_scan_resp() {
  _has_bits_[0] |= 0x00000008u;
}
void Response::clear_has_cmd_scan_resp() {
  _has_bits_[0] &= ~0x00000008u;
}
void Response::clear_cmd_scan_resp() {
  if (cmd_scan_resp_ != NULL) cmd_scan_resp_->::kvrpcpb::CmdScanResponse::Clear();
  clear_has_cmd_scan_resp();
}
const ::kvrpcpb::CmdScanResponse& Response::cmd_scan_resp() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.Response.cmd_scan_resp)
  return cmd_scan_resp_ != NULL ? *cmd_scan_resp_
                         : *::kvrpcpb::CmdScanResponse::internal_default_instance();
}
::kvrpcpb::CmdScanResponse* Response::mutable_cmd_scan_resp() {
  set_has_cmd_scan_resp();
  if (cmd_scan_resp_ == NULL) {
    cmd_scan_resp_ = new ::kvrpcpb::CmdScanResponse;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.Response.cmd_scan_resp)
  return cmd_scan_resp_;
}
::kvrpcpb::CmdScanResponse* Response::release_cmd_scan_resp() {
  // @@protoc_insertion_point(field_release:kvrpcpb.Response.cmd_scan_resp)
  clear_has_cmd_scan_resp();
  ::kvrpcpb::CmdScanResponse* temp = cmd_scan_resp_;
  cmd_scan_resp_ = NULL;
  return temp;
}
void Response::set_allocated_cmd_scan_resp(::kvrpcpb::CmdScanResponse* cmd_scan_resp) {
  delete cmd_scan_resp_;
  cmd_scan_resp_ = cmd_scan_resp;
  if (cmd_scan_resp) {
    set_has_cmd_scan_resp();
  } else {
    clear_has_cmd_scan_resp();
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.Response.cmd_scan_resp)
}

// optional .kvrpcpb.CmdPrewriteResponse cmd_prewrite_resp = 5;
bool Response::has_cmd_prewrite_resp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Response::set_has_cmd_prewrite_resp() {
  _has_bits_[0] |= 0x00000010u;
}
void Response::clear_has_cmd_prewrite_resp() {
  _has_bits_[0] &= ~0x00000010u;
}
void Response::clear_cmd_prewrite_resp() {
  if (cmd_prewrite_resp_ != NULL) cmd_prewrite_resp_->::kvrpcpb::CmdPrewriteResponse::Clear();
  clear_has_cmd_prewrite_resp();
}
const ::kvrpcpb::CmdPrewriteResponse& Response::cmd_prewrite_resp() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.Response.cmd_prewrite_resp)
  return cmd_prewrite_resp_ != NULL ? *cmd_prewrite_resp_
                         : *::kvrpcpb::CmdPrewriteResponse::internal_default_instance();
}
::kvrpcpb::CmdPrewriteResponse* Response::mutable_cmd_prewrite_resp() {
  set_has_cmd_prewrite_resp();
  if (cmd_prewrite_resp_ == NULL) {
    cmd_prewrite_resp_ = new ::kvrpcpb::CmdPrewriteResponse;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.Response.cmd_prewrite_resp)
  return cmd_prewrite_resp_;
}
::kvrpcpb::CmdPrewriteResponse* Response::release_cmd_prewrite_resp() {
  // @@protoc_insertion_point(field_release:kvrpcpb.Response.cmd_prewrite_resp)
  clear_has_cmd_prewrite_resp();
  ::kvrpcpb::CmdPrewriteResponse* temp = cmd_prewrite_resp_;
  cmd_prewrite_resp_ = NULL;
  return temp;
}
void Response::set_allocated_cmd_prewrite_resp(::kvrpcpb::CmdPrewriteResponse* cmd_prewrite_resp) {
  delete cmd_prewrite_resp_;
  cmd_prewrite_resp_ = cmd_prewrite_resp;
  if (cmd_prewrite_resp) {
    set_has_cmd_prewrite_resp();
  } else {
    clear_has_cmd_prewrite_resp();
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.Response.cmd_prewrite_resp)
}

// optional .kvrpcpb.CmdCommitResponse cmd_commit_resp = 6;
bool Response::has_cmd_commit_resp() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Response::set_has_cmd_commit_resp() {
  _has_bits_[0] |= 0x00000020u;
}
void Response::clear_has_cmd_commit_resp() {
  _has_bits_[0] &= ~0x00000020u;
}
void Response::clear_cmd_commit_resp() {
  if (cmd_commit_resp_ != NULL) cmd_commit_resp_->::kvrpcpb::CmdCommitResponse::Clear();
  clear_has_cmd_commit_resp();
}
const ::kvrpcpb::CmdCommitResponse& Response::cmd_commit_resp() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.Response.cmd_commit_resp)
  return cmd_commit_resp_ != NULL ? *cmd_commit_resp_
                         : *::kvrpcpb::CmdCommitResponse::internal_default_instance();
}
::kvrpcpb::CmdCommitResponse* Response::mutable_cmd_commit_resp() {
  set_has_cmd_commit_resp();
  if (cmd_commit_resp_ == NULL) {
    cmd_commit_resp_ = new ::kvrpcpb::CmdCommitResponse;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.Response.cmd_commit_resp)
  return cmd_commit_resp_;
}
::kvrpcpb::CmdCommitResponse* Response::release_cmd_commit_resp() {
  // @@protoc_insertion_point(field_release:kvrpcpb.Response.cmd_commit_resp)
  clear_has_cmd_commit_resp();
  ::kvrpcpb::CmdCommitResponse* temp = cmd_commit_resp_;
  cmd_commit_resp_ = NULL;
  return temp;
}
void Response::set_allocated_cmd_commit_resp(::kvrpcpb::CmdCommitResponse* cmd_commit_resp) {
  delete cmd_commit_resp_;
  cmd_commit_resp_ = cmd_commit_resp;
  if (cmd_commit_resp) {
    set_has_cmd_commit_resp();
  } else {
    clear_has_cmd_commit_resp();
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.Response.cmd_commit_resp)
}

// optional .kvrpcpb.CmdCleanupResponse cmd_cleanup_resp = 7;
bool Response::has_cmd_cleanup_resp() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Response::set_has_cmd_cleanup_resp() {
  _has_bits_[0] |= 0x00000040u;
}
void Response::clear_has_cmd_cleanup_resp() {
  _has_bits_[0] &= ~0x00000040u;
}
void Response::clear_cmd_cleanup_resp() {
  if (cmd_cleanup_resp_ != NULL) cmd_cleanup_resp_->::kvrpcpb::CmdCleanupResponse::Clear();
  clear_has_cmd_cleanup_resp();
}
const ::kvrpcpb::CmdCleanupResponse& Response::cmd_cleanup_resp() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.Response.cmd_cleanup_resp)
  return cmd_cleanup_resp_ != NULL ? *cmd_cleanup_resp_
                         : *::kvrpcpb::CmdCleanupResponse::internal_default_instance();
}
::kvrpcpb::CmdCleanupResponse* Response::mutable_cmd_cleanup_resp() {
  set_has_cmd_cleanup_resp();
  if (cmd_cleanup_resp_ == NULL) {
    cmd_cleanup_resp_ = new ::kvrpcpb::CmdCleanupResponse;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.Response.cmd_cleanup_resp)
  return cmd_cleanup_resp_;
}
::kvrpcpb::CmdCleanupResponse* Response::release_cmd_cleanup_resp() {
  // @@protoc_insertion_point(field_release:kvrpcpb.Response.cmd_cleanup_resp)
  clear_has_cmd_cleanup_resp();
  ::kvrpcpb::CmdCleanupResponse* temp = cmd_cleanup_resp_;
  cmd_cleanup_resp_ = NULL;
  return temp;
}
void Response::set_allocated_cmd_cleanup_resp(::kvrpcpb::CmdCleanupResponse* cmd_cleanup_resp) {
  delete cmd_cleanup_resp_;
  cmd_cleanup_resp_ = cmd_cleanup_resp;
  if (cmd_cleanup_resp) {
    set_has_cmd_cleanup_resp();
  } else {
    clear_has_cmd_cleanup_resp();
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.Response.cmd_cleanup_resp)
}

// optional .kvrpcpb.CmdBatchGetResponse cmd_batch_get_resp = 10;
bool Response::has_cmd_batch_get_resp() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Response::set_has_cmd_batch_get_resp() {
  _has_bits_[0] |= 0x00000080u;
}
void Response::clear_has_cmd_batch_get_resp() {
  _has_bits_[0] &= ~0x00000080u;
}
void Response::clear_cmd_batch_get_resp() {
  if (cmd_batch_get_resp_ != NULL) cmd_batch_get_resp_->::kvrpcpb::CmdBatchGetResponse::Clear();
  clear_has_cmd_batch_get_resp();
}
const ::kvrpcpb::CmdBatchGetResponse& Response::cmd_batch_get_resp() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.Response.cmd_batch_get_resp)
  return cmd_batch_get_resp_ != NULL ? *cmd_batch_get_resp_
                         : *::kvrpcpb::CmdBatchGetResponse::internal_default_instance();
}
::kvrpcpb::CmdBatchGetResponse* Response::mutable_cmd_batch_get_resp() {
  set_has_cmd_batch_get_resp();
  if (cmd_batch_get_resp_ == NULL) {
    cmd_batch_get_resp_ = new ::kvrpcpb::CmdBatchGetResponse;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.Response.cmd_batch_get_resp)
  return cmd_batch_get_resp_;
}
::kvrpcpb::CmdBatchGetResponse* Response::release_cmd_batch_get_resp() {
  // @@protoc_insertion_point(field_release:kvrpcpb.Response.cmd_batch_get_resp)
  clear_has_cmd_batch_get_resp();
  ::kvrpcpb::CmdBatchGetResponse* temp = cmd_batch_get_resp_;
  cmd_batch_get_resp_ = NULL;
  return temp;
}
void Response::set_allocated_cmd_batch_get_resp(::kvrpcpb::CmdBatchGetResponse* cmd_batch_get_resp) {
  delete cmd_batch_get_resp_;
  cmd_batch_get_resp_ = cmd_batch_get_resp;
  if (cmd_batch_get_resp) {
    set_has_cmd_batch_get_resp();
  } else {
    clear_has_cmd_batch_get_resp();
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.Response.cmd_batch_get_resp)
}

// optional .kvrpcpb.CmdBatchRollbackResponse cmd_batch_rollback_resp = 11;
bool Response::has_cmd_batch_rollback_resp() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Response::set_has_cmd_batch_rollback_resp() {
  _has_bits_[0] |= 0x00000100u;
}
void Response::clear_has_cmd_batch_rollback_resp() {
  _has_bits_[0] &= ~0x00000100u;
}
void Response::clear_cmd_batch_rollback_resp() {
  if (cmd_batch_rollback_resp_ != NULL) cmd_batch_rollback_resp_->::kvrpcpb::CmdBatchRollbackResponse::Clear();
  clear_has_cmd_batch_rollback_resp();
}
const ::kvrpcpb::CmdBatchRollbackResponse& Response::cmd_batch_rollback_resp() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.Response.cmd_batch_rollback_resp)
  return cmd_batch_rollback_resp_ != NULL ? *cmd_batch_rollback_resp_
                         : *::kvrpcpb::CmdBatchRollbackResponse::internal_default_instance();
}
::kvrpcpb::CmdBatchRollbackResponse* Response::mutable_cmd_batch_rollback_resp() {
  set_has_cmd_batch_rollback_resp();
  if (cmd_batch_rollback_resp_ == NULL) {
    cmd_batch_rollback_resp_ = new ::kvrpcpb::CmdBatchRollbackResponse;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.Response.cmd_batch_rollback_resp)
  return cmd_batch_rollback_resp_;
}
::kvrpcpb::CmdBatchRollbackResponse* Response::release_cmd_batch_rollback_resp() {
  // @@protoc_insertion_point(field_release:kvrpcpb.Response.cmd_batch_rollback_resp)
  clear_has_cmd_batch_rollback_resp();
  ::kvrpcpb::CmdBatchRollbackResponse* temp = cmd_batch_rollback_resp_;
  cmd_batch_rollback_resp_ = NULL;
  return temp;
}
void Response::set_allocated_cmd_batch_rollback_resp(::kvrpcpb::CmdBatchRollbackResponse* cmd_batch_rollback_resp) {
  delete cmd_batch_rollback_resp_;
  cmd_batch_rollback_resp_ = cmd_batch_rollback_resp;
  if (cmd_batch_rollback_resp) {
    set_has_cmd_batch_rollback_resp();
  } else {
    clear_has_cmd_batch_rollback_resp();
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.Response.cmd_batch_rollback_resp)
}

// optional .kvrpcpb.CmdScanLockResponse cmd_scan_lock_resp = 12;
bool Response::has_cmd_scan_lock_resp() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void Response::set_has_cmd_scan_lock_resp() {
  _has_bits_[0] |= 0x00000200u;
}
void Response::clear_has_cmd_scan_lock_resp() {
  _has_bits_[0] &= ~0x00000200u;
}
void Response::clear_cmd_scan_lock_resp() {
  if (cmd_scan_lock_resp_ != NULL) cmd_scan_lock_resp_->::kvrpcpb::CmdScanLockResponse::Clear();
  clear_has_cmd_scan_lock_resp();
}
const ::kvrpcpb::CmdScanLockResponse& Response::cmd_scan_lock_resp() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.Response.cmd_scan_lock_resp)
  return cmd_scan_lock_resp_ != NULL ? *cmd_scan_lock_resp_
                         : *::kvrpcpb::CmdScanLockResponse::internal_default_instance();
}
::kvrpcpb::CmdScanLockResponse* Response::mutable_cmd_scan_lock_resp() {
  set_has_cmd_scan_lock_resp();
  if (cmd_scan_lock_resp_ == NULL) {
    cmd_scan_lock_resp_ = new ::kvrpcpb::CmdScanLockResponse;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.Response.cmd_scan_lock_resp)
  return cmd_scan_lock_resp_;
}
::kvrpcpb::CmdScanLockResponse* Response::release_cmd_scan_lock_resp() {
  // @@protoc_insertion_point(field_release:kvrpcpb.Response.cmd_scan_lock_resp)
  clear_has_cmd_scan_lock_resp();
  ::kvrpcpb::CmdScanLockResponse* temp = cmd_scan_lock_resp_;
  cmd_scan_lock_resp_ = NULL;
  return temp;
}
void Response::set_allocated_cmd_scan_lock_resp(::kvrpcpb::CmdScanLockResponse* cmd_scan_lock_resp) {
  delete cmd_scan_lock_resp_;
  cmd_scan_lock_resp_ = cmd_scan_lock_resp;
  if (cmd_scan_lock_resp) {
    set_has_cmd_scan_lock_resp();
  } else {
    clear_has_cmd_scan_lock_resp();
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.Response.cmd_scan_lock_resp)
}

// optional .kvrpcpb.CmdResolveLockResponse cmd_resolve_lock_resp = 13;
bool Response::has_cmd_resolve_lock_resp() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void Response::set_has_cmd_resolve_lock_resp() {
  _has_bits_[0] |= 0x00000400u;
}
void Response::clear_has_cmd_resolve_lock_resp() {
  _has_bits_[0] &= ~0x00000400u;
}
void Response::clear_cmd_resolve_lock_resp() {
  if (cmd_resolve_lock_resp_ != NULL) cmd_resolve_lock_resp_->::kvrpcpb::CmdResolveLockResponse::Clear();
  clear_has_cmd_resolve_lock_resp();
}
const ::kvrpcpb::CmdResolveLockResponse& Response::cmd_resolve_lock_resp() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.Response.cmd_resolve_lock_resp)
  return cmd_resolve_lock_resp_ != NULL ? *cmd_resolve_lock_resp_
                         : *::kvrpcpb::CmdResolveLockResponse::internal_default_instance();
}
::kvrpcpb::CmdResolveLockResponse* Response::mutable_cmd_resolve_lock_resp() {
  set_has_cmd_resolve_lock_resp();
  if (cmd_resolve_lock_resp_ == NULL) {
    cmd_resolve_lock_resp_ = new ::kvrpcpb::CmdResolveLockResponse;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.Response.cmd_resolve_lock_resp)
  return cmd_resolve_lock_resp_;
}
::kvrpcpb::CmdResolveLockResponse* Response::release_cmd_resolve_lock_resp() {
  // @@protoc_insertion_point(field_release:kvrpcpb.Response.cmd_resolve_lock_resp)
  clear_has_cmd_resolve_lock_resp();
  ::kvrpcpb::CmdResolveLockResponse* temp = cmd_resolve_lock_resp_;
  cmd_resolve_lock_resp_ = NULL;
  return temp;
}
void Response::set_allocated_cmd_resolve_lock_resp(::kvrpcpb::CmdResolveLockResponse* cmd_resolve_lock_resp) {
  delete cmd_resolve_lock_resp_;
  cmd_resolve_lock_resp_ = cmd_resolve_lock_resp;
  if (cmd_resolve_lock_resp) {
    set_has_cmd_resolve_lock_resp();
  } else {
    clear_has_cmd_resolve_lock_resp();
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.Response.cmd_resolve_lock_resp)
}

// optional .kvrpcpb.CmdGCResponse cmd_gc_resp = 14;
bool Response::has_cmd_gc_resp() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void Response::set_has_cmd_gc_resp() {
  _has_bits_[0] |= 0x00000800u;
}
void Response::clear_has_cmd_gc_resp() {
  _has_bits_[0] &= ~0x00000800u;
}
void Response::clear_cmd_gc_resp() {
  if (cmd_gc_resp_ != NULL) cmd_gc_resp_->::kvrpcpb::CmdGCResponse::Clear();
  clear_has_cmd_gc_resp();
}
const ::kvrpcpb::CmdGCResponse& Response::cmd_gc_resp() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.Response.cmd_gc_resp)
  return cmd_gc_resp_ != NULL ? *cmd_gc_resp_
                         : *::kvrpcpb::CmdGCResponse::internal_default_instance();
}
::kvrpcpb::CmdGCResponse* Response::mutable_cmd_gc_resp() {
  set_has_cmd_gc_resp();
  if (cmd_gc_resp_ == NULL) {
    cmd_gc_resp_ = new ::kvrpcpb::CmdGCResponse;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.Response.cmd_gc_resp)
  return cmd_gc_resp_;
}
::kvrpcpb::CmdGCResponse* Response::release_cmd_gc_resp() {
  // @@protoc_insertion_point(field_release:kvrpcpb.Response.cmd_gc_resp)
  clear_has_cmd_gc_resp();
  ::kvrpcpb::CmdGCResponse* temp = cmd_gc_resp_;
  cmd_gc_resp_ = NULL;
  return temp;
}
void Response::set_allocated_cmd_gc_resp(::kvrpcpb::CmdGCResponse* cmd_gc_resp) {
  delete cmd_gc_resp_;
  cmd_gc_resp_ = cmd_gc_resp;
  if (cmd_gc_resp) {
    set_has_cmd_gc_resp();
  } else {
    clear_has_cmd_gc_resp();
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.Response.cmd_gc_resp)
}

// optional .kvrpcpb.CmdRawGetResponse cmd_raw_get_resp = 256;
bool Response::has_cmd_raw_get_resp() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void Response::set_has_cmd_raw_get_resp() {
  _has_bits_[0] |= 0x00001000u;
}
void Response::clear_has_cmd_raw_get_resp() {
  _has_bits_[0] &= ~0x00001000u;
}
void Response::clear_cmd_raw_get_resp() {
  if (cmd_raw_get_resp_ != NULL) cmd_raw_get_resp_->::kvrpcpb::CmdRawGetResponse::Clear();
  clear_has_cmd_raw_get_resp();
}
const ::kvrpcpb::CmdRawGetResponse& Response::cmd_raw_get_resp() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.Response.cmd_raw_get_resp)
  return cmd_raw_get_resp_ != NULL ? *cmd_raw_get_resp_
                         : *::kvrpcpb::CmdRawGetResponse::internal_default_instance();
}
::kvrpcpb::CmdRawGetResponse* Response::mutable_cmd_raw_get_resp() {
  set_has_cmd_raw_get_resp();
  if (cmd_raw_get_resp_ == NULL) {
    cmd_raw_get_resp_ = new ::kvrpcpb::CmdRawGetResponse;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.Response.cmd_raw_get_resp)
  return cmd_raw_get_resp_;
}
::kvrpcpb::CmdRawGetResponse* Response::release_cmd_raw_get_resp() {
  // @@protoc_insertion_point(field_release:kvrpcpb.Response.cmd_raw_get_resp)
  clear_has_cmd_raw_get_resp();
  ::kvrpcpb::CmdRawGetResponse* temp = cmd_raw_get_resp_;
  cmd_raw_get_resp_ = NULL;
  return temp;
}
void Response::set_allocated_cmd_raw_get_resp(::kvrpcpb::CmdRawGetResponse* cmd_raw_get_resp) {
  delete cmd_raw_get_resp_;
  cmd_raw_get_resp_ = cmd_raw_get_resp;
  if (cmd_raw_get_resp) {
    set_has_cmd_raw_get_resp();
  } else {
    clear_has_cmd_raw_get_resp();
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.Response.cmd_raw_get_resp)
}

// optional .kvrpcpb.CmdRawPutResponse cmd_raw_put_resp = 257;
bool Response::has_cmd_raw_put_resp() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void Response::set_has_cmd_raw_put_resp() {
  _has_bits_[0] |= 0x00002000u;
}
void Response::clear_has_cmd_raw_put_resp() {
  _has_bits_[0] &= ~0x00002000u;
}
void Response::clear_cmd_raw_put_resp() {
  if (cmd_raw_put_resp_ != NULL) cmd_raw_put_resp_->::kvrpcpb::CmdRawPutResponse::Clear();
  clear_has_cmd_raw_put_resp();
}
const ::kvrpcpb::CmdRawPutResponse& Response::cmd_raw_put_resp() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.Response.cmd_raw_put_resp)
  return cmd_raw_put_resp_ != NULL ? *cmd_raw_put_resp_
                         : *::kvrpcpb::CmdRawPutResponse::internal_default_instance();
}
::kvrpcpb::CmdRawPutResponse* Response::mutable_cmd_raw_put_resp() {
  set_has_cmd_raw_put_resp();
  if (cmd_raw_put_resp_ == NULL) {
    cmd_raw_put_resp_ = new ::kvrpcpb::CmdRawPutResponse;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.Response.cmd_raw_put_resp)
  return cmd_raw_put_resp_;
}
::kvrpcpb::CmdRawPutResponse* Response::release_cmd_raw_put_resp() {
  // @@protoc_insertion_point(field_release:kvrpcpb.Response.cmd_raw_put_resp)
  clear_has_cmd_raw_put_resp();
  ::kvrpcpb::CmdRawPutResponse* temp = cmd_raw_put_resp_;
  cmd_raw_put_resp_ = NULL;
  return temp;
}
void Response::set_allocated_cmd_raw_put_resp(::kvrpcpb::CmdRawPutResponse* cmd_raw_put_resp) {
  delete cmd_raw_put_resp_;
  cmd_raw_put_resp_ = cmd_raw_put_resp;
  if (cmd_raw_put_resp) {
    set_has_cmd_raw_put_resp();
  } else {
    clear_has_cmd_raw_put_resp();
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.Response.cmd_raw_put_resp)
}

// optional .kvrpcpb.CmdRawDeleteResponse cmd_raw_delete_resp = 258;
bool Response::has_cmd_raw_delete_resp() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void Response::set_has_cmd_raw_delete_resp() {
  _has_bits_[0] |= 0x00004000u;
}
void Response::clear_has_cmd_raw_delete_resp() {
  _has_bits_[0] &= ~0x00004000u;
}
void Response::clear_cmd_raw_delete_resp() {
  if (cmd_raw_delete_resp_ != NULL) cmd_raw_delete_resp_->::kvrpcpb::CmdRawDeleteResponse::Clear();
  clear_has_cmd_raw_delete_resp();
}
const ::kvrpcpb::CmdRawDeleteResponse& Response::cmd_raw_delete_resp() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.Response.cmd_raw_delete_resp)
  return cmd_raw_delete_resp_ != NULL ? *cmd_raw_delete_resp_
                         : *::kvrpcpb::CmdRawDeleteResponse::internal_default_instance();
}
::kvrpcpb::CmdRawDeleteResponse* Response::mutable_cmd_raw_delete_resp() {
  set_has_cmd_raw_delete_resp();
  if (cmd_raw_delete_resp_ == NULL) {
    cmd_raw_delete_resp_ = new ::kvrpcpb::CmdRawDeleteResponse;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.Response.cmd_raw_delete_resp)
  return cmd_raw_delete_resp_;
}
::kvrpcpb::CmdRawDeleteResponse* Response::release_cmd_raw_delete_resp() {
  // @@protoc_insertion_point(field_release:kvrpcpb.Response.cmd_raw_delete_resp)
  clear_has_cmd_raw_delete_resp();
  ::kvrpcpb::CmdRawDeleteResponse* temp = cmd_raw_delete_resp_;
  cmd_raw_delete_resp_ = NULL;
  return temp;
}
void Response::set_allocated_cmd_raw_delete_resp(::kvrpcpb::CmdRawDeleteResponse* cmd_raw_delete_resp) {
  delete cmd_raw_delete_resp_;
  cmd_raw_delete_resp_ = cmd_raw_delete_resp;
  if (cmd_raw_delete_resp) {
    set_has_cmd_raw_delete_resp();
  } else {
    clear_has_cmd_raw_delete_resp();
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.Response.cmd_raw_delete_resp)
}

inline const Response* Response::internal_default_instance() {
  return &Response_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace kvrpcpb

// @@protoc_insertion_point(global_scope)
