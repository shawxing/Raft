// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msgpb.proto

#ifndef PROTOBUF_msgpb_2eproto__INCLUDED
#define PROTOBUF_msgpb_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "raft_cmdpb.pb.h"
#include "raft_serverpb.pb.h"
#include "kvrpcpb.pb.h"
#include "coprocessor.pb.h"
#include "pdpb.pb.h"
// @@protoc_insertion_point(includes)

namespace msgpb {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_msgpb_2eproto();
void protobuf_InitDefaults_msgpb_2eproto();
void protobuf_AssignDesc_msgpb_2eproto();
void protobuf_ShutdownFile_msgpb_2eproto();

class Message;

enum MessageType {
  None = 0,
  Cmd = 1,
  CmdResp = 2,
  Raft = 3,
  KvReq = 4,
  KvResp = 5,
  CopReq = 6,
  CopResp = 7,
  PdReq = 8,
  PdResp = 9
};
bool MessageType_IsValid(int value);
const MessageType MessageType_MIN = None;
const MessageType MessageType_MAX = PdResp;
const int MessageType_ARRAYSIZE = MessageType_MAX + 1;

const ::google::protobuf::EnumDescriptor* MessageType_descriptor();
inline const ::std::string& MessageType_Name(MessageType value) {
  return ::google::protobuf::internal::NameOfEnum(
    MessageType_descriptor(), value);
}
inline bool MessageType_Parse(
    const ::std::string& name, MessageType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MessageType>(
    MessageType_descriptor(), name, value);
}
// ===================================================================

class Message : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:msgpb.Message) */ {
 public:
  Message();
  virtual ~Message();

  Message(const Message& from);

  inline Message& operator=(const Message& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Message& default_instance();

  static const Message* internal_default_instance();

  void Swap(Message* other);

  // implements Message ----------------------------------------------

  inline Message* New() const { return New(NULL); }

  Message* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Message& from);
  void MergeFrom(const Message& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Message* other);
  void UnsafeMergeFrom(const Message& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .msgpb.MessageType msg_type = 1;
  bool has_msg_type() const;
  void clear_msg_type();
  static const int kMsgTypeFieldNumber = 1;
  ::msgpb::MessageType msg_type() const;
  void set_msg_type(::msgpb::MessageType value);

  // optional .raft_cmdpb.RaftCmdRequest cmd_req = 2;
  bool has_cmd_req() const;
  void clear_cmd_req();
  static const int kCmdReqFieldNumber = 2;
  const ::raft_cmdpb::RaftCmdRequest& cmd_req() const;
  ::raft_cmdpb::RaftCmdRequest* mutable_cmd_req();
  ::raft_cmdpb::RaftCmdRequest* release_cmd_req();
  void set_allocated_cmd_req(::raft_cmdpb::RaftCmdRequest* cmd_req);

  // optional .raft_cmdpb.RaftCmdResponse cmd_resp = 3;
  bool has_cmd_resp() const;
  void clear_cmd_resp();
  static const int kCmdRespFieldNumber = 3;
  const ::raft_cmdpb::RaftCmdResponse& cmd_resp() const;
  ::raft_cmdpb::RaftCmdResponse* mutable_cmd_resp();
  ::raft_cmdpb::RaftCmdResponse* release_cmd_resp();
  void set_allocated_cmd_resp(::raft_cmdpb::RaftCmdResponse* cmd_resp);

  // optional .raft_serverpb.RaftMessage raft = 4;
  bool has_raft() const;
  void clear_raft();
  static const int kRaftFieldNumber = 4;
  const ::raft_serverpb::RaftMessage& raft() const;
  ::raft_serverpb::RaftMessage* mutable_raft();
  ::raft_serverpb::RaftMessage* release_raft();
  void set_allocated_raft(::raft_serverpb::RaftMessage* raft);

  // optional .kvrpcpb.Request kv_req = 5;
  bool has_kv_req() const;
  void clear_kv_req();
  static const int kKvReqFieldNumber = 5;
  const ::kvrpcpb::Request& kv_req() const;
  ::kvrpcpb::Request* mutable_kv_req();
  ::kvrpcpb::Request* release_kv_req();
  void set_allocated_kv_req(::kvrpcpb::Request* kv_req);

  // optional .kvrpcpb.Response kv_resp = 6;
  bool has_kv_resp() const;
  void clear_kv_resp();
  static const int kKvRespFieldNumber = 6;
  const ::kvrpcpb::Response& kv_resp() const;
  ::kvrpcpb::Response* mutable_kv_resp();
  ::kvrpcpb::Response* release_kv_resp();
  void set_allocated_kv_resp(::kvrpcpb::Response* kv_resp);

  // optional .coprocessor.Request cop_req = 7;
  bool has_cop_req() const;
  void clear_cop_req();
  static const int kCopReqFieldNumber = 7;
  const ::coprocessor::Request& cop_req() const;
  ::coprocessor::Request* mutable_cop_req();
  ::coprocessor::Request* release_cop_req();
  void set_allocated_cop_req(::coprocessor::Request* cop_req);

  // optional .coprocessor.Response cop_resp = 8;
  bool has_cop_resp() const;
  void clear_cop_resp();
  static const int kCopRespFieldNumber = 8;
  const ::coprocessor::Response& cop_resp() const;
  ::coprocessor::Response* mutable_cop_resp();
  ::coprocessor::Response* release_cop_resp();
  void set_allocated_cop_resp(::coprocessor::Response* cop_resp);

  // optional .pdpb.Request pd_req = 9;
  bool has_pd_req() const;
  void clear_pd_req();
  static const int kPdReqFieldNumber = 9;
  const ::pdpb::Request& pd_req() const;
  ::pdpb::Request* mutable_pd_req();
  ::pdpb::Request* release_pd_req();
  void set_allocated_pd_req(::pdpb::Request* pd_req);

  // optional .pdpb.Response pd_resp = 10;
  bool has_pd_resp() const;
  void clear_pd_resp();
  static const int kPdRespFieldNumber = 10;
  const ::pdpb::Response& pd_resp() const;
  ::pdpb::Response* mutable_pd_resp();
  ::pdpb::Response* release_pd_resp();
  void set_allocated_pd_resp(::pdpb::Response* pd_resp);

  // @@protoc_insertion_point(class_scope:msgpb.Message)
 private:
  inline void set_has_msg_type();
  inline void clear_has_msg_type();
  inline void set_has_cmd_req();
  inline void clear_has_cmd_req();
  inline void set_has_cmd_resp();
  inline void clear_has_cmd_resp();
  inline void set_has_raft();
  inline void clear_has_raft();
  inline void set_has_kv_req();
  inline void clear_has_kv_req();
  inline void set_has_kv_resp();
  inline void clear_has_kv_resp();
  inline void set_has_cop_req();
  inline void clear_has_cop_req();
  inline void set_has_cop_resp();
  inline void clear_has_cop_resp();
  inline void set_has_pd_req();
  inline void clear_has_pd_req();
  inline void set_has_pd_resp();
  inline void clear_has_pd_resp();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::raft_cmdpb::RaftCmdRequest* cmd_req_;
  ::raft_cmdpb::RaftCmdResponse* cmd_resp_;
  ::raft_serverpb::RaftMessage* raft_;
  ::kvrpcpb::Request* kv_req_;
  ::kvrpcpb::Response* kv_resp_;
  ::coprocessor::Request* cop_req_;
  ::coprocessor::Response* cop_resp_;
  ::pdpb::Request* pd_req_;
  ::pdpb::Response* pd_resp_;
  int msg_type_;
  friend void  protobuf_InitDefaults_msgpb_2eproto_impl();
  friend void  protobuf_AddDesc_msgpb_2eproto_impl();
  friend void protobuf_AssignDesc_msgpb_2eproto();
  friend void protobuf_ShutdownFile_msgpb_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<Message> Message_default_instance_;

// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Message

// optional .msgpb.MessageType msg_type = 1;
inline bool Message::has_msg_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Message::set_has_msg_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Message::clear_has_msg_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Message::clear_msg_type() {
  msg_type_ = 0;
  clear_has_msg_type();
}
inline ::msgpb::MessageType Message::msg_type() const {
  // @@protoc_insertion_point(field_get:msgpb.Message.msg_type)
  return static_cast< ::msgpb::MessageType >(msg_type_);
}
inline void Message::set_msg_type(::msgpb::MessageType value) {
  assert(::msgpb::MessageType_IsValid(value));
  set_has_msg_type();
  msg_type_ = value;
  // @@protoc_insertion_point(field_set:msgpb.Message.msg_type)
}

// optional .raft_cmdpb.RaftCmdRequest cmd_req = 2;
inline bool Message::has_cmd_req() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Message::set_has_cmd_req() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Message::clear_has_cmd_req() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Message::clear_cmd_req() {
  if (cmd_req_ != NULL) cmd_req_->::raft_cmdpb::RaftCmdRequest::Clear();
  clear_has_cmd_req();
}
inline const ::raft_cmdpb::RaftCmdRequest& Message::cmd_req() const {
  // @@protoc_insertion_point(field_get:msgpb.Message.cmd_req)
  return cmd_req_ != NULL ? *cmd_req_
                         : *::raft_cmdpb::RaftCmdRequest::internal_default_instance();
}
inline ::raft_cmdpb::RaftCmdRequest* Message::mutable_cmd_req() {
  set_has_cmd_req();
  if (cmd_req_ == NULL) {
    cmd_req_ = new ::raft_cmdpb::RaftCmdRequest;
  }
  // @@protoc_insertion_point(field_mutable:msgpb.Message.cmd_req)
  return cmd_req_;
}
inline ::raft_cmdpb::RaftCmdRequest* Message::release_cmd_req() {
  // @@protoc_insertion_point(field_release:msgpb.Message.cmd_req)
  clear_has_cmd_req();
  ::raft_cmdpb::RaftCmdRequest* temp = cmd_req_;
  cmd_req_ = NULL;
  return temp;
}
inline void Message::set_allocated_cmd_req(::raft_cmdpb::RaftCmdRequest* cmd_req) {
  delete cmd_req_;
  cmd_req_ = cmd_req;
  if (cmd_req) {
    set_has_cmd_req();
  } else {
    clear_has_cmd_req();
  }
  // @@protoc_insertion_point(field_set_allocated:msgpb.Message.cmd_req)
}

// optional .raft_cmdpb.RaftCmdResponse cmd_resp = 3;
inline bool Message::has_cmd_resp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Message::set_has_cmd_resp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Message::clear_has_cmd_resp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Message::clear_cmd_resp() {
  if (cmd_resp_ != NULL) cmd_resp_->::raft_cmdpb::RaftCmdResponse::Clear();
  clear_has_cmd_resp();
}
inline const ::raft_cmdpb::RaftCmdResponse& Message::cmd_resp() const {
  // @@protoc_insertion_point(field_get:msgpb.Message.cmd_resp)
  return cmd_resp_ != NULL ? *cmd_resp_
                         : *::raft_cmdpb::RaftCmdResponse::internal_default_instance();
}
inline ::raft_cmdpb::RaftCmdResponse* Message::mutable_cmd_resp() {
  set_has_cmd_resp();
  if (cmd_resp_ == NULL) {
    cmd_resp_ = new ::raft_cmdpb::RaftCmdResponse;
  }
  // @@protoc_insertion_point(field_mutable:msgpb.Message.cmd_resp)
  return cmd_resp_;
}
inline ::raft_cmdpb::RaftCmdResponse* Message::release_cmd_resp() {
  // @@protoc_insertion_point(field_release:msgpb.Message.cmd_resp)
  clear_has_cmd_resp();
  ::raft_cmdpb::RaftCmdResponse* temp = cmd_resp_;
  cmd_resp_ = NULL;
  return temp;
}
inline void Message::set_allocated_cmd_resp(::raft_cmdpb::RaftCmdResponse* cmd_resp) {
  delete cmd_resp_;
  cmd_resp_ = cmd_resp;
  if (cmd_resp) {
    set_has_cmd_resp();
  } else {
    clear_has_cmd_resp();
  }
  // @@protoc_insertion_point(field_set_allocated:msgpb.Message.cmd_resp)
}

// optional .raft_serverpb.RaftMessage raft = 4;
inline bool Message::has_raft() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Message::set_has_raft() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Message::clear_has_raft() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Message::clear_raft() {
  if (raft_ != NULL) raft_->::raft_serverpb::RaftMessage::Clear();
  clear_has_raft();
}
inline const ::raft_serverpb::RaftMessage& Message::raft() const {
  // @@protoc_insertion_point(field_get:msgpb.Message.raft)
  return raft_ != NULL ? *raft_
                         : *::raft_serverpb::RaftMessage::internal_default_instance();
}
inline ::raft_serverpb::RaftMessage* Message::mutable_raft() {
  set_has_raft();
  if (raft_ == NULL) {
    raft_ = new ::raft_serverpb::RaftMessage;
  }
  // @@protoc_insertion_point(field_mutable:msgpb.Message.raft)
  return raft_;
}
inline ::raft_serverpb::RaftMessage* Message::release_raft() {
  // @@protoc_insertion_point(field_release:msgpb.Message.raft)
  clear_has_raft();
  ::raft_serverpb::RaftMessage* temp = raft_;
  raft_ = NULL;
  return temp;
}
inline void Message::set_allocated_raft(::raft_serverpb::RaftMessage* raft) {
  delete raft_;
  raft_ = raft;
  if (raft) {
    set_has_raft();
  } else {
    clear_has_raft();
  }
  // @@protoc_insertion_point(field_set_allocated:msgpb.Message.raft)
}

// optional .kvrpcpb.Request kv_req = 5;
inline bool Message::has_kv_req() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Message::set_has_kv_req() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Message::clear_has_kv_req() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Message::clear_kv_req() {
  if (kv_req_ != NULL) kv_req_->::kvrpcpb::Request::Clear();
  clear_has_kv_req();
}
inline const ::kvrpcpb::Request& Message::kv_req() const {
  // @@protoc_insertion_point(field_get:msgpb.Message.kv_req)
  return kv_req_ != NULL ? *kv_req_
                         : *::kvrpcpb::Request::internal_default_instance();
}
inline ::kvrpcpb::Request* Message::mutable_kv_req() {
  set_has_kv_req();
  if (kv_req_ == NULL) {
    kv_req_ = new ::kvrpcpb::Request;
  }
  // @@protoc_insertion_point(field_mutable:msgpb.Message.kv_req)
  return kv_req_;
}
inline ::kvrpcpb::Request* Message::release_kv_req() {
  // @@protoc_insertion_point(field_release:msgpb.Message.kv_req)
  clear_has_kv_req();
  ::kvrpcpb::Request* temp = kv_req_;
  kv_req_ = NULL;
  return temp;
}
inline void Message::set_allocated_kv_req(::kvrpcpb::Request* kv_req) {
  delete kv_req_;
  kv_req_ = kv_req;
  if (kv_req) {
    set_has_kv_req();
  } else {
    clear_has_kv_req();
  }
  // @@protoc_insertion_point(field_set_allocated:msgpb.Message.kv_req)
}

// optional .kvrpcpb.Response kv_resp = 6;
inline bool Message::has_kv_resp() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Message::set_has_kv_resp() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Message::clear_has_kv_resp() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Message::clear_kv_resp() {
  if (kv_resp_ != NULL) kv_resp_->::kvrpcpb::Response::Clear();
  clear_has_kv_resp();
}
inline const ::kvrpcpb::Response& Message::kv_resp() const {
  // @@protoc_insertion_point(field_get:msgpb.Message.kv_resp)
  return kv_resp_ != NULL ? *kv_resp_
                         : *::kvrpcpb::Response::internal_default_instance();
}
inline ::kvrpcpb::Response* Message::mutable_kv_resp() {
  set_has_kv_resp();
  if (kv_resp_ == NULL) {
    kv_resp_ = new ::kvrpcpb::Response;
  }
  // @@protoc_insertion_point(field_mutable:msgpb.Message.kv_resp)
  return kv_resp_;
}
inline ::kvrpcpb::Response* Message::release_kv_resp() {
  // @@protoc_insertion_point(field_release:msgpb.Message.kv_resp)
  clear_has_kv_resp();
  ::kvrpcpb::Response* temp = kv_resp_;
  kv_resp_ = NULL;
  return temp;
}
inline void Message::set_allocated_kv_resp(::kvrpcpb::Response* kv_resp) {
  delete kv_resp_;
  kv_resp_ = kv_resp;
  if (kv_resp) {
    set_has_kv_resp();
  } else {
    clear_has_kv_resp();
  }
  // @@protoc_insertion_point(field_set_allocated:msgpb.Message.kv_resp)
}

// optional .coprocessor.Request cop_req = 7;
inline bool Message::has_cop_req() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Message::set_has_cop_req() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Message::clear_has_cop_req() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Message::clear_cop_req() {
  if (cop_req_ != NULL) cop_req_->::coprocessor::Request::Clear();
  clear_has_cop_req();
}
inline const ::coprocessor::Request& Message::cop_req() const {
  // @@protoc_insertion_point(field_get:msgpb.Message.cop_req)
  return cop_req_ != NULL ? *cop_req_
                         : *::coprocessor::Request::internal_default_instance();
}
inline ::coprocessor::Request* Message::mutable_cop_req() {
  set_has_cop_req();
  if (cop_req_ == NULL) {
    cop_req_ = new ::coprocessor::Request;
  }
  // @@protoc_insertion_point(field_mutable:msgpb.Message.cop_req)
  return cop_req_;
}
inline ::coprocessor::Request* Message::release_cop_req() {
  // @@protoc_insertion_point(field_release:msgpb.Message.cop_req)
  clear_has_cop_req();
  ::coprocessor::Request* temp = cop_req_;
  cop_req_ = NULL;
  return temp;
}
inline void Message::set_allocated_cop_req(::coprocessor::Request* cop_req) {
  delete cop_req_;
  cop_req_ = cop_req;
  if (cop_req) {
    set_has_cop_req();
  } else {
    clear_has_cop_req();
  }
  // @@protoc_insertion_point(field_set_allocated:msgpb.Message.cop_req)
}

// optional .coprocessor.Response cop_resp = 8;
inline bool Message::has_cop_resp() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Message::set_has_cop_resp() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Message::clear_has_cop_resp() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Message::clear_cop_resp() {
  if (cop_resp_ != NULL) cop_resp_->::coprocessor::Response::Clear();
  clear_has_cop_resp();
}
inline const ::coprocessor::Response& Message::cop_resp() const {
  // @@protoc_insertion_point(field_get:msgpb.Message.cop_resp)
  return cop_resp_ != NULL ? *cop_resp_
                         : *::coprocessor::Response::internal_default_instance();
}
inline ::coprocessor::Response* Message::mutable_cop_resp() {
  set_has_cop_resp();
  if (cop_resp_ == NULL) {
    cop_resp_ = new ::coprocessor::Response;
  }
  // @@protoc_insertion_point(field_mutable:msgpb.Message.cop_resp)
  return cop_resp_;
}
inline ::coprocessor::Response* Message::release_cop_resp() {
  // @@protoc_insertion_point(field_release:msgpb.Message.cop_resp)
  clear_has_cop_resp();
  ::coprocessor::Response* temp = cop_resp_;
  cop_resp_ = NULL;
  return temp;
}
inline void Message::set_allocated_cop_resp(::coprocessor::Response* cop_resp) {
  delete cop_resp_;
  cop_resp_ = cop_resp;
  if (cop_resp) {
    set_has_cop_resp();
  } else {
    clear_has_cop_resp();
  }
  // @@protoc_insertion_point(field_set_allocated:msgpb.Message.cop_resp)
}

// optional .pdpb.Request pd_req = 9;
inline bool Message::has_pd_req() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Message::set_has_pd_req() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Message::clear_has_pd_req() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Message::clear_pd_req() {
  if (pd_req_ != NULL) pd_req_->::pdpb::Request::Clear();
  clear_has_pd_req();
}
inline const ::pdpb::Request& Message::pd_req() const {
  // @@protoc_insertion_point(field_get:msgpb.Message.pd_req)
  return pd_req_ != NULL ? *pd_req_
                         : *::pdpb::Request::internal_default_instance();
}
inline ::pdpb::Request* Message::mutable_pd_req() {
  set_has_pd_req();
  if (pd_req_ == NULL) {
    pd_req_ = new ::pdpb::Request;
  }
  // @@protoc_insertion_point(field_mutable:msgpb.Message.pd_req)
  return pd_req_;
}
inline ::pdpb::Request* Message::release_pd_req() {
  // @@protoc_insertion_point(field_release:msgpb.Message.pd_req)
  clear_has_pd_req();
  ::pdpb::Request* temp = pd_req_;
  pd_req_ = NULL;
  return temp;
}
inline void Message::set_allocated_pd_req(::pdpb::Request* pd_req) {
  delete pd_req_;
  pd_req_ = pd_req;
  if (pd_req) {
    set_has_pd_req();
  } else {
    clear_has_pd_req();
  }
  // @@protoc_insertion_point(field_set_allocated:msgpb.Message.pd_req)
}

// optional .pdpb.Response pd_resp = 10;
inline bool Message::has_pd_resp() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Message::set_has_pd_resp() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Message::clear_has_pd_resp() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Message::clear_pd_resp() {
  if (pd_resp_ != NULL) pd_resp_->::pdpb::Response::Clear();
  clear_has_pd_resp();
}
inline const ::pdpb::Response& Message::pd_resp() const {
  // @@protoc_insertion_point(field_get:msgpb.Message.pd_resp)
  return pd_resp_ != NULL ? *pd_resp_
                         : *::pdpb::Response::internal_default_instance();
}
inline ::pdpb::Response* Message::mutable_pd_resp() {
  set_has_pd_resp();
  if (pd_resp_ == NULL) {
    pd_resp_ = new ::pdpb::Response;
  }
  // @@protoc_insertion_point(field_mutable:msgpb.Message.pd_resp)
  return pd_resp_;
}
inline ::pdpb::Response* Message::release_pd_resp() {
  // @@protoc_insertion_point(field_release:msgpb.Message.pd_resp)
  clear_has_pd_resp();
  ::pdpb::Response* temp = pd_resp_;
  pd_resp_ = NULL;
  return temp;
}
inline void Message::set_allocated_pd_resp(::pdpb::Response* pd_resp) {
  delete pd_resp_;
  pd_resp_ = pd_resp;
  if (pd_resp) {
    set_has_pd_resp();
  } else {
    clear_has_pd_resp();
  }
  // @@protoc_insertion_point(field_set_allocated:msgpb.Message.pd_resp)
}

inline const Message* Message::internal_default_instance() {
  return &Message_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace msgpb

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::msgpb::MessageType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::msgpb::MessageType>() {
  return ::msgpb::MessageType_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_msgpb_2eproto__INCLUDED
