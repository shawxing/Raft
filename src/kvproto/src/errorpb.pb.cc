// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: errorpb.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "errorpb.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace errorpb {

namespace {

const ::google::protobuf::Descriptor* NotLeader_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotLeader_reflection_ = NULL;
const ::google::protobuf::Descriptor* StoreNotMatch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StoreNotMatch_reflection_ = NULL;
const ::google::protobuf::Descriptor* RegionNotFound_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RegionNotFound_reflection_ = NULL;
const ::google::protobuf::Descriptor* KeyNotInRegion_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KeyNotInRegion_reflection_ = NULL;
const ::google::protobuf::Descriptor* StaleEpoch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StaleEpoch_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServerIsBusy_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerIsBusy_reflection_ = NULL;
const ::google::protobuf::Descriptor* StaleCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StaleCommand_reflection_ = NULL;
const ::google::protobuf::Descriptor* RaftEntryTooLarge_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RaftEntryTooLarge_reflection_ = NULL;
const ::google::protobuf::Descriptor* Error_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Error_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_errorpb_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_errorpb_2eproto() {
  protobuf_AddDesc_errorpb_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "errorpb.proto");
  GOOGLE_CHECK(file != NULL);
  NotLeader_descriptor_ = file->message_type(0);
  static const int NotLeader_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotLeader, region_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotLeader, leader_),
  };
  NotLeader_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      NotLeader_descriptor_,
      NotLeader::internal_default_instance(),
      NotLeader_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotLeader, _has_bits_),
      -1,
      -1,
      sizeof(NotLeader),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotLeader, _internal_metadata_));
  StoreNotMatch_descriptor_ = file->message_type(1);
  static const int StoreNotMatch_offsets_[1] = {
  };
  StoreNotMatch_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      StoreNotMatch_descriptor_,
      StoreNotMatch::internal_default_instance(),
      StoreNotMatch_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreNotMatch, _has_bits_),
      -1,
      -1,
      sizeof(StoreNotMatch),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreNotMatch, _internal_metadata_));
  RegionNotFound_descriptor_ = file->message_type(2);
  static const int RegionNotFound_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionNotFound, region_id_),
  };
  RegionNotFound_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RegionNotFound_descriptor_,
      RegionNotFound::internal_default_instance(),
      RegionNotFound_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionNotFound, _has_bits_),
      -1,
      -1,
      sizeof(RegionNotFound),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionNotFound, _internal_metadata_));
  KeyNotInRegion_descriptor_ = file->message_type(3);
  static const int KeyNotInRegion_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyNotInRegion, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyNotInRegion, region_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyNotInRegion, start_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyNotInRegion, end_key_),
  };
  KeyNotInRegion_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      KeyNotInRegion_descriptor_,
      KeyNotInRegion::internal_default_instance(),
      KeyNotInRegion_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyNotInRegion, _has_bits_),
      -1,
      -1,
      sizeof(KeyNotInRegion),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyNotInRegion, _internal_metadata_));
  StaleEpoch_descriptor_ = file->message_type(4);
  static const int StaleEpoch_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StaleEpoch, new_regions_),
  };
  StaleEpoch_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      StaleEpoch_descriptor_,
      StaleEpoch::internal_default_instance(),
      StaleEpoch_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StaleEpoch, _has_bits_),
      -1,
      -1,
      sizeof(StaleEpoch),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StaleEpoch, _internal_metadata_));
  ServerIsBusy_descriptor_ = file->message_type(5);
  static const int ServerIsBusy_offsets_[1] = {
  };
  ServerIsBusy_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ServerIsBusy_descriptor_,
      ServerIsBusy::internal_default_instance(),
      ServerIsBusy_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerIsBusy, _has_bits_),
      -1,
      -1,
      sizeof(ServerIsBusy),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerIsBusy, _internal_metadata_));
  StaleCommand_descriptor_ = file->message_type(6);
  static const int StaleCommand_offsets_[1] = {
  };
  StaleCommand_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      StaleCommand_descriptor_,
      StaleCommand::internal_default_instance(),
      StaleCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StaleCommand, _has_bits_),
      -1,
      -1,
      sizeof(StaleCommand),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StaleCommand, _internal_metadata_));
  RaftEntryTooLarge_descriptor_ = file->message_type(7);
  static const int RaftEntryTooLarge_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftEntryTooLarge, region_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftEntryTooLarge, entry_size_),
  };
  RaftEntryTooLarge_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RaftEntryTooLarge_descriptor_,
      RaftEntryTooLarge::internal_default_instance(),
      RaftEntryTooLarge_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftEntryTooLarge, _has_bits_),
      -1,
      -1,
      sizeof(RaftEntryTooLarge),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftEntryTooLarge, _internal_metadata_));
  Error_descriptor_ = file->message_type(8);
  static const int Error_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, not_leader_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, region_not_found_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, key_not_in_region_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, stale_epoch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, server_is_busy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, stale_command_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, store_not_match_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, raft_entry_too_large_),
  };
  Error_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Error_descriptor_,
      Error::internal_default_instance(),
      Error_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, _has_bits_),
      -1,
      -1,
      sizeof(Error),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_errorpb_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      NotLeader_descriptor_, NotLeader::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      StoreNotMatch_descriptor_, StoreNotMatch::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RegionNotFound_descriptor_, RegionNotFound::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      KeyNotInRegion_descriptor_, KeyNotInRegion::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      StaleEpoch_descriptor_, StaleEpoch::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ServerIsBusy_descriptor_, ServerIsBusy::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      StaleCommand_descriptor_, StaleCommand::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RaftEntryTooLarge_descriptor_, RaftEntryTooLarge::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Error_descriptor_, Error::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_errorpb_2eproto() {
  NotLeader_default_instance_.Shutdown();
  delete NotLeader_reflection_;
  StoreNotMatch_default_instance_.Shutdown();
  delete StoreNotMatch_reflection_;
  RegionNotFound_default_instance_.Shutdown();
  delete RegionNotFound_reflection_;
  KeyNotInRegion_default_instance_.Shutdown();
  delete KeyNotInRegion_reflection_;
  StaleEpoch_default_instance_.Shutdown();
  delete StaleEpoch_reflection_;
  ServerIsBusy_default_instance_.Shutdown();
  delete ServerIsBusy_reflection_;
  StaleCommand_default_instance_.Shutdown();
  delete StaleCommand_reflection_;
  RaftEntryTooLarge_default_instance_.Shutdown();
  delete RaftEntryTooLarge_reflection_;
  Error_default_instance_.Shutdown();
  delete Error_reflection_;
}

void protobuf_InitDefaults_errorpb_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::metapb::protobuf_InitDefaults_metapb_2eproto();
  NotLeader_default_instance_.DefaultConstruct();
  StoreNotMatch_default_instance_.DefaultConstruct();
  RegionNotFound_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  KeyNotInRegion_default_instance_.DefaultConstruct();
  StaleEpoch_default_instance_.DefaultConstruct();
  ServerIsBusy_default_instance_.DefaultConstruct();
  StaleCommand_default_instance_.DefaultConstruct();
  RaftEntryTooLarge_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  Error_default_instance_.DefaultConstruct();
  NotLeader_default_instance_.get_mutable()->InitAsDefaultInstance();
  StoreNotMatch_default_instance_.get_mutable()->InitAsDefaultInstance();
  RegionNotFound_default_instance_.get_mutable()->InitAsDefaultInstance();
  KeyNotInRegion_default_instance_.get_mutable()->InitAsDefaultInstance();
  StaleEpoch_default_instance_.get_mutable()->InitAsDefaultInstance();
  ServerIsBusy_default_instance_.get_mutable()->InitAsDefaultInstance();
  StaleCommand_default_instance_.get_mutable()->InitAsDefaultInstance();
  RaftEntryTooLarge_default_instance_.get_mutable()->InitAsDefaultInstance();
  Error_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_errorpb_2eproto_once_);
void protobuf_InitDefaults_errorpb_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_errorpb_2eproto_once_,
                 &protobuf_InitDefaults_errorpb_2eproto_impl);
}
void protobuf_AddDesc_errorpb_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_errorpb_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rerrorpb.proto\022\007errorpb\032\014metapb.proto\"<"
    "\n\tNotLeader\022\021\n\tregion_id\030\001 \001(\004\022\034\n\006leader"
    "\030\002 \001(\0132\014.metapb.Peer\"\017\n\rStoreNotMatch\"#\n"
    "\016RegionNotFound\022\021\n\tregion_id\030\001 \001(\004\"T\n\016Ke"
    "yNotInRegion\022\013\n\003key\030\001 \001(\014\022\021\n\tregion_id\030\002"
    " \001(\004\022\021\n\tstart_key\030\003 \001(\014\022\017\n\007end_key\030\004 \001(\014"
    "\"1\n\nStaleEpoch\022#\n\013new_regions\030\001 \003(\0132\016.me"
    "tapb.Region\"\016\n\014ServerIsBusy\"\016\n\014StaleComm"
    "and\":\n\021RaftEntryTooLarge\022\021\n\tregion_id\030\001 "
    "\001(\004\022\022\n\nentry_size\030\002 \001(\004\"\231\003\n\005Error\022\017\n\007mes"
    "sage\030\001 \001(\t\022&\n\nnot_leader\030\002 \001(\0132\022.errorpb"
    ".NotLeader\0221\n\020region_not_found\030\003 \001(\0132\027.e"
    "rrorpb.RegionNotFound\0222\n\021key_not_in_regi"
    "on\030\004 \001(\0132\027.errorpb.KeyNotInRegion\022(\n\013sta"
    "le_epoch\030\005 \001(\0132\023.errorpb.StaleEpoch\022-\n\016s"
    "erver_is_busy\030\006 \001(\0132\025.errorpb.ServerIsBu"
    "sy\022,\n\rstale_command\030\007 \001(\0132\025.errorpb.Stal"
    "eCommand\022/\n\017store_not_match\030\010 \001(\0132\026.erro"
    "rpb.StoreNotMatch\0228\n\024raft_entry_too_larg"
    "e\030\t \001(\0132\032.errorpb.RaftEntryTooLarge", 795);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "errorpb.proto", &protobuf_RegisterTypes);
  ::metapb::protobuf_AddDesc_metapb_2eproto();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_errorpb_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_errorpb_2eproto_once_);
void protobuf_AddDesc_errorpb_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_errorpb_2eproto_once_,
                 &protobuf_AddDesc_errorpb_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_errorpb_2eproto {
  StaticDescriptorInitializer_errorpb_2eproto() {
    protobuf_AddDesc_errorpb_2eproto();
  }
} static_descriptor_initializer_errorpb_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NotLeader::kRegionIdFieldNumber;
const int NotLeader::kLeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NotLeader::NotLeader()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_errorpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:errorpb.NotLeader)
}

void NotLeader::InitAsDefaultInstance() {
  leader_ = const_cast< ::metapb::Peer*>(
      ::metapb::Peer::internal_default_instance());
}

NotLeader::NotLeader(const NotLeader& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:errorpb.NotLeader)
}

void NotLeader::SharedCtor() {
  _cached_size_ = 0;
  leader_ = NULL;
  region_id_ = GOOGLE_ULONGLONG(0);
}

NotLeader::~NotLeader() {
  // @@protoc_insertion_point(destructor:errorpb.NotLeader)
  SharedDtor();
}

void NotLeader::SharedDtor() {
  if (this != &NotLeader_default_instance_.get()) {
    delete leader_;
  }
}

void NotLeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotLeader::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotLeader_descriptor_;
}

const NotLeader& NotLeader::default_instance() {
  protobuf_InitDefaults_errorpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<NotLeader> NotLeader_default_instance_;

NotLeader* NotLeader::New(::google::protobuf::Arena* arena) const {
  NotLeader* n = new NotLeader;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NotLeader::Clear() {
// @@protoc_insertion_point(message_clear_start:errorpb.NotLeader)
  if (_has_bits_[0 / 32] & 3u) {
    region_id_ = GOOGLE_ULONGLONG(0);
    if (has_leader()) {
      if (leader_ != NULL) leader_->::metapb::Peer::Clear();
    }
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool NotLeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:errorpb.NotLeader)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 region_id = 1;
      case 1: {
        if (tag == 8) {
          set_has_region_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &region_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_leader;
        break;
      }

      // optional .metapb.Peer leader = 2;
      case 2: {
        if (tag == 18) {
         parse_leader:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_leader()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:errorpb.NotLeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:errorpb.NotLeader)
  return false;
#undef DO_
}

void NotLeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:errorpb.NotLeader)
  // optional uint64 region_id = 1;
  if (has_region_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->region_id(), output);
  }

  // optional .metapb.Peer leader = 2;
  if (has_leader()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->leader_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:errorpb.NotLeader)
}

::google::protobuf::uint8* NotLeader::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:errorpb.NotLeader)
  // optional uint64 region_id = 1;
  if (has_region_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->region_id(), target);
  }

  // optional .metapb.Peer leader = 2;
  if (has_leader()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->leader_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:errorpb.NotLeader)
  return target;
}

size_t NotLeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:errorpb.NotLeader)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional uint64 region_id = 1;
    if (has_region_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->region_id());
    }

    // optional .metapb.Peer leader = 2;
    if (has_leader()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->leader_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotLeader::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:errorpb.NotLeader)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const NotLeader* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NotLeader>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:errorpb.NotLeader)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:errorpb.NotLeader)
    UnsafeMergeFrom(*source);
  }
}

void NotLeader::MergeFrom(const NotLeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:errorpb.NotLeader)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void NotLeader::UnsafeMergeFrom(const NotLeader& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_region_id()) {
      set_region_id(from.region_id());
    }
    if (from.has_leader()) {
      mutable_leader()->::metapb::Peer::MergeFrom(from.leader());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void NotLeader::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:errorpb.NotLeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotLeader::CopyFrom(const NotLeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:errorpb.NotLeader)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool NotLeader::IsInitialized() const {

  return true;
}

void NotLeader::Swap(NotLeader* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NotLeader::InternalSwap(NotLeader* other) {
  std::swap(region_id_, other->region_id_);
  std::swap(leader_, other->leader_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NotLeader::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotLeader_descriptor_;
  metadata.reflection = NotLeader_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NotLeader

// optional uint64 region_id = 1;
bool NotLeader::has_region_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void NotLeader::set_has_region_id() {
  _has_bits_[0] |= 0x00000001u;
}
void NotLeader::clear_has_region_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void NotLeader::clear_region_id() {
  region_id_ = GOOGLE_ULONGLONG(0);
  clear_has_region_id();
}
::google::protobuf::uint64 NotLeader::region_id() const {
  // @@protoc_insertion_point(field_get:errorpb.NotLeader.region_id)
  return region_id_;
}
void NotLeader::set_region_id(::google::protobuf::uint64 value) {
  set_has_region_id();
  region_id_ = value;
  // @@protoc_insertion_point(field_set:errorpb.NotLeader.region_id)
}

// optional .metapb.Peer leader = 2;
bool NotLeader::has_leader() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void NotLeader::set_has_leader() {
  _has_bits_[0] |= 0x00000002u;
}
void NotLeader::clear_has_leader() {
  _has_bits_[0] &= ~0x00000002u;
}
void NotLeader::clear_leader() {
  if (leader_ != NULL) leader_->::metapb::Peer::Clear();
  clear_has_leader();
}
const ::metapb::Peer& NotLeader::leader() const {
  // @@protoc_insertion_point(field_get:errorpb.NotLeader.leader)
  return leader_ != NULL ? *leader_
                         : *::metapb::Peer::internal_default_instance();
}
::metapb::Peer* NotLeader::mutable_leader() {
  set_has_leader();
  if (leader_ == NULL) {
    leader_ = new ::metapb::Peer;
  }
  // @@protoc_insertion_point(field_mutable:errorpb.NotLeader.leader)
  return leader_;
}
::metapb::Peer* NotLeader::release_leader() {
  // @@protoc_insertion_point(field_release:errorpb.NotLeader.leader)
  clear_has_leader();
  ::metapb::Peer* temp = leader_;
  leader_ = NULL;
  return temp;
}
void NotLeader::set_allocated_leader(::metapb::Peer* leader) {
  delete leader_;
  leader_ = leader;
  if (leader) {
    set_has_leader();
  } else {
    clear_has_leader();
  }
  // @@protoc_insertion_point(field_set_allocated:errorpb.NotLeader.leader)
}

inline const NotLeader* NotLeader::internal_default_instance() {
  return &NotLeader_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StoreNotMatch::StoreNotMatch()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_errorpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:errorpb.StoreNotMatch)
}

void StoreNotMatch::InitAsDefaultInstance() {
}

StoreNotMatch::StoreNotMatch(const StoreNotMatch& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:errorpb.StoreNotMatch)
}

void StoreNotMatch::SharedCtor() {
  _cached_size_ = 0;
}

StoreNotMatch::~StoreNotMatch() {
  // @@protoc_insertion_point(destructor:errorpb.StoreNotMatch)
  SharedDtor();
}

void StoreNotMatch::SharedDtor() {
}

void StoreNotMatch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StoreNotMatch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StoreNotMatch_descriptor_;
}

const StoreNotMatch& StoreNotMatch::default_instance() {
  protobuf_InitDefaults_errorpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<StoreNotMatch> StoreNotMatch_default_instance_;

StoreNotMatch* StoreNotMatch::New(::google::protobuf::Arena* arena) const {
  StoreNotMatch* n = new StoreNotMatch;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StoreNotMatch::Clear() {
// @@protoc_insertion_point(message_clear_start:errorpb.StoreNotMatch)
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool StoreNotMatch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:errorpb.StoreNotMatch)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:errorpb.StoreNotMatch)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:errorpb.StoreNotMatch)
  return false;
#undef DO_
}

void StoreNotMatch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:errorpb.StoreNotMatch)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:errorpb.StoreNotMatch)
}

::google::protobuf::uint8* StoreNotMatch::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:errorpb.StoreNotMatch)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:errorpb.StoreNotMatch)
  return target;
}

size_t StoreNotMatch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:errorpb.StoreNotMatch)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StoreNotMatch::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:errorpb.StoreNotMatch)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const StoreNotMatch* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StoreNotMatch>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:errorpb.StoreNotMatch)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:errorpb.StoreNotMatch)
    UnsafeMergeFrom(*source);
  }
}

void StoreNotMatch::MergeFrom(const StoreNotMatch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:errorpb.StoreNotMatch)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void StoreNotMatch::UnsafeMergeFrom(const StoreNotMatch& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void StoreNotMatch::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:errorpb.StoreNotMatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StoreNotMatch::CopyFrom(const StoreNotMatch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:errorpb.StoreNotMatch)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool StoreNotMatch::IsInitialized() const {

  return true;
}

void StoreNotMatch::Swap(StoreNotMatch* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StoreNotMatch::InternalSwap(StoreNotMatch* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StoreNotMatch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StoreNotMatch_descriptor_;
  metadata.reflection = StoreNotMatch_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StoreNotMatch

inline const StoreNotMatch* StoreNotMatch::internal_default_instance() {
  return &StoreNotMatch_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RegionNotFound::kRegionIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RegionNotFound::RegionNotFound()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_errorpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:errorpb.RegionNotFound)
}

void RegionNotFound::InitAsDefaultInstance() {
}

RegionNotFound::RegionNotFound(const RegionNotFound& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:errorpb.RegionNotFound)
}

void RegionNotFound::SharedCtor() {
  _cached_size_ = 0;
  region_id_ = GOOGLE_ULONGLONG(0);
}

RegionNotFound::~RegionNotFound() {
  // @@protoc_insertion_point(destructor:errorpb.RegionNotFound)
  SharedDtor();
}

void RegionNotFound::SharedDtor() {
}

void RegionNotFound::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegionNotFound::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegionNotFound_descriptor_;
}

const RegionNotFound& RegionNotFound::default_instance() {
  protobuf_InitDefaults_errorpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<RegionNotFound> RegionNotFound_default_instance_;

RegionNotFound* RegionNotFound::New(::google::protobuf::Arena* arena) const {
  RegionNotFound* n = new RegionNotFound;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RegionNotFound::Clear() {
// @@protoc_insertion_point(message_clear_start:errorpb.RegionNotFound)
  region_id_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RegionNotFound::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:errorpb.RegionNotFound)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 region_id = 1;
      case 1: {
        if (tag == 8) {
          set_has_region_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &region_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:errorpb.RegionNotFound)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:errorpb.RegionNotFound)
  return false;
#undef DO_
}

void RegionNotFound::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:errorpb.RegionNotFound)
  // optional uint64 region_id = 1;
  if (has_region_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->region_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:errorpb.RegionNotFound)
}

::google::protobuf::uint8* RegionNotFound::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:errorpb.RegionNotFound)
  // optional uint64 region_id = 1;
  if (has_region_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->region_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:errorpb.RegionNotFound)
  return target;
}

size_t RegionNotFound::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:errorpb.RegionNotFound)
  size_t total_size = 0;

  // optional uint64 region_id = 1;
  if (has_region_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->region_id());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegionNotFound::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:errorpb.RegionNotFound)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RegionNotFound* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RegionNotFound>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:errorpb.RegionNotFound)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:errorpb.RegionNotFound)
    UnsafeMergeFrom(*source);
  }
}

void RegionNotFound::MergeFrom(const RegionNotFound& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:errorpb.RegionNotFound)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void RegionNotFound::UnsafeMergeFrom(const RegionNotFound& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_region_id()) {
      set_region_id(from.region_id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void RegionNotFound::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:errorpb.RegionNotFound)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegionNotFound::CopyFrom(const RegionNotFound& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:errorpb.RegionNotFound)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool RegionNotFound::IsInitialized() const {

  return true;
}

void RegionNotFound::Swap(RegionNotFound* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RegionNotFound::InternalSwap(RegionNotFound* other) {
  std::swap(region_id_, other->region_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RegionNotFound::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RegionNotFound_descriptor_;
  metadata.reflection = RegionNotFound_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RegionNotFound

// optional uint64 region_id = 1;
bool RegionNotFound::has_region_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RegionNotFound::set_has_region_id() {
  _has_bits_[0] |= 0x00000001u;
}
void RegionNotFound::clear_has_region_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void RegionNotFound::clear_region_id() {
  region_id_ = GOOGLE_ULONGLONG(0);
  clear_has_region_id();
}
::google::protobuf::uint64 RegionNotFound::region_id() const {
  // @@protoc_insertion_point(field_get:errorpb.RegionNotFound.region_id)
  return region_id_;
}
void RegionNotFound::set_region_id(::google::protobuf::uint64 value) {
  set_has_region_id();
  region_id_ = value;
  // @@protoc_insertion_point(field_set:errorpb.RegionNotFound.region_id)
}

inline const RegionNotFound* RegionNotFound::internal_default_instance() {
  return &RegionNotFound_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KeyNotInRegion::kKeyFieldNumber;
const int KeyNotInRegion::kRegionIdFieldNumber;
const int KeyNotInRegion::kStartKeyFieldNumber;
const int KeyNotInRegion::kEndKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KeyNotInRegion::KeyNotInRegion()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_errorpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:errorpb.KeyNotInRegion)
}

void KeyNotInRegion::InitAsDefaultInstance() {
}

KeyNotInRegion::KeyNotInRegion(const KeyNotInRegion& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:errorpb.KeyNotInRegion)
}

void KeyNotInRegion::SharedCtor() {
  _cached_size_ = 0;
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  start_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  region_id_ = GOOGLE_ULONGLONG(0);
}

KeyNotInRegion::~KeyNotInRegion() {
  // @@protoc_insertion_point(destructor:errorpb.KeyNotInRegion)
  SharedDtor();
}

void KeyNotInRegion::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  start_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void KeyNotInRegion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KeyNotInRegion::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KeyNotInRegion_descriptor_;
}

const KeyNotInRegion& KeyNotInRegion::default_instance() {
  protobuf_InitDefaults_errorpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<KeyNotInRegion> KeyNotInRegion_default_instance_;

KeyNotInRegion* KeyNotInRegion::New(::google::protobuf::Arena* arena) const {
  KeyNotInRegion* n = new KeyNotInRegion;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void KeyNotInRegion::Clear() {
// @@protoc_insertion_point(message_clear_start:errorpb.KeyNotInRegion)
  if (_has_bits_[0 / 32] & 15u) {
    if (has_key()) {
      key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    region_id_ = GOOGLE_ULONGLONG(0);
    if (has_start_key()) {
      start_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_end_key()) {
      end_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool KeyNotInRegion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:errorpb.KeyNotInRegion)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_region_id;
        break;
      }

      // optional uint64 region_id = 2;
      case 2: {
        if (tag == 16) {
         parse_region_id:
          set_has_region_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &region_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_start_key;
        break;
      }

      // optional bytes start_key = 3;
      case 3: {
        if (tag == 26) {
         parse_start_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_start_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_end_key;
        break;
      }

      // optional bytes end_key = 4;
      case 4: {
        if (tag == 34) {
         parse_end_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_end_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:errorpb.KeyNotInRegion)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:errorpb.KeyNotInRegion)
  return false;
#undef DO_
}

void KeyNotInRegion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:errorpb.KeyNotInRegion)
  // optional bytes key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->key(), output);
  }

  // optional uint64 region_id = 2;
  if (has_region_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->region_id(), output);
  }

  // optional bytes start_key = 3;
  if (has_start_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->start_key(), output);
  }

  // optional bytes end_key = 4;
  if (has_end_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->end_key(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:errorpb.KeyNotInRegion)
}

::google::protobuf::uint8* KeyNotInRegion::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:errorpb.KeyNotInRegion)
  // optional bytes key = 1;
  if (has_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->key(), target);
  }

  // optional uint64 region_id = 2;
  if (has_region_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->region_id(), target);
  }

  // optional bytes start_key = 3;
  if (has_start_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->start_key(), target);
  }

  // optional bytes end_key = 4;
  if (has_end_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->end_key(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:errorpb.KeyNotInRegion)
  return target;
}

size_t KeyNotInRegion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:errorpb.KeyNotInRegion)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 15u) {
    // optional bytes key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->key());
    }

    // optional uint64 region_id = 2;
    if (has_region_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->region_id());
    }

    // optional bytes start_key = 3;
    if (has_start_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->start_key());
    }

    // optional bytes end_key = 4;
    if (has_end_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->end_key());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KeyNotInRegion::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:errorpb.KeyNotInRegion)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const KeyNotInRegion* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const KeyNotInRegion>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:errorpb.KeyNotInRegion)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:errorpb.KeyNotInRegion)
    UnsafeMergeFrom(*source);
  }
}

void KeyNotInRegion::MergeFrom(const KeyNotInRegion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:errorpb.KeyNotInRegion)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void KeyNotInRegion::UnsafeMergeFrom(const KeyNotInRegion& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_has_key();
      key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
    }
    if (from.has_region_id()) {
      set_region_id(from.region_id());
    }
    if (from.has_start_key()) {
      set_has_start_key();
      start_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.start_key_);
    }
    if (from.has_end_key()) {
      set_has_end_key();
      end_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.end_key_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void KeyNotInRegion::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:errorpb.KeyNotInRegion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeyNotInRegion::CopyFrom(const KeyNotInRegion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:errorpb.KeyNotInRegion)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool KeyNotInRegion::IsInitialized() const {

  return true;
}

void KeyNotInRegion::Swap(KeyNotInRegion* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KeyNotInRegion::InternalSwap(KeyNotInRegion* other) {
  key_.Swap(&other->key_);
  std::swap(region_id_, other->region_id_);
  start_key_.Swap(&other->start_key_);
  end_key_.Swap(&other->end_key_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata KeyNotInRegion::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KeyNotInRegion_descriptor_;
  metadata.reflection = KeyNotInRegion_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// KeyNotInRegion

// optional bytes key = 1;
bool KeyNotInRegion::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void KeyNotInRegion::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
void KeyNotInRegion::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
void KeyNotInRegion::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
const ::std::string& KeyNotInRegion::key() const {
  // @@protoc_insertion_point(field_get:errorpb.KeyNotInRegion.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void KeyNotInRegion::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:errorpb.KeyNotInRegion.key)
}
void KeyNotInRegion::set_key(const char* value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:errorpb.KeyNotInRegion.key)
}
void KeyNotInRegion::set_key(const void* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:errorpb.KeyNotInRegion.key)
}
::std::string* KeyNotInRegion::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:errorpb.KeyNotInRegion.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* KeyNotInRegion::release_key() {
  // @@protoc_insertion_point(field_release:errorpb.KeyNotInRegion.key)
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void KeyNotInRegion::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:errorpb.KeyNotInRegion.key)
}

// optional uint64 region_id = 2;
bool KeyNotInRegion::has_region_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void KeyNotInRegion::set_has_region_id() {
  _has_bits_[0] |= 0x00000002u;
}
void KeyNotInRegion::clear_has_region_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void KeyNotInRegion::clear_region_id() {
  region_id_ = GOOGLE_ULONGLONG(0);
  clear_has_region_id();
}
::google::protobuf::uint64 KeyNotInRegion::region_id() const {
  // @@protoc_insertion_point(field_get:errorpb.KeyNotInRegion.region_id)
  return region_id_;
}
void KeyNotInRegion::set_region_id(::google::protobuf::uint64 value) {
  set_has_region_id();
  region_id_ = value;
  // @@protoc_insertion_point(field_set:errorpb.KeyNotInRegion.region_id)
}

// optional bytes start_key = 3;
bool KeyNotInRegion::has_start_key() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void KeyNotInRegion::set_has_start_key() {
  _has_bits_[0] |= 0x00000004u;
}
void KeyNotInRegion::clear_has_start_key() {
  _has_bits_[0] &= ~0x00000004u;
}
void KeyNotInRegion::clear_start_key() {
  start_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_start_key();
}
const ::std::string& KeyNotInRegion::start_key() const {
  // @@protoc_insertion_point(field_get:errorpb.KeyNotInRegion.start_key)
  return start_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void KeyNotInRegion::set_start_key(const ::std::string& value) {
  set_has_start_key();
  start_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:errorpb.KeyNotInRegion.start_key)
}
void KeyNotInRegion::set_start_key(const char* value) {
  set_has_start_key();
  start_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:errorpb.KeyNotInRegion.start_key)
}
void KeyNotInRegion::set_start_key(const void* value, size_t size) {
  set_has_start_key();
  start_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:errorpb.KeyNotInRegion.start_key)
}
::std::string* KeyNotInRegion::mutable_start_key() {
  set_has_start_key();
  // @@protoc_insertion_point(field_mutable:errorpb.KeyNotInRegion.start_key)
  return start_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* KeyNotInRegion::release_start_key() {
  // @@protoc_insertion_point(field_release:errorpb.KeyNotInRegion.start_key)
  clear_has_start_key();
  return start_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void KeyNotInRegion::set_allocated_start_key(::std::string* start_key) {
  if (start_key != NULL) {
    set_has_start_key();
  } else {
    clear_has_start_key();
  }
  start_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), start_key);
  // @@protoc_insertion_point(field_set_allocated:errorpb.KeyNotInRegion.start_key)
}

// optional bytes end_key = 4;
bool KeyNotInRegion::has_end_key() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void KeyNotInRegion::set_has_end_key() {
  _has_bits_[0] |= 0x00000008u;
}
void KeyNotInRegion::clear_has_end_key() {
  _has_bits_[0] &= ~0x00000008u;
}
void KeyNotInRegion::clear_end_key() {
  end_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_end_key();
}
const ::std::string& KeyNotInRegion::end_key() const {
  // @@protoc_insertion_point(field_get:errorpb.KeyNotInRegion.end_key)
  return end_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void KeyNotInRegion::set_end_key(const ::std::string& value) {
  set_has_end_key();
  end_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:errorpb.KeyNotInRegion.end_key)
}
void KeyNotInRegion::set_end_key(const char* value) {
  set_has_end_key();
  end_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:errorpb.KeyNotInRegion.end_key)
}
void KeyNotInRegion::set_end_key(const void* value, size_t size) {
  set_has_end_key();
  end_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:errorpb.KeyNotInRegion.end_key)
}
::std::string* KeyNotInRegion::mutable_end_key() {
  set_has_end_key();
  // @@protoc_insertion_point(field_mutable:errorpb.KeyNotInRegion.end_key)
  return end_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* KeyNotInRegion::release_end_key() {
  // @@protoc_insertion_point(field_release:errorpb.KeyNotInRegion.end_key)
  clear_has_end_key();
  return end_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void KeyNotInRegion::set_allocated_end_key(::std::string* end_key) {
  if (end_key != NULL) {
    set_has_end_key();
  } else {
    clear_has_end_key();
  }
  end_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), end_key);
  // @@protoc_insertion_point(field_set_allocated:errorpb.KeyNotInRegion.end_key)
}

inline const KeyNotInRegion* KeyNotInRegion::internal_default_instance() {
  return &KeyNotInRegion_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StaleEpoch::kNewRegionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StaleEpoch::StaleEpoch()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_errorpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:errorpb.StaleEpoch)
}

void StaleEpoch::InitAsDefaultInstance() {
}

StaleEpoch::StaleEpoch(const StaleEpoch& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:errorpb.StaleEpoch)
}

void StaleEpoch::SharedCtor() {
  _cached_size_ = 0;
}

StaleEpoch::~StaleEpoch() {
  // @@protoc_insertion_point(destructor:errorpb.StaleEpoch)
  SharedDtor();
}

void StaleEpoch::SharedDtor() {
}

void StaleEpoch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StaleEpoch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StaleEpoch_descriptor_;
}

const StaleEpoch& StaleEpoch::default_instance() {
  protobuf_InitDefaults_errorpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<StaleEpoch> StaleEpoch_default_instance_;

StaleEpoch* StaleEpoch::New(::google::protobuf::Arena* arena) const {
  StaleEpoch* n = new StaleEpoch;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StaleEpoch::Clear() {
// @@protoc_insertion_point(message_clear_start:errorpb.StaleEpoch)
  new_regions_.Clear();
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool StaleEpoch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:errorpb.StaleEpoch)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .metapb.Region new_regions = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_new_regions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_new_regions()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_new_regions;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:errorpb.StaleEpoch)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:errorpb.StaleEpoch)
  return false;
#undef DO_
}

void StaleEpoch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:errorpb.StaleEpoch)
  // repeated .metapb.Region new_regions = 1;
  for (unsigned int i = 0, n = this->new_regions_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->new_regions(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:errorpb.StaleEpoch)
}

::google::protobuf::uint8* StaleEpoch::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:errorpb.StaleEpoch)
  // repeated .metapb.Region new_regions = 1;
  for (unsigned int i = 0, n = this->new_regions_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->new_regions(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:errorpb.StaleEpoch)
  return target;
}

size_t StaleEpoch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:errorpb.StaleEpoch)
  size_t total_size = 0;

  // repeated .metapb.Region new_regions = 1;
  {
    unsigned int count = this->new_regions_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->new_regions(i));
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StaleEpoch::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:errorpb.StaleEpoch)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const StaleEpoch* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StaleEpoch>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:errorpb.StaleEpoch)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:errorpb.StaleEpoch)
    UnsafeMergeFrom(*source);
  }
}

void StaleEpoch::MergeFrom(const StaleEpoch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:errorpb.StaleEpoch)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void StaleEpoch::UnsafeMergeFrom(const StaleEpoch& from) {
  GOOGLE_DCHECK(&from != this);
  new_regions_.MergeFrom(from.new_regions_);
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void StaleEpoch::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:errorpb.StaleEpoch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StaleEpoch::CopyFrom(const StaleEpoch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:errorpb.StaleEpoch)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool StaleEpoch::IsInitialized() const {

  return true;
}

void StaleEpoch::Swap(StaleEpoch* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StaleEpoch::InternalSwap(StaleEpoch* other) {
  new_regions_.UnsafeArenaSwap(&other->new_regions_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StaleEpoch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StaleEpoch_descriptor_;
  metadata.reflection = StaleEpoch_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StaleEpoch

// repeated .metapb.Region new_regions = 1;
int StaleEpoch::new_regions_size() const {
  return new_regions_.size();
}
void StaleEpoch::clear_new_regions() {
  new_regions_.Clear();
}
const ::metapb::Region& StaleEpoch::new_regions(int index) const {
  // @@protoc_insertion_point(field_get:errorpb.StaleEpoch.new_regions)
  return new_regions_.Get(index);
}
::metapb::Region* StaleEpoch::mutable_new_regions(int index) {
  // @@protoc_insertion_point(field_mutable:errorpb.StaleEpoch.new_regions)
  return new_regions_.Mutable(index);
}
::metapb::Region* StaleEpoch::add_new_regions() {
  // @@protoc_insertion_point(field_add:errorpb.StaleEpoch.new_regions)
  return new_regions_.Add();
}
::google::protobuf::RepeatedPtrField< ::metapb::Region >*
StaleEpoch::mutable_new_regions() {
  // @@protoc_insertion_point(field_mutable_list:errorpb.StaleEpoch.new_regions)
  return &new_regions_;
}
const ::google::protobuf::RepeatedPtrField< ::metapb::Region >&
StaleEpoch::new_regions() const {
  // @@protoc_insertion_point(field_list:errorpb.StaleEpoch.new_regions)
  return new_regions_;
}

inline const StaleEpoch* StaleEpoch::internal_default_instance() {
  return &StaleEpoch_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServerIsBusy::ServerIsBusy()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_errorpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:errorpb.ServerIsBusy)
}

void ServerIsBusy::InitAsDefaultInstance() {
}

ServerIsBusy::ServerIsBusy(const ServerIsBusy& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:errorpb.ServerIsBusy)
}

void ServerIsBusy::SharedCtor() {
  _cached_size_ = 0;
}

ServerIsBusy::~ServerIsBusy() {
  // @@protoc_insertion_point(destructor:errorpb.ServerIsBusy)
  SharedDtor();
}

void ServerIsBusy::SharedDtor() {
}

void ServerIsBusy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerIsBusy::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerIsBusy_descriptor_;
}

const ServerIsBusy& ServerIsBusy::default_instance() {
  protobuf_InitDefaults_errorpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ServerIsBusy> ServerIsBusy_default_instance_;

ServerIsBusy* ServerIsBusy::New(::google::protobuf::Arena* arena) const {
  ServerIsBusy* n = new ServerIsBusy;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ServerIsBusy::Clear() {
// @@protoc_insertion_point(message_clear_start:errorpb.ServerIsBusy)
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ServerIsBusy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:errorpb.ServerIsBusy)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:errorpb.ServerIsBusy)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:errorpb.ServerIsBusy)
  return false;
#undef DO_
}

void ServerIsBusy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:errorpb.ServerIsBusy)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:errorpb.ServerIsBusy)
}

::google::protobuf::uint8* ServerIsBusy::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:errorpb.ServerIsBusy)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:errorpb.ServerIsBusy)
  return target;
}

size_t ServerIsBusy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:errorpb.ServerIsBusy)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerIsBusy::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:errorpb.ServerIsBusy)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ServerIsBusy* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ServerIsBusy>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:errorpb.ServerIsBusy)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:errorpb.ServerIsBusy)
    UnsafeMergeFrom(*source);
  }
}

void ServerIsBusy::MergeFrom(const ServerIsBusy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:errorpb.ServerIsBusy)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ServerIsBusy::UnsafeMergeFrom(const ServerIsBusy& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void ServerIsBusy::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:errorpb.ServerIsBusy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerIsBusy::CopyFrom(const ServerIsBusy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:errorpb.ServerIsBusy)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ServerIsBusy::IsInitialized() const {

  return true;
}

void ServerIsBusy::Swap(ServerIsBusy* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServerIsBusy::InternalSwap(ServerIsBusy* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ServerIsBusy::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerIsBusy_descriptor_;
  metadata.reflection = ServerIsBusy_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ServerIsBusy

inline const ServerIsBusy* ServerIsBusy::internal_default_instance() {
  return &ServerIsBusy_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StaleCommand::StaleCommand()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_errorpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:errorpb.StaleCommand)
}

void StaleCommand::InitAsDefaultInstance() {
}

StaleCommand::StaleCommand(const StaleCommand& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:errorpb.StaleCommand)
}

void StaleCommand::SharedCtor() {
  _cached_size_ = 0;
}

StaleCommand::~StaleCommand() {
  // @@protoc_insertion_point(destructor:errorpb.StaleCommand)
  SharedDtor();
}

void StaleCommand::SharedDtor() {
}

void StaleCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StaleCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StaleCommand_descriptor_;
}

const StaleCommand& StaleCommand::default_instance() {
  protobuf_InitDefaults_errorpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<StaleCommand> StaleCommand_default_instance_;

StaleCommand* StaleCommand::New(::google::protobuf::Arena* arena) const {
  StaleCommand* n = new StaleCommand;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StaleCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:errorpb.StaleCommand)
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool StaleCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:errorpb.StaleCommand)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:errorpb.StaleCommand)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:errorpb.StaleCommand)
  return false;
#undef DO_
}

void StaleCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:errorpb.StaleCommand)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:errorpb.StaleCommand)
}

::google::protobuf::uint8* StaleCommand::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:errorpb.StaleCommand)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:errorpb.StaleCommand)
  return target;
}

size_t StaleCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:errorpb.StaleCommand)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StaleCommand::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:errorpb.StaleCommand)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const StaleCommand* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StaleCommand>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:errorpb.StaleCommand)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:errorpb.StaleCommand)
    UnsafeMergeFrom(*source);
  }
}

void StaleCommand::MergeFrom(const StaleCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:errorpb.StaleCommand)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void StaleCommand::UnsafeMergeFrom(const StaleCommand& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void StaleCommand::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:errorpb.StaleCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StaleCommand::CopyFrom(const StaleCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:errorpb.StaleCommand)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool StaleCommand::IsInitialized() const {

  return true;
}

void StaleCommand::Swap(StaleCommand* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StaleCommand::InternalSwap(StaleCommand* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StaleCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StaleCommand_descriptor_;
  metadata.reflection = StaleCommand_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StaleCommand

inline const StaleCommand* StaleCommand::internal_default_instance() {
  return &StaleCommand_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RaftEntryTooLarge::kRegionIdFieldNumber;
const int RaftEntryTooLarge::kEntrySizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RaftEntryTooLarge::RaftEntryTooLarge()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_errorpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:errorpb.RaftEntryTooLarge)
}

void RaftEntryTooLarge::InitAsDefaultInstance() {
}

RaftEntryTooLarge::RaftEntryTooLarge(const RaftEntryTooLarge& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:errorpb.RaftEntryTooLarge)
}

void RaftEntryTooLarge::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&region_id_, 0, reinterpret_cast<char*>(&entry_size_) -
    reinterpret_cast<char*>(&region_id_) + sizeof(entry_size_));
}

RaftEntryTooLarge::~RaftEntryTooLarge() {
  // @@protoc_insertion_point(destructor:errorpb.RaftEntryTooLarge)
  SharedDtor();
}

void RaftEntryTooLarge::SharedDtor() {
}

void RaftEntryTooLarge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RaftEntryTooLarge::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RaftEntryTooLarge_descriptor_;
}

const RaftEntryTooLarge& RaftEntryTooLarge::default_instance() {
  protobuf_InitDefaults_errorpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<RaftEntryTooLarge> RaftEntryTooLarge_default_instance_;

RaftEntryTooLarge* RaftEntryTooLarge::New(::google::protobuf::Arena* arena) const {
  RaftEntryTooLarge* n = new RaftEntryTooLarge;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RaftEntryTooLarge::Clear() {
// @@protoc_insertion_point(message_clear_start:errorpb.RaftEntryTooLarge)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(RaftEntryTooLarge, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<RaftEntryTooLarge*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(region_id_, entry_size_);

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RaftEntryTooLarge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:errorpb.RaftEntryTooLarge)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 region_id = 1;
      case 1: {
        if (tag == 8) {
          set_has_region_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &region_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_entry_size;
        break;
      }

      // optional uint64 entry_size = 2;
      case 2: {
        if (tag == 16) {
         parse_entry_size:
          set_has_entry_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &entry_size_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:errorpb.RaftEntryTooLarge)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:errorpb.RaftEntryTooLarge)
  return false;
#undef DO_
}

void RaftEntryTooLarge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:errorpb.RaftEntryTooLarge)
  // optional uint64 region_id = 1;
  if (has_region_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->region_id(), output);
  }

  // optional uint64 entry_size = 2;
  if (has_entry_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->entry_size(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:errorpb.RaftEntryTooLarge)
}

::google::protobuf::uint8* RaftEntryTooLarge::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:errorpb.RaftEntryTooLarge)
  // optional uint64 region_id = 1;
  if (has_region_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->region_id(), target);
  }

  // optional uint64 entry_size = 2;
  if (has_entry_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->entry_size(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:errorpb.RaftEntryTooLarge)
  return target;
}

size_t RaftEntryTooLarge::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:errorpb.RaftEntryTooLarge)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional uint64 region_id = 1;
    if (has_region_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->region_id());
    }

    // optional uint64 entry_size = 2;
    if (has_entry_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->entry_size());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RaftEntryTooLarge::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:errorpb.RaftEntryTooLarge)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RaftEntryTooLarge* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RaftEntryTooLarge>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:errorpb.RaftEntryTooLarge)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:errorpb.RaftEntryTooLarge)
    UnsafeMergeFrom(*source);
  }
}

void RaftEntryTooLarge::MergeFrom(const RaftEntryTooLarge& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:errorpb.RaftEntryTooLarge)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void RaftEntryTooLarge::UnsafeMergeFrom(const RaftEntryTooLarge& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_region_id()) {
      set_region_id(from.region_id());
    }
    if (from.has_entry_size()) {
      set_entry_size(from.entry_size());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void RaftEntryTooLarge::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:errorpb.RaftEntryTooLarge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RaftEntryTooLarge::CopyFrom(const RaftEntryTooLarge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:errorpb.RaftEntryTooLarge)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool RaftEntryTooLarge::IsInitialized() const {

  return true;
}

void RaftEntryTooLarge::Swap(RaftEntryTooLarge* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RaftEntryTooLarge::InternalSwap(RaftEntryTooLarge* other) {
  std::swap(region_id_, other->region_id_);
  std::swap(entry_size_, other->entry_size_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RaftEntryTooLarge::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RaftEntryTooLarge_descriptor_;
  metadata.reflection = RaftEntryTooLarge_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RaftEntryTooLarge

// optional uint64 region_id = 1;
bool RaftEntryTooLarge::has_region_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RaftEntryTooLarge::set_has_region_id() {
  _has_bits_[0] |= 0x00000001u;
}
void RaftEntryTooLarge::clear_has_region_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void RaftEntryTooLarge::clear_region_id() {
  region_id_ = GOOGLE_ULONGLONG(0);
  clear_has_region_id();
}
::google::protobuf::uint64 RaftEntryTooLarge::region_id() const {
  // @@protoc_insertion_point(field_get:errorpb.RaftEntryTooLarge.region_id)
  return region_id_;
}
void RaftEntryTooLarge::set_region_id(::google::protobuf::uint64 value) {
  set_has_region_id();
  region_id_ = value;
  // @@protoc_insertion_point(field_set:errorpb.RaftEntryTooLarge.region_id)
}

// optional uint64 entry_size = 2;
bool RaftEntryTooLarge::has_entry_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RaftEntryTooLarge::set_has_entry_size() {
  _has_bits_[0] |= 0x00000002u;
}
void RaftEntryTooLarge::clear_has_entry_size() {
  _has_bits_[0] &= ~0x00000002u;
}
void RaftEntryTooLarge::clear_entry_size() {
  entry_size_ = GOOGLE_ULONGLONG(0);
  clear_has_entry_size();
}
::google::protobuf::uint64 RaftEntryTooLarge::entry_size() const {
  // @@protoc_insertion_point(field_get:errorpb.RaftEntryTooLarge.entry_size)
  return entry_size_;
}
void RaftEntryTooLarge::set_entry_size(::google::protobuf::uint64 value) {
  set_has_entry_size();
  entry_size_ = value;
  // @@protoc_insertion_point(field_set:errorpb.RaftEntryTooLarge.entry_size)
}

inline const RaftEntryTooLarge* RaftEntryTooLarge::internal_default_instance() {
  return &RaftEntryTooLarge_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Error::kMessageFieldNumber;
const int Error::kNotLeaderFieldNumber;
const int Error::kRegionNotFoundFieldNumber;
const int Error::kKeyNotInRegionFieldNumber;
const int Error::kStaleEpochFieldNumber;
const int Error::kServerIsBusyFieldNumber;
const int Error::kStaleCommandFieldNumber;
const int Error::kStoreNotMatchFieldNumber;
const int Error::kRaftEntryTooLargeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Error::Error()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_errorpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:errorpb.Error)
}

void Error::InitAsDefaultInstance() {
  not_leader_ = const_cast< ::errorpb::NotLeader*>(
      ::errorpb::NotLeader::internal_default_instance());
  region_not_found_ = const_cast< ::errorpb::RegionNotFound*>(
      ::errorpb::RegionNotFound::internal_default_instance());
  key_not_in_region_ = const_cast< ::errorpb::KeyNotInRegion*>(
      ::errorpb::KeyNotInRegion::internal_default_instance());
  stale_epoch_ = const_cast< ::errorpb::StaleEpoch*>(
      ::errorpb::StaleEpoch::internal_default_instance());
  server_is_busy_ = const_cast< ::errorpb::ServerIsBusy*>(
      ::errorpb::ServerIsBusy::internal_default_instance());
  stale_command_ = const_cast< ::errorpb::StaleCommand*>(
      ::errorpb::StaleCommand::internal_default_instance());
  store_not_match_ = const_cast< ::errorpb::StoreNotMatch*>(
      ::errorpb::StoreNotMatch::internal_default_instance());
  raft_entry_too_large_ = const_cast< ::errorpb::RaftEntryTooLarge*>(
      ::errorpb::RaftEntryTooLarge::internal_default_instance());
}

Error::Error(const Error& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:errorpb.Error)
}

void Error::SharedCtor() {
  _cached_size_ = 0;
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  not_leader_ = NULL;
  region_not_found_ = NULL;
  key_not_in_region_ = NULL;
  stale_epoch_ = NULL;
  server_is_busy_ = NULL;
  stale_command_ = NULL;
  store_not_match_ = NULL;
  raft_entry_too_large_ = NULL;
}

Error::~Error() {
  // @@protoc_insertion_point(destructor:errorpb.Error)
  SharedDtor();
}

void Error::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != &Error_default_instance_.get()) {
    delete not_leader_;
    delete region_not_found_;
    delete key_not_in_region_;
    delete stale_epoch_;
    delete server_is_busy_;
    delete stale_command_;
    delete store_not_match_;
    delete raft_entry_too_large_;
  }
}

void Error::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Error::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Error_descriptor_;
}

const Error& Error::default_instance() {
  protobuf_InitDefaults_errorpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Error> Error_default_instance_;

Error* Error::New(::google::protobuf::Arena* arena) const {
  Error* n = new Error;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Error::Clear() {
// @@protoc_insertion_point(message_clear_start:errorpb.Error)
  if (_has_bits_[0 / 32] & 255u) {
    if (has_message()) {
      message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_not_leader()) {
      if (not_leader_ != NULL) not_leader_->::errorpb::NotLeader::Clear();
    }
    if (has_region_not_found()) {
      if (region_not_found_ != NULL) region_not_found_->::errorpb::RegionNotFound::Clear();
    }
    if (has_key_not_in_region()) {
      if (key_not_in_region_ != NULL) key_not_in_region_->::errorpb::KeyNotInRegion::Clear();
    }
    if (has_stale_epoch()) {
      if (stale_epoch_ != NULL) stale_epoch_->::errorpb::StaleEpoch::Clear();
    }
    if (has_server_is_busy()) {
      if (server_is_busy_ != NULL) server_is_busy_->::errorpb::ServerIsBusy::Clear();
    }
    if (has_stale_command()) {
      if (stale_command_ != NULL) stale_command_->::errorpb::StaleCommand::Clear();
    }
    if (has_store_not_match()) {
      if (store_not_match_ != NULL) store_not_match_->::errorpb::StoreNotMatch::Clear();
    }
  }
  if (has_raft_entry_too_large()) {
    if (raft_entry_too_large_ != NULL) raft_entry_too_large_->::errorpb::RaftEntryTooLarge::Clear();
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Error::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:errorpb.Error)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string message = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "errorpb.Error.message");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_not_leader;
        break;
      }

      // optional .errorpb.NotLeader not_leader = 2;
      case 2: {
        if (tag == 18) {
         parse_not_leader:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_not_leader()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_region_not_found;
        break;
      }

      // optional .errorpb.RegionNotFound region_not_found = 3;
      case 3: {
        if (tag == 26) {
         parse_region_not_found:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_region_not_found()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_key_not_in_region;
        break;
      }

      // optional .errorpb.KeyNotInRegion key_not_in_region = 4;
      case 4: {
        if (tag == 34) {
         parse_key_not_in_region:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_key_not_in_region()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_stale_epoch;
        break;
      }

      // optional .errorpb.StaleEpoch stale_epoch = 5;
      case 5: {
        if (tag == 42) {
         parse_stale_epoch:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stale_epoch()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_server_is_busy;
        break;
      }

      // optional .errorpb.ServerIsBusy server_is_busy = 6;
      case 6: {
        if (tag == 50) {
         parse_server_is_busy:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_server_is_busy()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_stale_command;
        break;
      }

      // optional .errorpb.StaleCommand stale_command = 7;
      case 7: {
        if (tag == 58) {
         parse_stale_command:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stale_command()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_store_not_match;
        break;
      }

      // optional .errorpb.StoreNotMatch store_not_match = 8;
      case 8: {
        if (tag == 66) {
         parse_store_not_match:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_store_not_match()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_raft_entry_too_large;
        break;
      }

      // optional .errorpb.RaftEntryTooLarge raft_entry_too_large = 9;
      case 9: {
        if (tag == 74) {
         parse_raft_entry_too_large:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_raft_entry_too_large()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:errorpb.Error)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:errorpb.Error)
  return false;
#undef DO_
}

void Error::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:errorpb.Error)
  // optional string message = 1;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "errorpb.Error.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->message(), output);
  }

  // optional .errorpb.NotLeader not_leader = 2;
  if (has_not_leader()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->not_leader_, output);
  }

  // optional .errorpb.RegionNotFound region_not_found = 3;
  if (has_region_not_found()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->region_not_found_, output);
  }

  // optional .errorpb.KeyNotInRegion key_not_in_region = 4;
  if (has_key_not_in_region()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->key_not_in_region_, output);
  }

  // optional .errorpb.StaleEpoch stale_epoch = 5;
  if (has_stale_epoch()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->stale_epoch_, output);
  }

  // optional .errorpb.ServerIsBusy server_is_busy = 6;
  if (has_server_is_busy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->server_is_busy_, output);
  }

  // optional .errorpb.StaleCommand stale_command = 7;
  if (has_stale_command()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->stale_command_, output);
  }

  // optional .errorpb.StoreNotMatch store_not_match = 8;
  if (has_store_not_match()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->store_not_match_, output);
  }

  // optional .errorpb.RaftEntryTooLarge raft_entry_too_large = 9;
  if (has_raft_entry_too_large()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->raft_entry_too_large_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:errorpb.Error)
}

::google::protobuf::uint8* Error::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:errorpb.Error)
  // optional string message = 1;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "errorpb.Error.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->message(), target);
  }

  // optional .errorpb.NotLeader not_leader = 2;
  if (has_not_leader()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->not_leader_, false, target);
  }

  // optional .errorpb.RegionNotFound region_not_found = 3;
  if (has_region_not_found()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->region_not_found_, false, target);
  }

  // optional .errorpb.KeyNotInRegion key_not_in_region = 4;
  if (has_key_not_in_region()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->key_not_in_region_, false, target);
  }

  // optional .errorpb.StaleEpoch stale_epoch = 5;
  if (has_stale_epoch()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->stale_epoch_, false, target);
  }

  // optional .errorpb.ServerIsBusy server_is_busy = 6;
  if (has_server_is_busy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->server_is_busy_, false, target);
  }

  // optional .errorpb.StaleCommand stale_command = 7;
  if (has_stale_command()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->stale_command_, false, target);
  }

  // optional .errorpb.StoreNotMatch store_not_match = 8;
  if (has_store_not_match()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->store_not_match_, false, target);
  }

  // optional .errorpb.RaftEntryTooLarge raft_entry_too_large = 9;
  if (has_raft_entry_too_large()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->raft_entry_too_large_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:errorpb.Error)
  return target;
}

size_t Error::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:errorpb.Error)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional string message = 1;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }

    // optional .errorpb.NotLeader not_leader = 2;
    if (has_not_leader()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->not_leader_);
    }

    // optional .errorpb.RegionNotFound region_not_found = 3;
    if (has_region_not_found()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->region_not_found_);
    }

    // optional .errorpb.KeyNotInRegion key_not_in_region = 4;
    if (has_key_not_in_region()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->key_not_in_region_);
    }

    // optional .errorpb.StaleEpoch stale_epoch = 5;
    if (has_stale_epoch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->stale_epoch_);
    }

    // optional .errorpb.ServerIsBusy server_is_busy = 6;
    if (has_server_is_busy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->server_is_busy_);
    }

    // optional .errorpb.StaleCommand stale_command = 7;
    if (has_stale_command()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->stale_command_);
    }

    // optional .errorpb.StoreNotMatch store_not_match = 8;
    if (has_store_not_match()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->store_not_match_);
    }

  }
  // optional .errorpb.RaftEntryTooLarge raft_entry_too_large = 9;
  if (has_raft_entry_too_large()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->raft_entry_too_large_);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Error::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:errorpb.Error)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Error* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Error>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:errorpb.Error)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:errorpb.Error)
    UnsafeMergeFrom(*source);
  }
}

void Error::MergeFrom(const Error& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:errorpb.Error)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Error::UnsafeMergeFrom(const Error& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message()) {
      set_has_message();
      message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
    }
    if (from.has_not_leader()) {
      mutable_not_leader()->::errorpb::NotLeader::MergeFrom(from.not_leader());
    }
    if (from.has_region_not_found()) {
      mutable_region_not_found()->::errorpb::RegionNotFound::MergeFrom(from.region_not_found());
    }
    if (from.has_key_not_in_region()) {
      mutable_key_not_in_region()->::errorpb::KeyNotInRegion::MergeFrom(from.key_not_in_region());
    }
    if (from.has_stale_epoch()) {
      mutable_stale_epoch()->::errorpb::StaleEpoch::MergeFrom(from.stale_epoch());
    }
    if (from.has_server_is_busy()) {
      mutable_server_is_busy()->::errorpb::ServerIsBusy::MergeFrom(from.server_is_busy());
    }
    if (from.has_stale_command()) {
      mutable_stale_command()->::errorpb::StaleCommand::MergeFrom(from.stale_command());
    }
    if (from.has_store_not_match()) {
      mutable_store_not_match()->::errorpb::StoreNotMatch::MergeFrom(from.store_not_match());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_raft_entry_too_large()) {
      mutable_raft_entry_too_large()->::errorpb::RaftEntryTooLarge::MergeFrom(from.raft_entry_too_large());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void Error::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:errorpb.Error)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Error::CopyFrom(const Error& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:errorpb.Error)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Error::IsInitialized() const {

  return true;
}

void Error::Swap(Error* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Error::InternalSwap(Error* other) {
  message_.Swap(&other->message_);
  std::swap(not_leader_, other->not_leader_);
  std::swap(region_not_found_, other->region_not_found_);
  std::swap(key_not_in_region_, other->key_not_in_region_);
  std::swap(stale_epoch_, other->stale_epoch_);
  std::swap(server_is_busy_, other->server_is_busy_);
  std::swap(stale_command_, other->stale_command_);
  std::swap(store_not_match_, other->store_not_match_);
  std::swap(raft_entry_too_large_, other->raft_entry_too_large_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Error::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Error_descriptor_;
  metadata.reflection = Error_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Error

// optional string message = 1;
bool Error::has_message() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Error::set_has_message() {
  _has_bits_[0] |= 0x00000001u;
}
void Error::clear_has_message() {
  _has_bits_[0] &= ~0x00000001u;
}
void Error::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_message();
}
const ::std::string& Error::message() const {
  // @@protoc_insertion_point(field_get:errorpb.Error.message)
  return message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Error::set_message(const ::std::string& value) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:errorpb.Error.message)
}
void Error::set_message(const char* value) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:errorpb.Error.message)
}
void Error::set_message(const char* value, size_t size) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:errorpb.Error.message)
}
::std::string* Error::mutable_message() {
  set_has_message();
  // @@protoc_insertion_point(field_mutable:errorpb.Error.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Error::release_message() {
  // @@protoc_insertion_point(field_release:errorpb.Error.message)
  clear_has_message();
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Error::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    set_has_message();
  } else {
    clear_has_message();
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:errorpb.Error.message)
}

// optional .errorpb.NotLeader not_leader = 2;
bool Error::has_not_leader() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Error::set_has_not_leader() {
  _has_bits_[0] |= 0x00000002u;
}
void Error::clear_has_not_leader() {
  _has_bits_[0] &= ~0x00000002u;
}
void Error::clear_not_leader() {
  if (not_leader_ != NULL) not_leader_->::errorpb::NotLeader::Clear();
  clear_has_not_leader();
}
const ::errorpb::NotLeader& Error::not_leader() const {
  // @@protoc_insertion_point(field_get:errorpb.Error.not_leader)
  return not_leader_ != NULL ? *not_leader_
                         : *::errorpb::NotLeader::internal_default_instance();
}
::errorpb::NotLeader* Error::mutable_not_leader() {
  set_has_not_leader();
  if (not_leader_ == NULL) {
    not_leader_ = new ::errorpb::NotLeader;
  }
  // @@protoc_insertion_point(field_mutable:errorpb.Error.not_leader)
  return not_leader_;
}
::errorpb::NotLeader* Error::release_not_leader() {
  // @@protoc_insertion_point(field_release:errorpb.Error.not_leader)
  clear_has_not_leader();
  ::errorpb::NotLeader* temp = not_leader_;
  not_leader_ = NULL;
  return temp;
}
void Error::set_allocated_not_leader(::errorpb::NotLeader* not_leader) {
  delete not_leader_;
  not_leader_ = not_leader;
  if (not_leader) {
    set_has_not_leader();
  } else {
    clear_has_not_leader();
  }
  // @@protoc_insertion_point(field_set_allocated:errorpb.Error.not_leader)
}

// optional .errorpb.RegionNotFound region_not_found = 3;
bool Error::has_region_not_found() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Error::set_has_region_not_found() {
  _has_bits_[0] |= 0x00000004u;
}
void Error::clear_has_region_not_found() {
  _has_bits_[0] &= ~0x00000004u;
}
void Error::clear_region_not_found() {
  if (region_not_found_ != NULL) region_not_found_->::errorpb::RegionNotFound::Clear();
  clear_has_region_not_found();
}
const ::errorpb::RegionNotFound& Error::region_not_found() const {
  // @@protoc_insertion_point(field_get:errorpb.Error.region_not_found)
  return region_not_found_ != NULL ? *region_not_found_
                         : *::errorpb::RegionNotFound::internal_default_instance();
}
::errorpb::RegionNotFound* Error::mutable_region_not_found() {
  set_has_region_not_found();
  if (region_not_found_ == NULL) {
    region_not_found_ = new ::errorpb::RegionNotFound;
  }
  // @@protoc_insertion_point(field_mutable:errorpb.Error.region_not_found)
  return region_not_found_;
}
::errorpb::RegionNotFound* Error::release_region_not_found() {
  // @@protoc_insertion_point(field_release:errorpb.Error.region_not_found)
  clear_has_region_not_found();
  ::errorpb::RegionNotFound* temp = region_not_found_;
  region_not_found_ = NULL;
  return temp;
}
void Error::set_allocated_region_not_found(::errorpb::RegionNotFound* region_not_found) {
  delete region_not_found_;
  region_not_found_ = region_not_found;
  if (region_not_found) {
    set_has_region_not_found();
  } else {
    clear_has_region_not_found();
  }
  // @@protoc_insertion_point(field_set_allocated:errorpb.Error.region_not_found)
}

// optional .errorpb.KeyNotInRegion key_not_in_region = 4;
bool Error::has_key_not_in_region() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Error::set_has_key_not_in_region() {
  _has_bits_[0] |= 0x00000008u;
}
void Error::clear_has_key_not_in_region() {
  _has_bits_[0] &= ~0x00000008u;
}
void Error::clear_key_not_in_region() {
  if (key_not_in_region_ != NULL) key_not_in_region_->::errorpb::KeyNotInRegion::Clear();
  clear_has_key_not_in_region();
}
const ::errorpb::KeyNotInRegion& Error::key_not_in_region() const {
  // @@protoc_insertion_point(field_get:errorpb.Error.key_not_in_region)
  return key_not_in_region_ != NULL ? *key_not_in_region_
                         : *::errorpb::KeyNotInRegion::internal_default_instance();
}
::errorpb::KeyNotInRegion* Error::mutable_key_not_in_region() {
  set_has_key_not_in_region();
  if (key_not_in_region_ == NULL) {
    key_not_in_region_ = new ::errorpb::KeyNotInRegion;
  }
  // @@protoc_insertion_point(field_mutable:errorpb.Error.key_not_in_region)
  return key_not_in_region_;
}
::errorpb::KeyNotInRegion* Error::release_key_not_in_region() {
  // @@protoc_insertion_point(field_release:errorpb.Error.key_not_in_region)
  clear_has_key_not_in_region();
  ::errorpb::KeyNotInRegion* temp = key_not_in_region_;
  key_not_in_region_ = NULL;
  return temp;
}
void Error::set_allocated_key_not_in_region(::errorpb::KeyNotInRegion* key_not_in_region) {
  delete key_not_in_region_;
  key_not_in_region_ = key_not_in_region;
  if (key_not_in_region) {
    set_has_key_not_in_region();
  } else {
    clear_has_key_not_in_region();
  }
  // @@protoc_insertion_point(field_set_allocated:errorpb.Error.key_not_in_region)
}

// optional .errorpb.StaleEpoch stale_epoch = 5;
bool Error::has_stale_epoch() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Error::set_has_stale_epoch() {
  _has_bits_[0] |= 0x00000010u;
}
void Error::clear_has_stale_epoch() {
  _has_bits_[0] &= ~0x00000010u;
}
void Error::clear_stale_epoch() {
  if (stale_epoch_ != NULL) stale_epoch_->::errorpb::StaleEpoch::Clear();
  clear_has_stale_epoch();
}
const ::errorpb::StaleEpoch& Error::stale_epoch() const {
  // @@protoc_insertion_point(field_get:errorpb.Error.stale_epoch)
  return stale_epoch_ != NULL ? *stale_epoch_
                         : *::errorpb::StaleEpoch::internal_default_instance();
}
::errorpb::StaleEpoch* Error::mutable_stale_epoch() {
  set_has_stale_epoch();
  if (stale_epoch_ == NULL) {
    stale_epoch_ = new ::errorpb::StaleEpoch;
  }
  // @@protoc_insertion_point(field_mutable:errorpb.Error.stale_epoch)
  return stale_epoch_;
}
::errorpb::StaleEpoch* Error::release_stale_epoch() {
  // @@protoc_insertion_point(field_release:errorpb.Error.stale_epoch)
  clear_has_stale_epoch();
  ::errorpb::StaleEpoch* temp = stale_epoch_;
  stale_epoch_ = NULL;
  return temp;
}
void Error::set_allocated_stale_epoch(::errorpb::StaleEpoch* stale_epoch) {
  delete stale_epoch_;
  stale_epoch_ = stale_epoch;
  if (stale_epoch) {
    set_has_stale_epoch();
  } else {
    clear_has_stale_epoch();
  }
  // @@protoc_insertion_point(field_set_allocated:errorpb.Error.stale_epoch)
}

// optional .errorpb.ServerIsBusy server_is_busy = 6;
bool Error::has_server_is_busy() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Error::set_has_server_is_busy() {
  _has_bits_[0] |= 0x00000020u;
}
void Error::clear_has_server_is_busy() {
  _has_bits_[0] &= ~0x00000020u;
}
void Error::clear_server_is_busy() {
  if (server_is_busy_ != NULL) server_is_busy_->::errorpb::ServerIsBusy::Clear();
  clear_has_server_is_busy();
}
const ::errorpb::ServerIsBusy& Error::server_is_busy() const {
  // @@protoc_insertion_point(field_get:errorpb.Error.server_is_busy)
  return server_is_busy_ != NULL ? *server_is_busy_
                         : *::errorpb::ServerIsBusy::internal_default_instance();
}
::errorpb::ServerIsBusy* Error::mutable_server_is_busy() {
  set_has_server_is_busy();
  if (server_is_busy_ == NULL) {
    server_is_busy_ = new ::errorpb::ServerIsBusy;
  }
  // @@protoc_insertion_point(field_mutable:errorpb.Error.server_is_busy)
  return server_is_busy_;
}
::errorpb::ServerIsBusy* Error::release_server_is_busy() {
  // @@protoc_insertion_point(field_release:errorpb.Error.server_is_busy)
  clear_has_server_is_busy();
  ::errorpb::ServerIsBusy* temp = server_is_busy_;
  server_is_busy_ = NULL;
  return temp;
}
void Error::set_allocated_server_is_busy(::errorpb::ServerIsBusy* server_is_busy) {
  delete server_is_busy_;
  server_is_busy_ = server_is_busy;
  if (server_is_busy) {
    set_has_server_is_busy();
  } else {
    clear_has_server_is_busy();
  }
  // @@protoc_insertion_point(field_set_allocated:errorpb.Error.server_is_busy)
}

// optional .errorpb.StaleCommand stale_command = 7;
bool Error::has_stale_command() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Error::set_has_stale_command() {
  _has_bits_[0] |= 0x00000040u;
}
void Error::clear_has_stale_command() {
  _has_bits_[0] &= ~0x00000040u;
}
void Error::clear_stale_command() {
  if (stale_command_ != NULL) stale_command_->::errorpb::StaleCommand::Clear();
  clear_has_stale_command();
}
const ::errorpb::StaleCommand& Error::stale_command() const {
  // @@protoc_insertion_point(field_get:errorpb.Error.stale_command)
  return stale_command_ != NULL ? *stale_command_
                         : *::errorpb::StaleCommand::internal_default_instance();
}
::errorpb::StaleCommand* Error::mutable_stale_command() {
  set_has_stale_command();
  if (stale_command_ == NULL) {
    stale_command_ = new ::errorpb::StaleCommand;
  }
  // @@protoc_insertion_point(field_mutable:errorpb.Error.stale_command)
  return stale_command_;
}
::errorpb::StaleCommand* Error::release_stale_command() {
  // @@protoc_insertion_point(field_release:errorpb.Error.stale_command)
  clear_has_stale_command();
  ::errorpb::StaleCommand* temp = stale_command_;
  stale_command_ = NULL;
  return temp;
}
void Error::set_allocated_stale_command(::errorpb::StaleCommand* stale_command) {
  delete stale_command_;
  stale_command_ = stale_command;
  if (stale_command) {
    set_has_stale_command();
  } else {
    clear_has_stale_command();
  }
  // @@protoc_insertion_point(field_set_allocated:errorpb.Error.stale_command)
}

// optional .errorpb.StoreNotMatch store_not_match = 8;
bool Error::has_store_not_match() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Error::set_has_store_not_match() {
  _has_bits_[0] |= 0x00000080u;
}
void Error::clear_has_store_not_match() {
  _has_bits_[0] &= ~0x00000080u;
}
void Error::clear_store_not_match() {
  if (store_not_match_ != NULL) store_not_match_->::errorpb::StoreNotMatch::Clear();
  clear_has_store_not_match();
}
const ::errorpb::StoreNotMatch& Error::store_not_match() const {
  // @@protoc_insertion_point(field_get:errorpb.Error.store_not_match)
  return store_not_match_ != NULL ? *store_not_match_
                         : *::errorpb::StoreNotMatch::internal_default_instance();
}
::errorpb::StoreNotMatch* Error::mutable_store_not_match() {
  set_has_store_not_match();
  if (store_not_match_ == NULL) {
    store_not_match_ = new ::errorpb::StoreNotMatch;
  }
  // @@protoc_insertion_point(field_mutable:errorpb.Error.store_not_match)
  return store_not_match_;
}
::errorpb::StoreNotMatch* Error::release_store_not_match() {
  // @@protoc_insertion_point(field_release:errorpb.Error.store_not_match)
  clear_has_store_not_match();
  ::errorpb::StoreNotMatch* temp = store_not_match_;
  store_not_match_ = NULL;
  return temp;
}
void Error::set_allocated_store_not_match(::errorpb::StoreNotMatch* store_not_match) {
  delete store_not_match_;
  store_not_match_ = store_not_match;
  if (store_not_match) {
    set_has_store_not_match();
  } else {
    clear_has_store_not_match();
  }
  // @@protoc_insertion_point(field_set_allocated:errorpb.Error.store_not_match)
}

// optional .errorpb.RaftEntryTooLarge raft_entry_too_large = 9;
bool Error::has_raft_entry_too_large() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Error::set_has_raft_entry_too_large() {
  _has_bits_[0] |= 0x00000100u;
}
void Error::clear_has_raft_entry_too_large() {
  _has_bits_[0] &= ~0x00000100u;
}
void Error::clear_raft_entry_too_large() {
  if (raft_entry_too_large_ != NULL) raft_entry_too_large_->::errorpb::RaftEntryTooLarge::Clear();
  clear_has_raft_entry_too_large();
}
const ::errorpb::RaftEntryTooLarge& Error::raft_entry_too_large() const {
  // @@protoc_insertion_point(field_get:errorpb.Error.raft_entry_too_large)
  return raft_entry_too_large_ != NULL ? *raft_entry_too_large_
                         : *::errorpb::RaftEntryTooLarge::internal_default_instance();
}
::errorpb::RaftEntryTooLarge* Error::mutable_raft_entry_too_large() {
  set_has_raft_entry_too_large();
  if (raft_entry_too_large_ == NULL) {
    raft_entry_too_large_ = new ::errorpb::RaftEntryTooLarge;
  }
  // @@protoc_insertion_point(field_mutable:errorpb.Error.raft_entry_too_large)
  return raft_entry_too_large_;
}
::errorpb::RaftEntryTooLarge* Error::release_raft_entry_too_large() {
  // @@protoc_insertion_point(field_release:errorpb.Error.raft_entry_too_large)
  clear_has_raft_entry_too_large();
  ::errorpb::RaftEntryTooLarge* temp = raft_entry_too_large_;
  raft_entry_too_large_ = NULL;
  return temp;
}
void Error::set_allocated_raft_entry_too_large(::errorpb::RaftEntryTooLarge* raft_entry_too_large) {
  delete raft_entry_too_large_;
  raft_entry_too_large_ = raft_entry_too_large;
  if (raft_entry_too_large) {
    set_has_raft_entry_too_large();
  } else {
    clear_has_raft_entry_too_large();
  }
  // @@protoc_insertion_point(field_set_allocated:errorpb.Error.raft_entry_too_large)
}

inline const Error* Error::internal_default_instance() {
  return &Error_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace errorpb

// @@protoc_insertion_point(global_scope)
