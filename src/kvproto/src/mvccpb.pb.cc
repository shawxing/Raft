// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mvccpb.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "mvccpb.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace mvccpb {

namespace {

const ::google::protobuf::Descriptor* MetaItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MetaItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* MetaLock_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MetaLock_reflection_ = NULL;
const ::google::protobuf::Descriptor* Meta_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Meta_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MetaLockType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_mvccpb_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_mvccpb_2eproto() {
  protobuf_AddDesc_mvccpb_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "mvccpb.proto");
  GOOGLE_CHECK(file != NULL);
  MetaItem_descriptor_ = file->message_type(0);
  static const int MetaItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetaItem, start_ts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetaItem, commit_ts_),
  };
  MetaItem_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MetaItem_descriptor_,
      MetaItem::internal_default_instance(),
      MetaItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetaItem, _has_bits_),
      -1,
      -1,
      sizeof(MetaItem),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetaItem, _internal_metadata_));
  MetaLock_descriptor_ = file->message_type(1);
  static const int MetaLock_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetaLock, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetaLock, start_ts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetaLock, primary_key_),
  };
  MetaLock_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MetaLock_descriptor_,
      MetaLock::internal_default_instance(),
      MetaLock_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetaLock, _has_bits_),
      -1,
      -1,
      sizeof(MetaLock),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetaLock, _internal_metadata_));
  Meta_descriptor_ = file->message_type(2);
  static const int Meta_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Meta, lock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Meta, items_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Meta, next_),
  };
  Meta_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Meta_descriptor_,
      Meta::internal_default_instance(),
      Meta_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Meta, _has_bits_),
      -1,
      -1,
      sizeof(Meta),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Meta, _internal_metadata_));
  MetaLockType_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_mvccpb_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MetaItem_descriptor_, MetaItem::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MetaLock_descriptor_, MetaLock::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Meta_descriptor_, Meta::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_mvccpb_2eproto() {
  MetaItem_default_instance_.Shutdown();
  delete MetaItem_reflection_;
  MetaLock_default_instance_.Shutdown();
  delete MetaLock_reflection_;
  Meta_default_instance_.Shutdown();
  delete Meta_reflection_;
}

void protobuf_InitDefaults_mvccpb_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  MetaItem_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  MetaLock_default_instance_.DefaultConstruct();
  Meta_default_instance_.DefaultConstruct();
  MetaItem_default_instance_.get_mutable()->InitAsDefaultInstance();
  MetaLock_default_instance_.get_mutable()->InitAsDefaultInstance();
  Meta_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_mvccpb_2eproto_once_);
void protobuf_InitDefaults_mvccpb_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_mvccpb_2eproto_once_,
                 &protobuf_InitDefaults_mvccpb_2eproto_impl);
}
void protobuf_AddDesc_mvccpb_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_mvccpb_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014mvccpb.proto\022\006mvccpb\"/\n\010MetaItem\022\020\n\010st"
    "art_ts\030\001 \001(\004\022\021\n\tcommit_ts\030\002 \001(\004\"U\n\010MetaL"
    "ock\022\"\n\004type\030\001 \001(\0162\024.mvccpb.MetaLockType\022"
    "\020\n\010start_ts\030\002 \001(\004\022\023\n\013primary_key\030\003 \001(\014\"U"
    "\n\004Meta\022\036\n\004lock\030\001 \001(\0132\020.mvccpb.MetaLock\022\037"
    "\n\005items\030\002 \003(\0132\020.mvccpb.MetaItem\022\014\n\004next\030"
    "\003 \001(\004*+\n\014MetaLockType\022\014\n\010ReadOnly\020\001\022\r\n\tR"
    "eadWrite\020\002", 290);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "mvccpb.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_mvccpb_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_mvccpb_2eproto_once_);
void protobuf_AddDesc_mvccpb_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_mvccpb_2eproto_once_,
                 &protobuf_AddDesc_mvccpb_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_mvccpb_2eproto {
  StaticDescriptorInitializer_mvccpb_2eproto() {
    protobuf_AddDesc_mvccpb_2eproto();
  }
} static_descriptor_initializer_mvccpb_2eproto_;
const ::google::protobuf::EnumDescriptor* MetaLockType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MetaLockType_descriptor_;
}
bool MetaLockType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MetaItem::kStartTsFieldNumber;
const int MetaItem::kCommitTsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MetaItem::MetaItem()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_mvccpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:mvccpb.MetaItem)
}

void MetaItem::InitAsDefaultInstance() {
}

MetaItem::MetaItem(const MetaItem& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mvccpb.MetaItem)
}

void MetaItem::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&start_ts_, 0, reinterpret_cast<char*>(&commit_ts_) -
    reinterpret_cast<char*>(&start_ts_) + sizeof(commit_ts_));
}

MetaItem::~MetaItem() {
  // @@protoc_insertion_point(destructor:mvccpb.MetaItem)
  SharedDtor();
}

void MetaItem::SharedDtor() {
}

void MetaItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MetaItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MetaItem_descriptor_;
}

const MetaItem& MetaItem::default_instance() {
  protobuf_InitDefaults_mvccpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<MetaItem> MetaItem_default_instance_;

MetaItem* MetaItem::New(::google::protobuf::Arena* arena) const {
  MetaItem* n = new MetaItem;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MetaItem::Clear() {
// @@protoc_insertion_point(message_clear_start:mvccpb.MetaItem)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(MetaItem, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MetaItem*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(start_ts_, commit_ts_);

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MetaItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mvccpb.MetaItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 start_ts = 1;
      case 1: {
        if (tag == 8) {
          set_has_start_ts();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &start_ts_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_commit_ts;
        break;
      }

      // optional uint64 commit_ts = 2;
      case 2: {
        if (tag == 16) {
         parse_commit_ts:
          set_has_commit_ts();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &commit_ts_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mvccpb.MetaItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mvccpb.MetaItem)
  return false;
#undef DO_
}

void MetaItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mvccpb.MetaItem)
  // optional uint64 start_ts = 1;
  if (has_start_ts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->start_ts(), output);
  }

  // optional uint64 commit_ts = 2;
  if (has_commit_ts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->commit_ts(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mvccpb.MetaItem)
}

::google::protobuf::uint8* MetaItem::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mvccpb.MetaItem)
  // optional uint64 start_ts = 1;
  if (has_start_ts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->start_ts(), target);
  }

  // optional uint64 commit_ts = 2;
  if (has_commit_ts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->commit_ts(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mvccpb.MetaItem)
  return target;
}

size_t MetaItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mvccpb.MetaItem)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional uint64 start_ts = 1;
    if (has_start_ts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->start_ts());
    }

    // optional uint64 commit_ts = 2;
    if (has_commit_ts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->commit_ts());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MetaItem::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mvccpb.MetaItem)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const MetaItem* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MetaItem>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mvccpb.MetaItem)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mvccpb.MetaItem)
    UnsafeMergeFrom(*source);
  }
}

void MetaItem::MergeFrom(const MetaItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mvccpb.MetaItem)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void MetaItem::UnsafeMergeFrom(const MetaItem& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_start_ts()) {
      set_start_ts(from.start_ts());
    }
    if (from.has_commit_ts()) {
      set_commit_ts(from.commit_ts());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void MetaItem::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mvccpb.MetaItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MetaItem::CopyFrom(const MetaItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mvccpb.MetaItem)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool MetaItem::IsInitialized() const {

  return true;
}

void MetaItem::Swap(MetaItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MetaItem::InternalSwap(MetaItem* other) {
  std::swap(start_ts_, other->start_ts_);
  std::swap(commit_ts_, other->commit_ts_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MetaItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MetaItem_descriptor_;
  metadata.reflection = MetaItem_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MetaItem

// optional uint64 start_ts = 1;
bool MetaItem::has_start_ts() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MetaItem::set_has_start_ts() {
  _has_bits_[0] |= 0x00000001u;
}
void MetaItem::clear_has_start_ts() {
  _has_bits_[0] &= ~0x00000001u;
}
void MetaItem::clear_start_ts() {
  start_ts_ = GOOGLE_ULONGLONG(0);
  clear_has_start_ts();
}
::google::protobuf::uint64 MetaItem::start_ts() const {
  // @@protoc_insertion_point(field_get:mvccpb.MetaItem.start_ts)
  return start_ts_;
}
void MetaItem::set_start_ts(::google::protobuf::uint64 value) {
  set_has_start_ts();
  start_ts_ = value;
  // @@protoc_insertion_point(field_set:mvccpb.MetaItem.start_ts)
}

// optional uint64 commit_ts = 2;
bool MetaItem::has_commit_ts() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MetaItem::set_has_commit_ts() {
  _has_bits_[0] |= 0x00000002u;
}
void MetaItem::clear_has_commit_ts() {
  _has_bits_[0] &= ~0x00000002u;
}
void MetaItem::clear_commit_ts() {
  commit_ts_ = GOOGLE_ULONGLONG(0);
  clear_has_commit_ts();
}
::google::protobuf::uint64 MetaItem::commit_ts() const {
  // @@protoc_insertion_point(field_get:mvccpb.MetaItem.commit_ts)
  return commit_ts_;
}
void MetaItem::set_commit_ts(::google::protobuf::uint64 value) {
  set_has_commit_ts();
  commit_ts_ = value;
  // @@protoc_insertion_point(field_set:mvccpb.MetaItem.commit_ts)
}

inline const MetaItem* MetaItem::internal_default_instance() {
  return &MetaItem_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MetaLock::kTypeFieldNumber;
const int MetaLock::kStartTsFieldNumber;
const int MetaLock::kPrimaryKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MetaLock::MetaLock()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_mvccpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:mvccpb.MetaLock)
}

void MetaLock::InitAsDefaultInstance() {
}

MetaLock::MetaLock(const MetaLock& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mvccpb.MetaLock)
}

void MetaLock::SharedCtor() {
  _cached_size_ = 0;
  primary_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  start_ts_ = GOOGLE_ULONGLONG(0);
  type_ = 1;
}

MetaLock::~MetaLock() {
  // @@protoc_insertion_point(destructor:mvccpb.MetaLock)
  SharedDtor();
}

void MetaLock::SharedDtor() {
  primary_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MetaLock::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MetaLock::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MetaLock_descriptor_;
}

const MetaLock& MetaLock::default_instance() {
  protobuf_InitDefaults_mvccpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<MetaLock> MetaLock_default_instance_;

MetaLock* MetaLock::New(::google::protobuf::Arena* arena) const {
  MetaLock* n = new MetaLock;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MetaLock::Clear() {
// @@protoc_insertion_point(message_clear_start:mvccpb.MetaLock)
  if (_has_bits_[0 / 32] & 7u) {
    type_ = 1;
    start_ts_ = GOOGLE_ULONGLONG(0);
    if (has_primary_key()) {
      primary_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MetaLock::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mvccpb.MetaLock)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .mvccpb.MetaLockType type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mvccpb::MetaLockType_IsValid(value)) {
            set_type(static_cast< ::mvccpb::MetaLockType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_start_ts;
        break;
      }

      // optional uint64 start_ts = 2;
      case 2: {
        if (tag == 16) {
         parse_start_ts:
          set_has_start_ts();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &start_ts_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_primary_key;
        break;
      }

      // optional bytes primary_key = 3;
      case 3: {
        if (tag == 26) {
         parse_primary_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_primary_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mvccpb.MetaLock)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mvccpb.MetaLock)
  return false;
#undef DO_
}

void MetaLock::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mvccpb.MetaLock)
  // optional .mvccpb.MetaLockType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional uint64 start_ts = 2;
  if (has_start_ts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->start_ts(), output);
  }

  // optional bytes primary_key = 3;
  if (has_primary_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->primary_key(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mvccpb.MetaLock)
}

::google::protobuf::uint8* MetaLock::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mvccpb.MetaLock)
  // optional .mvccpb.MetaLockType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional uint64 start_ts = 2;
  if (has_start_ts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->start_ts(), target);
  }

  // optional bytes primary_key = 3;
  if (has_primary_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->primary_key(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mvccpb.MetaLock)
  return target;
}

size_t MetaLock::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mvccpb.MetaLock)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional .mvccpb.MetaLockType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional uint64 start_ts = 2;
    if (has_start_ts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->start_ts());
    }

    // optional bytes primary_key = 3;
    if (has_primary_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->primary_key());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MetaLock::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mvccpb.MetaLock)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const MetaLock* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MetaLock>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mvccpb.MetaLock)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mvccpb.MetaLock)
    UnsafeMergeFrom(*source);
  }
}

void MetaLock::MergeFrom(const MetaLock& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mvccpb.MetaLock)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void MetaLock::UnsafeMergeFrom(const MetaLock& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_start_ts()) {
      set_start_ts(from.start_ts());
    }
    if (from.has_primary_key()) {
      set_has_primary_key();
      primary_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.primary_key_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void MetaLock::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mvccpb.MetaLock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MetaLock::CopyFrom(const MetaLock& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mvccpb.MetaLock)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool MetaLock::IsInitialized() const {

  return true;
}

void MetaLock::Swap(MetaLock* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MetaLock::InternalSwap(MetaLock* other) {
  std::swap(type_, other->type_);
  std::swap(start_ts_, other->start_ts_);
  primary_key_.Swap(&other->primary_key_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MetaLock::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MetaLock_descriptor_;
  metadata.reflection = MetaLock_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MetaLock

// optional .mvccpb.MetaLockType type = 1;
bool MetaLock::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MetaLock::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
void MetaLock::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void MetaLock::clear_type() {
  type_ = 1;
  clear_has_type();
}
::mvccpb::MetaLockType MetaLock::type() const {
  // @@protoc_insertion_point(field_get:mvccpb.MetaLock.type)
  return static_cast< ::mvccpb::MetaLockType >(type_);
}
void MetaLock::set_type(::mvccpb::MetaLockType value) {
  assert(::mvccpb::MetaLockType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:mvccpb.MetaLock.type)
}

// optional uint64 start_ts = 2;
bool MetaLock::has_start_ts() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MetaLock::set_has_start_ts() {
  _has_bits_[0] |= 0x00000002u;
}
void MetaLock::clear_has_start_ts() {
  _has_bits_[0] &= ~0x00000002u;
}
void MetaLock::clear_start_ts() {
  start_ts_ = GOOGLE_ULONGLONG(0);
  clear_has_start_ts();
}
::google::protobuf::uint64 MetaLock::start_ts() const {
  // @@protoc_insertion_point(field_get:mvccpb.MetaLock.start_ts)
  return start_ts_;
}
void MetaLock::set_start_ts(::google::protobuf::uint64 value) {
  set_has_start_ts();
  start_ts_ = value;
  // @@protoc_insertion_point(field_set:mvccpb.MetaLock.start_ts)
}

// optional bytes primary_key = 3;
bool MetaLock::has_primary_key() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void MetaLock::set_has_primary_key() {
  _has_bits_[0] |= 0x00000004u;
}
void MetaLock::clear_has_primary_key() {
  _has_bits_[0] &= ~0x00000004u;
}
void MetaLock::clear_primary_key() {
  primary_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_primary_key();
}
const ::std::string& MetaLock::primary_key() const {
  // @@protoc_insertion_point(field_get:mvccpb.MetaLock.primary_key)
  return primary_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MetaLock::set_primary_key(const ::std::string& value) {
  set_has_primary_key();
  primary_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mvccpb.MetaLock.primary_key)
}
void MetaLock::set_primary_key(const char* value) {
  set_has_primary_key();
  primary_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mvccpb.MetaLock.primary_key)
}
void MetaLock::set_primary_key(const void* value, size_t size) {
  set_has_primary_key();
  primary_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mvccpb.MetaLock.primary_key)
}
::std::string* MetaLock::mutable_primary_key() {
  set_has_primary_key();
  // @@protoc_insertion_point(field_mutable:mvccpb.MetaLock.primary_key)
  return primary_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MetaLock::release_primary_key() {
  // @@protoc_insertion_point(field_release:mvccpb.MetaLock.primary_key)
  clear_has_primary_key();
  return primary_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MetaLock::set_allocated_primary_key(::std::string* primary_key) {
  if (primary_key != NULL) {
    set_has_primary_key();
  } else {
    clear_has_primary_key();
  }
  primary_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), primary_key);
  // @@protoc_insertion_point(field_set_allocated:mvccpb.MetaLock.primary_key)
}

inline const MetaLock* MetaLock::internal_default_instance() {
  return &MetaLock_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Meta::kLockFieldNumber;
const int Meta::kItemsFieldNumber;
const int Meta::kNextFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Meta::Meta()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_mvccpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:mvccpb.Meta)
}

void Meta::InitAsDefaultInstance() {
  lock_ = const_cast< ::mvccpb::MetaLock*>(
      ::mvccpb::MetaLock::internal_default_instance());
}

Meta::Meta(const Meta& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mvccpb.Meta)
}

void Meta::SharedCtor() {
  _cached_size_ = 0;
  lock_ = NULL;
  next_ = GOOGLE_ULONGLONG(0);
}

Meta::~Meta() {
  // @@protoc_insertion_point(destructor:mvccpb.Meta)
  SharedDtor();
}

void Meta::SharedDtor() {
  if (this != &Meta_default_instance_.get()) {
    delete lock_;
  }
}

void Meta::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Meta::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Meta_descriptor_;
}

const Meta& Meta::default_instance() {
  protobuf_InitDefaults_mvccpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Meta> Meta_default_instance_;

Meta* Meta::New(::google::protobuf::Arena* arena) const {
  Meta* n = new Meta;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Meta::Clear() {
// @@protoc_insertion_point(message_clear_start:mvccpb.Meta)
  if (_has_bits_[0 / 32] & 5u) {
    if (has_lock()) {
      if (lock_ != NULL) lock_->::mvccpb::MetaLock::Clear();
    }
    next_ = GOOGLE_ULONGLONG(0);
  }
  items_.Clear();
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Meta::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mvccpb.Meta)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .mvccpb.MetaLock lock = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lock()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_items;
        break;
      }

      // repeated .mvccpb.MetaItem items = 2;
      case 2: {
        if (tag == 18) {
         parse_items:
          DO_(input->IncrementRecursionDepth());
         parse_loop_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_items;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(24)) goto parse_next;
        break;
      }

      // optional uint64 next = 3;
      case 3: {
        if (tag == 24) {
         parse_next:
          set_has_next();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &next_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mvccpb.Meta)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mvccpb.Meta)
  return false;
#undef DO_
}

void Meta::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mvccpb.Meta)
  // optional .mvccpb.MetaLock lock = 1;
  if (has_lock()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->lock_, output);
  }

  // repeated .mvccpb.MetaItem items = 2;
  for (unsigned int i = 0, n = this->items_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->items(i), output);
  }

  // optional uint64 next = 3;
  if (has_next()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->next(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mvccpb.Meta)
}

::google::protobuf::uint8* Meta::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mvccpb.Meta)
  // optional .mvccpb.MetaLock lock = 1;
  if (has_lock()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->lock_, false, target);
  }

  // repeated .mvccpb.MetaItem items = 2;
  for (unsigned int i = 0, n = this->items_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->items(i), false, target);
  }

  // optional uint64 next = 3;
  if (has_next()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->next(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mvccpb.Meta)
  return target;
}

size_t Meta::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mvccpb.Meta)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 5u) {
    // optional .mvccpb.MetaLock lock = 1;
    if (has_lock()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->lock_);
    }

    // optional uint64 next = 3;
    if (has_next()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->next());
    }

  }
  // repeated .mvccpb.MetaItem items = 2;
  {
    unsigned int count = this->items_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->items(i));
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Meta::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mvccpb.Meta)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Meta* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Meta>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mvccpb.Meta)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mvccpb.Meta)
    UnsafeMergeFrom(*source);
  }
}

void Meta::MergeFrom(const Meta& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mvccpb.Meta)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Meta::UnsafeMergeFrom(const Meta& from) {
  GOOGLE_DCHECK(&from != this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lock()) {
      mutable_lock()->::mvccpb::MetaLock::MergeFrom(from.lock());
    }
    if (from.has_next()) {
      set_next(from.next());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void Meta::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mvccpb.Meta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Meta::CopyFrom(const Meta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mvccpb.Meta)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Meta::IsInitialized() const {

  return true;
}

void Meta::Swap(Meta* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Meta::InternalSwap(Meta* other) {
  std::swap(lock_, other->lock_);
  items_.UnsafeArenaSwap(&other->items_);
  std::swap(next_, other->next_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Meta::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Meta_descriptor_;
  metadata.reflection = Meta_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Meta

// optional .mvccpb.MetaLock lock = 1;
bool Meta::has_lock() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Meta::set_has_lock() {
  _has_bits_[0] |= 0x00000001u;
}
void Meta::clear_has_lock() {
  _has_bits_[0] &= ~0x00000001u;
}
void Meta::clear_lock() {
  if (lock_ != NULL) lock_->::mvccpb::MetaLock::Clear();
  clear_has_lock();
}
const ::mvccpb::MetaLock& Meta::lock() const {
  // @@protoc_insertion_point(field_get:mvccpb.Meta.lock)
  return lock_ != NULL ? *lock_
                         : *::mvccpb::MetaLock::internal_default_instance();
}
::mvccpb::MetaLock* Meta::mutable_lock() {
  set_has_lock();
  if (lock_ == NULL) {
    lock_ = new ::mvccpb::MetaLock;
  }
  // @@protoc_insertion_point(field_mutable:mvccpb.Meta.lock)
  return lock_;
}
::mvccpb::MetaLock* Meta::release_lock() {
  // @@protoc_insertion_point(field_release:mvccpb.Meta.lock)
  clear_has_lock();
  ::mvccpb::MetaLock* temp = lock_;
  lock_ = NULL;
  return temp;
}
void Meta::set_allocated_lock(::mvccpb::MetaLock* lock) {
  delete lock_;
  lock_ = lock;
  if (lock) {
    set_has_lock();
  } else {
    clear_has_lock();
  }
  // @@protoc_insertion_point(field_set_allocated:mvccpb.Meta.lock)
}

// repeated .mvccpb.MetaItem items = 2;
int Meta::items_size() const {
  return items_.size();
}
void Meta::clear_items() {
  items_.Clear();
}
const ::mvccpb::MetaItem& Meta::items(int index) const {
  // @@protoc_insertion_point(field_get:mvccpb.Meta.items)
  return items_.Get(index);
}
::mvccpb::MetaItem* Meta::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:mvccpb.Meta.items)
  return items_.Mutable(index);
}
::mvccpb::MetaItem* Meta::add_items() {
  // @@protoc_insertion_point(field_add:mvccpb.Meta.items)
  return items_.Add();
}
::google::protobuf::RepeatedPtrField< ::mvccpb::MetaItem >*
Meta::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:mvccpb.Meta.items)
  return &items_;
}
const ::google::protobuf::RepeatedPtrField< ::mvccpb::MetaItem >&
Meta::items() const {
  // @@protoc_insertion_point(field_list:mvccpb.Meta.items)
  return items_;
}

// optional uint64 next = 3;
bool Meta::has_next() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Meta::set_has_next() {
  _has_bits_[0] |= 0x00000004u;
}
void Meta::clear_has_next() {
  _has_bits_[0] &= ~0x00000004u;
}
void Meta::clear_next() {
  next_ = GOOGLE_ULONGLONG(0);
  clear_has_next();
}
::google::protobuf::uint64 Meta::next() const {
  // @@protoc_insertion_point(field_get:mvccpb.Meta.next)
  return next_;
}
void Meta::set_next(::google::protobuf::uint64 value) {
  set_has_next();
  next_ = value;
  // @@protoc_insertion_point(field_set:mvccpb.Meta.next)
}

inline const Meta* Meta::internal_default_instance() {
  return &Meta_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace mvccpb

// @@protoc_insertion_point(global_scope)
