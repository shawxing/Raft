// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: eraftpb.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "eraftpb.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace eraftpb {

namespace {

const ::google::protobuf::Descriptor* Entry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Entry_reflection_ = NULL;
const ::google::protobuf::Descriptor* SnapshotMetadata_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SnapshotMetadata_reflection_ = NULL;
const ::google::protobuf::Descriptor* Snapshot_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Snapshot_reflection_ = NULL;
const ::google::protobuf::Descriptor* Message_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Message_reflection_ = NULL;
const ::google::protobuf::Descriptor* HardState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HardState_reflection_ = NULL;
const ::google::protobuf::Descriptor* ConfState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConfState_reflection_ = NULL;
const ::google::protobuf::Descriptor* ConfChange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConfChange_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* EntryType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MessageType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ConfChangeType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_eraftpb_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_eraftpb_2eproto() {
  protobuf_AddDesc_eraftpb_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "eraftpb.proto");
  GOOGLE_CHECK(file != NULL);
  Entry_descriptor_ = file->message_type(0);
  static const int Entry_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Entry, entry_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Entry, term_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Entry, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Entry, data_),
  };
  Entry_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Entry_descriptor_,
      Entry::internal_default_instance(),
      Entry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Entry, _has_bits_),
      -1,
      -1,
      sizeof(Entry),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Entry, _internal_metadata_));
  SnapshotMetadata_descriptor_ = file->message_type(1);
  static const int SnapshotMetadata_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapshotMetadata, conf_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapshotMetadata, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapshotMetadata, term_),
  };
  SnapshotMetadata_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SnapshotMetadata_descriptor_,
      SnapshotMetadata::internal_default_instance(),
      SnapshotMetadata_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapshotMetadata, _has_bits_),
      -1,
      -1,
      sizeof(SnapshotMetadata),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapshotMetadata, _internal_metadata_));
  Snapshot_descriptor_ = file->message_type(2);
  static const int Snapshot_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Snapshot, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Snapshot, metadata_),
  };
  Snapshot_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Snapshot_descriptor_,
      Snapshot::internal_default_instance(),
      Snapshot_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Snapshot, _has_bits_),
      -1,
      -1,
      sizeof(Snapshot),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Snapshot, _internal_metadata_));
  Message_descriptor_ = file->message_type(3);
  static const int Message_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, msg_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, to_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, from_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, term_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, log_term_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, entries_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, commit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, snapshot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, reject_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, reject_hint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, context_),
  };
  Message_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Message_descriptor_,
      Message::internal_default_instance(),
      Message_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, _has_bits_),
      -1,
      -1,
      sizeof(Message),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, _internal_metadata_));
  HardState_descriptor_ = file->message_type(4);
  static const int HardState_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HardState, term_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HardState, vote_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HardState, commit_),
  };
  HardState_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      HardState_descriptor_,
      HardState::internal_default_instance(),
      HardState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HardState, _has_bits_),
      -1,
      -1,
      sizeof(HardState),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HardState, _internal_metadata_));
  ConfState_descriptor_ = file->message_type(5);
  static const int ConfState_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfState, nodes_),
  };
  ConfState_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ConfState_descriptor_,
      ConfState::internal_default_instance(),
      ConfState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfState, _has_bits_),
      -1,
      -1,
      sizeof(ConfState),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfState, _internal_metadata_));
  ConfChange_descriptor_ = file->message_type(6);
  static const int ConfChange_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfChange, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfChange, change_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfChange, node_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfChange, context_),
  };
  ConfChange_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ConfChange_descriptor_,
      ConfChange::internal_default_instance(),
      ConfChange_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfChange, _has_bits_),
      -1,
      -1,
      sizeof(ConfChange),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfChange, _internal_metadata_));
  EntryType_descriptor_ = file->enum_type(0);
  MessageType_descriptor_ = file->enum_type(1);
  ConfChangeType_descriptor_ = file->enum_type(2);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_eraftpb_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Entry_descriptor_, Entry::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SnapshotMetadata_descriptor_, SnapshotMetadata::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Snapshot_descriptor_, Snapshot::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Message_descriptor_, Message::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      HardState_descriptor_, HardState::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ConfState_descriptor_, ConfState::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ConfChange_descriptor_, ConfChange::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_eraftpb_2eproto() {
  Entry_default_instance_.Shutdown();
  delete Entry_reflection_;
  SnapshotMetadata_default_instance_.Shutdown();
  delete SnapshotMetadata_reflection_;
  Snapshot_default_instance_.Shutdown();
  delete Snapshot_reflection_;
  Message_default_instance_.Shutdown();
  delete Message_reflection_;
  HardState_default_instance_.Shutdown();
  delete HardState_reflection_;
  ConfState_default_instance_.Shutdown();
  delete ConfState_reflection_;
  ConfChange_default_instance_.Shutdown();
  delete ConfChange_reflection_;
}

void protobuf_InitDefaults_eraftpb_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::GetEmptyString();
  Entry_default_instance_.DefaultConstruct();
  SnapshotMetadata_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  Snapshot_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  Message_default_instance_.DefaultConstruct();
  HardState_default_instance_.DefaultConstruct();
  ConfState_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  ConfChange_default_instance_.DefaultConstruct();
  Entry_default_instance_.get_mutable()->InitAsDefaultInstance();
  SnapshotMetadata_default_instance_.get_mutable()->InitAsDefaultInstance();
  Snapshot_default_instance_.get_mutable()->InitAsDefaultInstance();
  Message_default_instance_.get_mutable()->InitAsDefaultInstance();
  HardState_default_instance_.get_mutable()->InitAsDefaultInstance();
  ConfState_default_instance_.get_mutable()->InitAsDefaultInstance();
  ConfChange_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_eraftpb_2eproto_once_);
void protobuf_InitDefaults_eraftpb_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_eraftpb_2eproto_once_,
                 &protobuf_InitDefaults_eraftpb_2eproto_impl);
}
void protobuf_AddDesc_eraftpb_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_eraftpb_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\reraftpb.proto\022\007eraftpb\"Z\n\005Entry\022&\n\nent"
    "ry_type\030\001 \001(\0162\022.eraftpb.EntryType\022\014\n\004ter"
    "m\030\002 \001(\004\022\r\n\005index\030\003 \001(\004\022\014\n\004data\030\004 \001(\014\"W\n\020"
    "SnapshotMetadata\022&\n\nconf_state\030\001 \001(\0132\022.e"
    "raftpb.ConfState\022\r\n\005index\030\002 \001(\004\022\014\n\004term\030"
    "\003 \001(\004\"E\n\010Snapshot\022\014\n\004data\030\001 \001(\014\022+\n\010metad"
    "ata\030\002 \001(\0132\031.eraftpb.SnapshotMetadata\"\206\002\n"
    "\007Message\022&\n\010msg_type\030\001 \001(\0162\024.eraftpb.Mes"
    "sageType\022\n\n\002to\030\002 \001(\004\022\014\n\004from\030\003 \001(\004\022\014\n\004te"
    "rm\030\004 \001(\004\022\020\n\010log_term\030\005 \001(\004\022\r\n\005index\030\006 \001("
    "\004\022\037\n\007entries\030\007 \003(\0132\016.eraftpb.Entry\022\016\n\006co"
    "mmit\030\010 \001(\004\022#\n\010snapshot\030\t \001(\0132\021.eraftpb.S"
    "napshot\022\016\n\006reject\030\n \001(\010\022\023\n\013reject_hint\030\013"
    " \001(\004\022\017\n\007context\030\014 \001(\014\"7\n\tHardState\022\014\n\004te"
    "rm\030\001 \001(\004\022\014\n\004vote\030\002 \001(\004\022\016\n\006commit\030\003 \001(\004\"\032"
    "\n\tConfState\022\r\n\005nodes\030\001 \003(\004\"h\n\nConfChange"
    "\022\n\n\002id\030\001 \001(\004\022,\n\013change_type\030\002 \001(\0162\027.eraf"
    "tpb.ConfChangeType\022\017\n\007node_id\030\003 \001(\004\022\017\n\007c"
    "ontext\030\004 \001(\014*1\n\tEntryType\022\017\n\013EntryNormal"
    "\020\000\022\023\n\017EntryConfChange\020\001*\214\003\n\013MessageType\022"
    "\n\n\006MsgHup\020\000\022\013\n\007MsgBeat\020\001\022\016\n\nMsgPropose\020\002"
    "\022\r\n\tMsgAppend\020\003\022\025\n\021MsgAppendResponse\020\004\022\022"
    "\n\016MsgRequestVote\020\005\022\032\n\026MsgRequestVoteResp"
    "onse\020\006\022\017\n\013MsgSnapshot\020\007\022\020\n\014MsgHeartbeat\020"
    "\010\022\030\n\024MsgHeartbeatResponse\020\t\022\022\n\016MsgUnreac"
    "hable\020\n\022\021\n\rMsgSnapStatus\020\013\022\022\n\016MsgCheckQu"
    "orum\020\014\022\025\n\021MsgTransferLeader\020\r\022\021\n\rMsgTime"
    "outNow\020\016\022\020\n\014MsgReadIndex\020\017\022\024\n\020MsgReadInd"
    "exResp\020\020\022\025\n\021MsgRequestPreVote\020\021\022\035\n\031MsgRe"
    "questPreVoteResponse\020\022*-\n\016ConfChangeType"
    "\022\013\n\007AddNode\020\000\022\016\n\nRemoveNode\020\001", 1229);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "eraftpb.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_eraftpb_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_eraftpb_2eproto_once_);
void protobuf_AddDesc_eraftpb_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_eraftpb_2eproto_once_,
                 &protobuf_AddDesc_eraftpb_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_eraftpb_2eproto {
  StaticDescriptorInitializer_eraftpb_2eproto() {
    protobuf_AddDesc_eraftpb_2eproto();
  }
} static_descriptor_initializer_eraftpb_2eproto_;
const ::google::protobuf::EnumDescriptor* EntryType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EntryType_descriptor_;
}
bool EntryType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MessageType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessageType_descriptor_;
}
bool MessageType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ConfChangeType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConfChangeType_descriptor_;
}
bool ConfChangeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Entry::kEntryTypeFieldNumber;
const int Entry::kTermFieldNumber;
const int Entry::kIndexFieldNumber;
const int Entry::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Entry::Entry()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_eraftpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:eraftpb.Entry)
}

void Entry::InitAsDefaultInstance() {
}

Entry::Entry(const Entry& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:eraftpb.Entry)
}

void Entry::SharedCtor() {
  _cached_size_ = 0;
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&term_, 0, reinterpret_cast<char*>(&entry_type_) -
    reinterpret_cast<char*>(&term_) + sizeof(entry_type_));
}

Entry::~Entry() {
  // @@protoc_insertion_point(destructor:eraftpb.Entry)
  SharedDtor();
}

void Entry::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Entry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Entry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Entry_descriptor_;
}

const Entry& Entry::default_instance() {
  protobuf_InitDefaults_eraftpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Entry> Entry_default_instance_;

Entry* Entry::New(::google::protobuf::Arena* arena) const {
  Entry* n = new Entry;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Entry::Clear() {
// @@protoc_insertion_point(message_clear_start:eraftpb.Entry)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Entry, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Entry*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 15u) {
    ZR_(term_, entry_type_);
    if (has_data()) {
      data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Entry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:eraftpb.Entry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .eraftpb.EntryType entry_type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::eraftpb::EntryType_IsValid(value)) {
            set_entry_type(static_cast< ::eraftpb::EntryType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_term;
        break;
      }

      // optional uint64 term = 2;
      case 2: {
        if (tag == 16) {
         parse_term:
          set_has_term();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &term_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_index;
        break;
      }

      // optional uint64 index = 3;
      case 3: {
        if (tag == 24) {
         parse_index:
          set_has_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &index_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_data;
        break;
      }

      // optional bytes data = 4;
      case 4: {
        if (tag == 34) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:eraftpb.Entry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:eraftpb.Entry)
  return false;
#undef DO_
}

void Entry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:eraftpb.Entry)
  // optional .eraftpb.EntryType entry_type = 1;
  if (has_entry_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->entry_type(), output);
  }

  // optional uint64 term = 2;
  if (has_term()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->term(), output);
  }

  // optional uint64 index = 3;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->index(), output);
  }

  // optional bytes data = 4;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:eraftpb.Entry)
}

::google::protobuf::uint8* Entry::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:eraftpb.Entry)
  // optional .eraftpb.EntryType entry_type = 1;
  if (has_entry_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->entry_type(), target);
  }

  // optional uint64 term = 2;
  if (has_term()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->term(), target);
  }

  // optional uint64 index = 3;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->index(), target);
  }

  // optional bytes data = 4;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:eraftpb.Entry)
  return target;
}

size_t Entry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:eraftpb.Entry)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 15u) {
    // optional .eraftpb.EntryType entry_type = 1;
    if (has_entry_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->entry_type());
    }

    // optional uint64 term = 2;
    if (has_term()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->term());
    }

    // optional uint64 index = 3;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->index());
    }

    // optional bytes data = 4;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Entry::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:eraftpb.Entry)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Entry* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Entry>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:eraftpb.Entry)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:eraftpb.Entry)
    UnsafeMergeFrom(*source);
  }
}

void Entry::MergeFrom(const Entry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:eraftpb.Entry)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Entry::UnsafeMergeFrom(const Entry& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_entry_type()) {
      set_entry_type(from.entry_type());
    }
    if (from.has_term()) {
      set_term(from.term());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_data()) {
      set_has_data();
      data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void Entry::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:eraftpb.Entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Entry::CopyFrom(const Entry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:eraftpb.Entry)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Entry::IsInitialized() const {

  return true;
}

void Entry::Swap(Entry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Entry::InternalSwap(Entry* other) {
  std::swap(entry_type_, other->entry_type_);
  std::swap(term_, other->term_);
  std::swap(index_, other->index_);
  data_.Swap(&other->data_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Entry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Entry_descriptor_;
  metadata.reflection = Entry_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Entry

// optional .eraftpb.EntryType entry_type = 1;
bool Entry::has_entry_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Entry::set_has_entry_type() {
  _has_bits_[0] |= 0x00000001u;
}
void Entry::clear_has_entry_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void Entry::clear_entry_type() {
  entry_type_ = 0;
  clear_has_entry_type();
}
::eraftpb::EntryType Entry::entry_type() const {
  // @@protoc_insertion_point(field_get:eraftpb.Entry.entry_type)
  return static_cast< ::eraftpb::EntryType >(entry_type_);
}
void Entry::set_entry_type(::eraftpb::EntryType value) {
  assert(::eraftpb::EntryType_IsValid(value));
  set_has_entry_type();
  entry_type_ = value;
  // @@protoc_insertion_point(field_set:eraftpb.Entry.entry_type)
}

// optional uint64 term = 2;
bool Entry::has_term() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Entry::set_has_term() {
  _has_bits_[0] |= 0x00000002u;
}
void Entry::clear_has_term() {
  _has_bits_[0] &= ~0x00000002u;
}
void Entry::clear_term() {
  term_ = GOOGLE_ULONGLONG(0);
  clear_has_term();
}
::google::protobuf::uint64 Entry::term() const {
  // @@protoc_insertion_point(field_get:eraftpb.Entry.term)
  return term_;
}
void Entry::set_term(::google::protobuf::uint64 value) {
  set_has_term();
  term_ = value;
  // @@protoc_insertion_point(field_set:eraftpb.Entry.term)
}

// optional uint64 index = 3;
bool Entry::has_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Entry::set_has_index() {
  _has_bits_[0] |= 0x00000004u;
}
void Entry::clear_has_index() {
  _has_bits_[0] &= ~0x00000004u;
}
void Entry::clear_index() {
  index_ = GOOGLE_ULONGLONG(0);
  clear_has_index();
}
::google::protobuf::uint64 Entry::index() const {
  // @@protoc_insertion_point(field_get:eraftpb.Entry.index)
  return index_;
}
void Entry::set_index(::google::protobuf::uint64 value) {
  set_has_index();
  index_ = value;
  // @@protoc_insertion_point(field_set:eraftpb.Entry.index)
}

// optional bytes data = 4;
bool Entry::has_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Entry::set_has_data() {
  _has_bits_[0] |= 0x00000008u;
}
void Entry::clear_has_data() {
  _has_bits_[0] &= ~0x00000008u;
}
void Entry::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
const ::std::string& Entry::data() const {
  // @@protoc_insertion_point(field_get:eraftpb.Entry.data)
  return data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Entry::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:eraftpb.Entry.data)
}
void Entry::set_data(const char* value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eraftpb.Entry.data)
}
void Entry::set_data(const void* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eraftpb.Entry.data)
}
::std::string* Entry::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:eraftpb.Entry.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Entry::release_data() {
  // @@protoc_insertion_point(field_release:eraftpb.Entry.data)
  clear_has_data();
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Entry::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:eraftpb.Entry.data)
}

inline const Entry* Entry::internal_default_instance() {
  return &Entry_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SnapshotMetadata::kConfStateFieldNumber;
const int SnapshotMetadata::kIndexFieldNumber;
const int SnapshotMetadata::kTermFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SnapshotMetadata::SnapshotMetadata()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_eraftpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:eraftpb.SnapshotMetadata)
}

void SnapshotMetadata::InitAsDefaultInstance() {
  conf_state_ = const_cast< ::eraftpb::ConfState*>(
      ::eraftpb::ConfState::internal_default_instance());
}

SnapshotMetadata::SnapshotMetadata(const SnapshotMetadata& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:eraftpb.SnapshotMetadata)
}

void SnapshotMetadata::SharedCtor() {
  _cached_size_ = 0;
  conf_state_ = NULL;
  ::memset(&index_, 0, reinterpret_cast<char*>(&term_) -
    reinterpret_cast<char*>(&index_) + sizeof(term_));
}

SnapshotMetadata::~SnapshotMetadata() {
  // @@protoc_insertion_point(destructor:eraftpb.SnapshotMetadata)
  SharedDtor();
}

void SnapshotMetadata::SharedDtor() {
  if (this != &SnapshotMetadata_default_instance_.get()) {
    delete conf_state_;
  }
}

void SnapshotMetadata::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SnapshotMetadata::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SnapshotMetadata_descriptor_;
}

const SnapshotMetadata& SnapshotMetadata::default_instance() {
  protobuf_InitDefaults_eraftpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<SnapshotMetadata> SnapshotMetadata_default_instance_;

SnapshotMetadata* SnapshotMetadata::New(::google::protobuf::Arena* arena) const {
  SnapshotMetadata* n = new SnapshotMetadata;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SnapshotMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:eraftpb.SnapshotMetadata)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(SnapshotMetadata, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SnapshotMetadata*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 7u) {
    ZR_(index_, term_);
    if (has_conf_state()) {
      if (conf_state_ != NULL) conf_state_->::eraftpb::ConfState::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SnapshotMetadata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:eraftpb.SnapshotMetadata)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .eraftpb.ConfState conf_state = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_conf_state()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_index;
        break;
      }

      // optional uint64 index = 2;
      case 2: {
        if (tag == 16) {
         parse_index:
          set_has_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &index_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_term;
        break;
      }

      // optional uint64 term = 3;
      case 3: {
        if (tag == 24) {
         parse_term:
          set_has_term();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &term_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:eraftpb.SnapshotMetadata)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:eraftpb.SnapshotMetadata)
  return false;
#undef DO_
}

void SnapshotMetadata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:eraftpb.SnapshotMetadata)
  // optional .eraftpb.ConfState conf_state = 1;
  if (has_conf_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->conf_state_, output);
  }

  // optional uint64 index = 2;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->index(), output);
  }

  // optional uint64 term = 3;
  if (has_term()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->term(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:eraftpb.SnapshotMetadata)
}

::google::protobuf::uint8* SnapshotMetadata::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:eraftpb.SnapshotMetadata)
  // optional .eraftpb.ConfState conf_state = 1;
  if (has_conf_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->conf_state_, false, target);
  }

  // optional uint64 index = 2;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->index(), target);
  }

  // optional uint64 term = 3;
  if (has_term()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->term(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:eraftpb.SnapshotMetadata)
  return target;
}

size_t SnapshotMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:eraftpb.SnapshotMetadata)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional .eraftpb.ConfState conf_state = 1;
    if (has_conf_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->conf_state_);
    }

    // optional uint64 index = 2;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->index());
    }

    // optional uint64 term = 3;
    if (has_term()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->term());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SnapshotMetadata::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:eraftpb.SnapshotMetadata)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SnapshotMetadata* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SnapshotMetadata>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:eraftpb.SnapshotMetadata)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:eraftpb.SnapshotMetadata)
    UnsafeMergeFrom(*source);
  }
}

void SnapshotMetadata::MergeFrom(const SnapshotMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:eraftpb.SnapshotMetadata)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void SnapshotMetadata::UnsafeMergeFrom(const SnapshotMetadata& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_conf_state()) {
      mutable_conf_state()->::eraftpb::ConfState::MergeFrom(from.conf_state());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_term()) {
      set_term(from.term());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void SnapshotMetadata::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:eraftpb.SnapshotMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SnapshotMetadata::CopyFrom(const SnapshotMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:eraftpb.SnapshotMetadata)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool SnapshotMetadata::IsInitialized() const {

  return true;
}

void SnapshotMetadata::Swap(SnapshotMetadata* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SnapshotMetadata::InternalSwap(SnapshotMetadata* other) {
  std::swap(conf_state_, other->conf_state_);
  std::swap(index_, other->index_);
  std::swap(term_, other->term_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SnapshotMetadata::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SnapshotMetadata_descriptor_;
  metadata.reflection = SnapshotMetadata_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SnapshotMetadata

// optional .eraftpb.ConfState conf_state = 1;
bool SnapshotMetadata::has_conf_state() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SnapshotMetadata::set_has_conf_state() {
  _has_bits_[0] |= 0x00000001u;
}
void SnapshotMetadata::clear_has_conf_state() {
  _has_bits_[0] &= ~0x00000001u;
}
void SnapshotMetadata::clear_conf_state() {
  if (conf_state_ != NULL) conf_state_->::eraftpb::ConfState::Clear();
  clear_has_conf_state();
}
const ::eraftpb::ConfState& SnapshotMetadata::conf_state() const {
  // @@protoc_insertion_point(field_get:eraftpb.SnapshotMetadata.conf_state)
  return conf_state_ != NULL ? *conf_state_
                         : *::eraftpb::ConfState::internal_default_instance();
}
::eraftpb::ConfState* SnapshotMetadata::mutable_conf_state() {
  set_has_conf_state();
  if (conf_state_ == NULL) {
    conf_state_ = new ::eraftpb::ConfState;
  }
  // @@protoc_insertion_point(field_mutable:eraftpb.SnapshotMetadata.conf_state)
  return conf_state_;
}
::eraftpb::ConfState* SnapshotMetadata::release_conf_state() {
  // @@protoc_insertion_point(field_release:eraftpb.SnapshotMetadata.conf_state)
  clear_has_conf_state();
  ::eraftpb::ConfState* temp = conf_state_;
  conf_state_ = NULL;
  return temp;
}
void SnapshotMetadata::set_allocated_conf_state(::eraftpb::ConfState* conf_state) {
  delete conf_state_;
  conf_state_ = conf_state;
  if (conf_state) {
    set_has_conf_state();
  } else {
    clear_has_conf_state();
  }
  // @@protoc_insertion_point(field_set_allocated:eraftpb.SnapshotMetadata.conf_state)
}

// optional uint64 index = 2;
bool SnapshotMetadata::has_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SnapshotMetadata::set_has_index() {
  _has_bits_[0] |= 0x00000002u;
}
void SnapshotMetadata::clear_has_index() {
  _has_bits_[0] &= ~0x00000002u;
}
void SnapshotMetadata::clear_index() {
  index_ = GOOGLE_ULONGLONG(0);
  clear_has_index();
}
::google::protobuf::uint64 SnapshotMetadata::index() const {
  // @@protoc_insertion_point(field_get:eraftpb.SnapshotMetadata.index)
  return index_;
}
void SnapshotMetadata::set_index(::google::protobuf::uint64 value) {
  set_has_index();
  index_ = value;
  // @@protoc_insertion_point(field_set:eraftpb.SnapshotMetadata.index)
}

// optional uint64 term = 3;
bool SnapshotMetadata::has_term() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SnapshotMetadata::set_has_term() {
  _has_bits_[0] |= 0x00000004u;
}
void SnapshotMetadata::clear_has_term() {
  _has_bits_[0] &= ~0x00000004u;
}
void SnapshotMetadata::clear_term() {
  term_ = GOOGLE_ULONGLONG(0);
  clear_has_term();
}
::google::protobuf::uint64 SnapshotMetadata::term() const {
  // @@protoc_insertion_point(field_get:eraftpb.SnapshotMetadata.term)
  return term_;
}
void SnapshotMetadata::set_term(::google::protobuf::uint64 value) {
  set_has_term();
  term_ = value;
  // @@protoc_insertion_point(field_set:eraftpb.SnapshotMetadata.term)
}

inline const SnapshotMetadata* SnapshotMetadata::internal_default_instance() {
  return &SnapshotMetadata_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Snapshot::kDataFieldNumber;
const int Snapshot::kMetadataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Snapshot::Snapshot()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_eraftpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:eraftpb.Snapshot)
}

void Snapshot::InitAsDefaultInstance() {
  metadata_ = const_cast< ::eraftpb::SnapshotMetadata*>(
      ::eraftpb::SnapshotMetadata::internal_default_instance());
}

Snapshot::Snapshot(const Snapshot& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:eraftpb.Snapshot)
}

void Snapshot::SharedCtor() {
  _cached_size_ = 0;
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  metadata_ = NULL;
}

Snapshot::~Snapshot() {
  // @@protoc_insertion_point(destructor:eraftpb.Snapshot)
  SharedDtor();
}

void Snapshot::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != &Snapshot_default_instance_.get()) {
    delete metadata_;
  }
}

void Snapshot::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Snapshot::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Snapshot_descriptor_;
}

const Snapshot& Snapshot::default_instance() {
  protobuf_InitDefaults_eraftpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Snapshot> Snapshot_default_instance_;

Snapshot* Snapshot::New(::google::protobuf::Arena* arena) const {
  Snapshot* n = new Snapshot;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Snapshot::Clear() {
// @@protoc_insertion_point(message_clear_start:eraftpb.Snapshot)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_data()) {
      data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_metadata()) {
      if (metadata_ != NULL) metadata_->::eraftpb::SnapshotMetadata::Clear();
    }
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Snapshot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:eraftpb.Snapshot)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes data = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_metadata;
        break;
      }

      // optional .eraftpb.SnapshotMetadata metadata = 2;
      case 2: {
        if (tag == 18) {
         parse_metadata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_metadata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:eraftpb.Snapshot)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:eraftpb.Snapshot)
  return false;
#undef DO_
}

void Snapshot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:eraftpb.Snapshot)
  // optional bytes data = 1;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->data(), output);
  }

  // optional .eraftpb.SnapshotMetadata metadata = 2;
  if (has_metadata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->metadata_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:eraftpb.Snapshot)
}

::google::protobuf::uint8* Snapshot::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:eraftpb.Snapshot)
  // optional bytes data = 1;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->data(), target);
  }

  // optional .eraftpb.SnapshotMetadata metadata = 2;
  if (has_metadata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->metadata_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:eraftpb.Snapshot)
  return target;
}

size_t Snapshot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:eraftpb.Snapshot)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional bytes data = 1;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

    // optional .eraftpb.SnapshotMetadata metadata = 2;
    if (has_metadata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->metadata_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Snapshot::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:eraftpb.Snapshot)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Snapshot* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Snapshot>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:eraftpb.Snapshot)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:eraftpb.Snapshot)
    UnsafeMergeFrom(*source);
  }
}

void Snapshot::MergeFrom(const Snapshot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:eraftpb.Snapshot)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Snapshot::UnsafeMergeFrom(const Snapshot& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data()) {
      set_has_data();
      data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
    if (from.has_metadata()) {
      mutable_metadata()->::eraftpb::SnapshotMetadata::MergeFrom(from.metadata());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void Snapshot::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:eraftpb.Snapshot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Snapshot::CopyFrom(const Snapshot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:eraftpb.Snapshot)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Snapshot::IsInitialized() const {

  return true;
}

void Snapshot::Swap(Snapshot* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Snapshot::InternalSwap(Snapshot* other) {
  data_.Swap(&other->data_);
  std::swap(metadata_, other->metadata_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Snapshot::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Snapshot_descriptor_;
  metadata.reflection = Snapshot_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Snapshot

// optional bytes data = 1;
bool Snapshot::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Snapshot::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
void Snapshot::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
void Snapshot::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
const ::std::string& Snapshot::data() const {
  // @@protoc_insertion_point(field_get:eraftpb.Snapshot.data)
  return data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Snapshot::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:eraftpb.Snapshot.data)
}
void Snapshot::set_data(const char* value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eraftpb.Snapshot.data)
}
void Snapshot::set_data(const void* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eraftpb.Snapshot.data)
}
::std::string* Snapshot::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:eraftpb.Snapshot.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Snapshot::release_data() {
  // @@protoc_insertion_point(field_release:eraftpb.Snapshot.data)
  clear_has_data();
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Snapshot::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:eraftpb.Snapshot.data)
}

// optional .eraftpb.SnapshotMetadata metadata = 2;
bool Snapshot::has_metadata() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Snapshot::set_has_metadata() {
  _has_bits_[0] |= 0x00000002u;
}
void Snapshot::clear_has_metadata() {
  _has_bits_[0] &= ~0x00000002u;
}
void Snapshot::clear_metadata() {
  if (metadata_ != NULL) metadata_->::eraftpb::SnapshotMetadata::Clear();
  clear_has_metadata();
}
const ::eraftpb::SnapshotMetadata& Snapshot::metadata() const {
  // @@protoc_insertion_point(field_get:eraftpb.Snapshot.metadata)
  return metadata_ != NULL ? *metadata_
                         : *::eraftpb::SnapshotMetadata::internal_default_instance();
}
::eraftpb::SnapshotMetadata* Snapshot::mutable_metadata() {
  set_has_metadata();
  if (metadata_ == NULL) {
    metadata_ = new ::eraftpb::SnapshotMetadata;
  }
  // @@protoc_insertion_point(field_mutable:eraftpb.Snapshot.metadata)
  return metadata_;
}
::eraftpb::SnapshotMetadata* Snapshot::release_metadata() {
  // @@protoc_insertion_point(field_release:eraftpb.Snapshot.metadata)
  clear_has_metadata();
  ::eraftpb::SnapshotMetadata* temp = metadata_;
  metadata_ = NULL;
  return temp;
}
void Snapshot::set_allocated_metadata(::eraftpb::SnapshotMetadata* metadata) {
  delete metadata_;
  metadata_ = metadata;
  if (metadata) {
    set_has_metadata();
  } else {
    clear_has_metadata();
  }
  // @@protoc_insertion_point(field_set_allocated:eraftpb.Snapshot.metadata)
}

inline const Snapshot* Snapshot::internal_default_instance() {
  return &Snapshot_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Message::kMsgTypeFieldNumber;
const int Message::kToFieldNumber;
const int Message::kFromFieldNumber;
const int Message::kTermFieldNumber;
const int Message::kLogTermFieldNumber;
const int Message::kIndexFieldNumber;
const int Message::kEntriesFieldNumber;
const int Message::kCommitFieldNumber;
const int Message::kSnapshotFieldNumber;
const int Message::kRejectFieldNumber;
const int Message::kRejectHintFieldNumber;
const int Message::kContextFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Message::Message()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_eraftpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:eraftpb.Message)
}

void Message::InitAsDefaultInstance() {
  snapshot_ = const_cast< ::eraftpb::Snapshot*>(
      ::eraftpb::Snapshot::internal_default_instance());
}

Message::Message(const Message& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:eraftpb.Message)
}

void Message::SharedCtor() {
  _cached_size_ = 0;
  context_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  snapshot_ = NULL;
  ::memset(&to_, 0, reinterpret_cast<char*>(&reject_hint_) -
    reinterpret_cast<char*>(&to_) + sizeof(reject_hint_));
}

Message::~Message() {
  // @@protoc_insertion_point(destructor:eraftpb.Message)
  SharedDtor();
}

void Message::SharedDtor() {
  context_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != &Message_default_instance_.get()) {
    delete snapshot_;
  }
}

void Message::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Message::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Message_descriptor_;
}

const Message& Message::default_instance() {
  protobuf_InitDefaults_eraftpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Message> Message_default_instance_;

Message* Message::New(::google::protobuf::Arena* arena) const {
  Message* n = new Message;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Message::Clear() {
// @@protoc_insertion_point(message_clear_start:eraftpb.Message)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Message, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Message*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(to_, msg_type_);
  ZR_(index_, commit_);
  if (_has_bits_[8 / 32] & 3840u) {
    if (has_snapshot()) {
      if (snapshot_ != NULL) snapshot_->::eraftpb::Snapshot::Clear();
    }
    reject_ = false;
    reject_hint_ = GOOGLE_ULONGLONG(0);
    if (has_context()) {
      context_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  entries_.Clear();
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Message::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:eraftpb.Message)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .eraftpb.MessageType msg_type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::eraftpb::MessageType_IsValid(value)) {
            set_msg_type(static_cast< ::eraftpb::MessageType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_to;
        break;
      }

      // optional uint64 to = 2;
      case 2: {
        if (tag == 16) {
         parse_to:
          set_has_to();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &to_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_from;
        break;
      }

      // optional uint64 from = 3;
      case 3: {
        if (tag == 24) {
         parse_from:
          set_has_from();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &from_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_term;
        break;
      }

      // optional uint64 term = 4;
      case 4: {
        if (tag == 32) {
         parse_term:
          set_has_term();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &term_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_log_term;
        break;
      }

      // optional uint64 log_term = 5;
      case 5: {
        if (tag == 40) {
         parse_log_term:
          set_has_log_term();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &log_term_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_index;
        break;
      }

      // optional uint64 index = 6;
      case 6: {
        if (tag == 48) {
         parse_index:
          set_has_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &index_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_entries;
        break;
      }

      // repeated .eraftpb.Entry entries = 7;
      case 7: {
        if (tag == 58) {
         parse_entries:
          DO_(input->IncrementRecursionDepth());
         parse_loop_entries:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_entries()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_loop_entries;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(64)) goto parse_commit;
        break;
      }

      // optional uint64 commit = 8;
      case 8: {
        if (tag == 64) {
         parse_commit:
          set_has_commit();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &commit_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_snapshot;
        break;
      }

      // optional .eraftpb.Snapshot snapshot = 9;
      case 9: {
        if (tag == 74) {
         parse_snapshot:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_snapshot()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_reject;
        break;
      }

      // optional bool reject = 10;
      case 10: {
        if (tag == 80) {
         parse_reject:
          set_has_reject();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &reject_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_reject_hint;
        break;
      }

      // optional uint64 reject_hint = 11;
      case 11: {
        if (tag == 88) {
         parse_reject_hint:
          set_has_reject_hint();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &reject_hint_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_context;
        break;
      }

      // optional bytes context = 12;
      case 12: {
        if (tag == 98) {
         parse_context:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_context()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:eraftpb.Message)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:eraftpb.Message)
  return false;
#undef DO_
}

void Message::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:eraftpb.Message)
  // optional .eraftpb.MessageType msg_type = 1;
  if (has_msg_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msg_type(), output);
  }

  // optional uint64 to = 2;
  if (has_to()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->to(), output);
  }

  // optional uint64 from = 3;
  if (has_from()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->from(), output);
  }

  // optional uint64 term = 4;
  if (has_term()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->term(), output);
  }

  // optional uint64 log_term = 5;
  if (has_log_term()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->log_term(), output);
  }

  // optional uint64 index = 6;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->index(), output);
  }

  // repeated .eraftpb.Entry entries = 7;
  for (unsigned int i = 0, n = this->entries_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->entries(i), output);
  }

  // optional uint64 commit = 8;
  if (has_commit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->commit(), output);
  }

  // optional .eraftpb.Snapshot snapshot = 9;
  if (has_snapshot()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->snapshot_, output);
  }

  // optional bool reject = 10;
  if (has_reject()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->reject(), output);
  }

  // optional uint64 reject_hint = 11;
  if (has_reject_hint()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->reject_hint(), output);
  }

  // optional bytes context = 12;
  if (has_context()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      12, this->context(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:eraftpb.Message)
}

::google::protobuf::uint8* Message::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:eraftpb.Message)
  // optional .eraftpb.MessageType msg_type = 1;
  if (has_msg_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msg_type(), target);
  }

  // optional uint64 to = 2;
  if (has_to()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->to(), target);
  }

  // optional uint64 from = 3;
  if (has_from()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->from(), target);
  }

  // optional uint64 term = 4;
  if (has_term()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->term(), target);
  }

  // optional uint64 log_term = 5;
  if (has_log_term()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->log_term(), target);
  }

  // optional uint64 index = 6;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->index(), target);
  }

  // repeated .eraftpb.Entry entries = 7;
  for (unsigned int i = 0, n = this->entries_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, this->entries(i), false, target);
  }

  // optional uint64 commit = 8;
  if (has_commit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->commit(), target);
  }

  // optional .eraftpb.Snapshot snapshot = 9;
  if (has_snapshot()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->snapshot_, false, target);
  }

  // optional bool reject = 10;
  if (has_reject()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->reject(), target);
  }

  // optional uint64 reject_hint = 11;
  if (has_reject_hint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->reject_hint(), target);
  }

  // optional bytes context = 12;
  if (has_context()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        12, this->context(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:eraftpb.Message)
  return target;
}

size_t Message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:eraftpb.Message)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 191u) {
    // optional .eraftpb.MessageType msg_type = 1;
    if (has_msg_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msg_type());
    }

    // optional uint64 to = 2;
    if (has_to()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->to());
    }

    // optional uint64 from = 3;
    if (has_from()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->from());
    }

    // optional uint64 term = 4;
    if (has_term()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->term());
    }

    // optional uint64 log_term = 5;
    if (has_log_term()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->log_term());
    }

    // optional uint64 index = 6;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->index());
    }

    // optional uint64 commit = 8;
    if (has_commit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->commit());
    }

  }
  if (_has_bits_[8 / 32] & 3840u) {
    // optional .eraftpb.Snapshot snapshot = 9;
    if (has_snapshot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->snapshot_);
    }

    // optional bool reject = 10;
    if (has_reject()) {
      total_size += 1 + 1;
    }

    // optional uint64 reject_hint = 11;
    if (has_reject_hint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->reject_hint());
    }

    // optional bytes context = 12;
    if (has_context()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->context());
    }

  }
  // repeated .eraftpb.Entry entries = 7;
  {
    unsigned int count = this->entries_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->entries(i));
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Message::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:eraftpb.Message)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Message* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Message>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:eraftpb.Message)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:eraftpb.Message)
    UnsafeMergeFrom(*source);
  }
}

void Message::MergeFrom(const Message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:eraftpb.Message)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Message::UnsafeMergeFrom(const Message& from) {
  GOOGLE_DCHECK(&from != this);
  entries_.MergeFrom(from.entries_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msg_type()) {
      set_msg_type(from.msg_type());
    }
    if (from.has_to()) {
      set_to(from.to());
    }
    if (from.has_from()) {
      set_from(from.from());
    }
    if (from.has_term()) {
      set_term(from.term());
    }
    if (from.has_log_term()) {
      set_log_term(from.log_term());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_commit()) {
      set_commit(from.commit());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_snapshot()) {
      mutable_snapshot()->::eraftpb::Snapshot::MergeFrom(from.snapshot());
    }
    if (from.has_reject()) {
      set_reject(from.reject());
    }
    if (from.has_reject_hint()) {
      set_reject_hint(from.reject_hint());
    }
    if (from.has_context()) {
      set_has_context();
      context_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.context_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void Message::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:eraftpb.Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Message::CopyFrom(const Message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:eraftpb.Message)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Message::IsInitialized() const {

  return true;
}

void Message::Swap(Message* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Message::InternalSwap(Message* other) {
  std::swap(msg_type_, other->msg_type_);
  std::swap(to_, other->to_);
  std::swap(from_, other->from_);
  std::swap(term_, other->term_);
  std::swap(log_term_, other->log_term_);
  std::swap(index_, other->index_);
  entries_.UnsafeArenaSwap(&other->entries_);
  std::swap(commit_, other->commit_);
  std::swap(snapshot_, other->snapshot_);
  std::swap(reject_, other->reject_);
  std::swap(reject_hint_, other->reject_hint_);
  context_.Swap(&other->context_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Message::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Message_descriptor_;
  metadata.reflection = Message_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Message

// optional .eraftpb.MessageType msg_type = 1;
bool Message::has_msg_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Message::set_has_msg_type() {
  _has_bits_[0] |= 0x00000001u;
}
void Message::clear_has_msg_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void Message::clear_msg_type() {
  msg_type_ = 0;
  clear_has_msg_type();
}
::eraftpb::MessageType Message::msg_type() const {
  // @@protoc_insertion_point(field_get:eraftpb.Message.msg_type)
  return static_cast< ::eraftpb::MessageType >(msg_type_);
}
void Message::set_msg_type(::eraftpb::MessageType value) {
  assert(::eraftpb::MessageType_IsValid(value));
  set_has_msg_type();
  msg_type_ = value;
  // @@protoc_insertion_point(field_set:eraftpb.Message.msg_type)
}

// optional uint64 to = 2;
bool Message::has_to() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Message::set_has_to() {
  _has_bits_[0] |= 0x00000002u;
}
void Message::clear_has_to() {
  _has_bits_[0] &= ~0x00000002u;
}
void Message::clear_to() {
  to_ = GOOGLE_ULONGLONG(0);
  clear_has_to();
}
::google::protobuf::uint64 Message::to() const {
  // @@protoc_insertion_point(field_get:eraftpb.Message.to)
  return to_;
}
void Message::set_to(::google::protobuf::uint64 value) {
  set_has_to();
  to_ = value;
  // @@protoc_insertion_point(field_set:eraftpb.Message.to)
}

// optional uint64 from = 3;
bool Message::has_from() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Message::set_has_from() {
  _has_bits_[0] |= 0x00000004u;
}
void Message::clear_has_from() {
  _has_bits_[0] &= ~0x00000004u;
}
void Message::clear_from() {
  from_ = GOOGLE_ULONGLONG(0);
  clear_has_from();
}
::google::protobuf::uint64 Message::from() const {
  // @@protoc_insertion_point(field_get:eraftpb.Message.from)
  return from_;
}
void Message::set_from(::google::protobuf::uint64 value) {
  set_has_from();
  from_ = value;
  // @@protoc_insertion_point(field_set:eraftpb.Message.from)
}

// optional uint64 term = 4;
bool Message::has_term() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Message::set_has_term() {
  _has_bits_[0] |= 0x00000008u;
}
void Message::clear_has_term() {
  _has_bits_[0] &= ~0x00000008u;
}
void Message::clear_term() {
  term_ = GOOGLE_ULONGLONG(0);
  clear_has_term();
}
::google::protobuf::uint64 Message::term() const {
  // @@protoc_insertion_point(field_get:eraftpb.Message.term)
  return term_;
}
void Message::set_term(::google::protobuf::uint64 value) {
  set_has_term();
  term_ = value;
  // @@protoc_insertion_point(field_set:eraftpb.Message.term)
}

// optional uint64 log_term = 5;
bool Message::has_log_term() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Message::set_has_log_term() {
  _has_bits_[0] |= 0x00000010u;
}
void Message::clear_has_log_term() {
  _has_bits_[0] &= ~0x00000010u;
}
void Message::clear_log_term() {
  log_term_ = GOOGLE_ULONGLONG(0);
  clear_has_log_term();
}
::google::protobuf::uint64 Message::log_term() const {
  // @@protoc_insertion_point(field_get:eraftpb.Message.log_term)
  return log_term_;
}
void Message::set_log_term(::google::protobuf::uint64 value) {
  set_has_log_term();
  log_term_ = value;
  // @@protoc_insertion_point(field_set:eraftpb.Message.log_term)
}

// optional uint64 index = 6;
bool Message::has_index() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Message::set_has_index() {
  _has_bits_[0] |= 0x00000020u;
}
void Message::clear_has_index() {
  _has_bits_[0] &= ~0x00000020u;
}
void Message::clear_index() {
  index_ = GOOGLE_ULONGLONG(0);
  clear_has_index();
}
::google::protobuf::uint64 Message::index() const {
  // @@protoc_insertion_point(field_get:eraftpb.Message.index)
  return index_;
}
void Message::set_index(::google::protobuf::uint64 value) {
  set_has_index();
  index_ = value;
  // @@protoc_insertion_point(field_set:eraftpb.Message.index)
}

// repeated .eraftpb.Entry entries = 7;
int Message::entries_size() const {
  return entries_.size();
}
void Message::clear_entries() {
  entries_.Clear();
}
const ::eraftpb::Entry& Message::entries(int index) const {
  // @@protoc_insertion_point(field_get:eraftpb.Message.entries)
  return entries_.Get(index);
}
::eraftpb::Entry* Message::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:eraftpb.Message.entries)
  return entries_.Mutable(index);
}
::eraftpb::Entry* Message::add_entries() {
  // @@protoc_insertion_point(field_add:eraftpb.Message.entries)
  return entries_.Add();
}
::google::protobuf::RepeatedPtrField< ::eraftpb::Entry >*
Message::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:eraftpb.Message.entries)
  return &entries_;
}
const ::google::protobuf::RepeatedPtrField< ::eraftpb::Entry >&
Message::entries() const {
  // @@protoc_insertion_point(field_list:eraftpb.Message.entries)
  return entries_;
}

// optional uint64 commit = 8;
bool Message::has_commit() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Message::set_has_commit() {
  _has_bits_[0] |= 0x00000080u;
}
void Message::clear_has_commit() {
  _has_bits_[0] &= ~0x00000080u;
}
void Message::clear_commit() {
  commit_ = GOOGLE_ULONGLONG(0);
  clear_has_commit();
}
::google::protobuf::uint64 Message::commit() const {
  // @@protoc_insertion_point(field_get:eraftpb.Message.commit)
  return commit_;
}
void Message::set_commit(::google::protobuf::uint64 value) {
  set_has_commit();
  commit_ = value;
  // @@protoc_insertion_point(field_set:eraftpb.Message.commit)
}

// optional .eraftpb.Snapshot snapshot = 9;
bool Message::has_snapshot() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Message::set_has_snapshot() {
  _has_bits_[0] |= 0x00000100u;
}
void Message::clear_has_snapshot() {
  _has_bits_[0] &= ~0x00000100u;
}
void Message::clear_snapshot() {
  if (snapshot_ != NULL) snapshot_->::eraftpb::Snapshot::Clear();
  clear_has_snapshot();
}
const ::eraftpb::Snapshot& Message::snapshot() const {
  // @@protoc_insertion_point(field_get:eraftpb.Message.snapshot)
  return snapshot_ != NULL ? *snapshot_
                         : *::eraftpb::Snapshot::internal_default_instance();
}
::eraftpb::Snapshot* Message::mutable_snapshot() {
  set_has_snapshot();
  if (snapshot_ == NULL) {
    snapshot_ = new ::eraftpb::Snapshot;
  }
  // @@protoc_insertion_point(field_mutable:eraftpb.Message.snapshot)
  return snapshot_;
}
::eraftpb::Snapshot* Message::release_snapshot() {
  // @@protoc_insertion_point(field_release:eraftpb.Message.snapshot)
  clear_has_snapshot();
  ::eraftpb::Snapshot* temp = snapshot_;
  snapshot_ = NULL;
  return temp;
}
void Message::set_allocated_snapshot(::eraftpb::Snapshot* snapshot) {
  delete snapshot_;
  snapshot_ = snapshot;
  if (snapshot) {
    set_has_snapshot();
  } else {
    clear_has_snapshot();
  }
  // @@protoc_insertion_point(field_set_allocated:eraftpb.Message.snapshot)
}

// optional bool reject = 10;
bool Message::has_reject() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void Message::set_has_reject() {
  _has_bits_[0] |= 0x00000200u;
}
void Message::clear_has_reject() {
  _has_bits_[0] &= ~0x00000200u;
}
void Message::clear_reject() {
  reject_ = false;
  clear_has_reject();
}
bool Message::reject() const {
  // @@protoc_insertion_point(field_get:eraftpb.Message.reject)
  return reject_;
}
void Message::set_reject(bool value) {
  set_has_reject();
  reject_ = value;
  // @@protoc_insertion_point(field_set:eraftpb.Message.reject)
}

// optional uint64 reject_hint = 11;
bool Message::has_reject_hint() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void Message::set_has_reject_hint() {
  _has_bits_[0] |= 0x00000400u;
}
void Message::clear_has_reject_hint() {
  _has_bits_[0] &= ~0x00000400u;
}
void Message::clear_reject_hint() {
  reject_hint_ = GOOGLE_ULONGLONG(0);
  clear_has_reject_hint();
}
::google::protobuf::uint64 Message::reject_hint() const {
  // @@protoc_insertion_point(field_get:eraftpb.Message.reject_hint)
  return reject_hint_;
}
void Message::set_reject_hint(::google::protobuf::uint64 value) {
  set_has_reject_hint();
  reject_hint_ = value;
  // @@protoc_insertion_point(field_set:eraftpb.Message.reject_hint)
}

// optional bytes context = 12;
bool Message::has_context() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void Message::set_has_context() {
  _has_bits_[0] |= 0x00000800u;
}
void Message::clear_has_context() {
  _has_bits_[0] &= ~0x00000800u;
}
void Message::clear_context() {
  context_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_context();
}
const ::std::string& Message::context() const {
  // @@protoc_insertion_point(field_get:eraftpb.Message.context)
  return context_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Message::set_context(const ::std::string& value) {
  set_has_context();
  context_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:eraftpb.Message.context)
}
void Message::set_context(const char* value) {
  set_has_context();
  context_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eraftpb.Message.context)
}
void Message::set_context(const void* value, size_t size) {
  set_has_context();
  context_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eraftpb.Message.context)
}
::std::string* Message::mutable_context() {
  set_has_context();
  // @@protoc_insertion_point(field_mutable:eraftpb.Message.context)
  return context_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Message::release_context() {
  // @@protoc_insertion_point(field_release:eraftpb.Message.context)
  clear_has_context();
  return context_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Message::set_allocated_context(::std::string* context) {
  if (context != NULL) {
    set_has_context();
  } else {
    clear_has_context();
  }
  context_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), context);
  // @@protoc_insertion_point(field_set_allocated:eraftpb.Message.context)
}

inline const Message* Message::internal_default_instance() {
  return &Message_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HardState::kTermFieldNumber;
const int HardState::kVoteFieldNumber;
const int HardState::kCommitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HardState::HardState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_eraftpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:eraftpb.HardState)
}

void HardState::InitAsDefaultInstance() {
}

HardState::HardState(const HardState& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:eraftpb.HardState)
}

void HardState::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&term_, 0, reinterpret_cast<char*>(&commit_) -
    reinterpret_cast<char*>(&term_) + sizeof(commit_));
}

HardState::~HardState() {
  // @@protoc_insertion_point(destructor:eraftpb.HardState)
  SharedDtor();
}

void HardState::SharedDtor() {
}

void HardState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HardState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HardState_descriptor_;
}

const HardState& HardState::default_instance() {
  protobuf_InitDefaults_eraftpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<HardState> HardState_default_instance_;

HardState* HardState::New(::google::protobuf::Arena* arena) const {
  HardState* n = new HardState;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HardState::Clear() {
// @@protoc_insertion_point(message_clear_start:eraftpb.HardState)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(HardState, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<HardState*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(term_, commit_);

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool HardState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:eraftpb.HardState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 term = 1;
      case 1: {
        if (tag == 8) {
          set_has_term();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &term_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_vote;
        break;
      }

      // optional uint64 vote = 2;
      case 2: {
        if (tag == 16) {
         parse_vote:
          set_has_vote();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &vote_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_commit;
        break;
      }

      // optional uint64 commit = 3;
      case 3: {
        if (tag == 24) {
         parse_commit:
          set_has_commit();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &commit_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:eraftpb.HardState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:eraftpb.HardState)
  return false;
#undef DO_
}

void HardState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:eraftpb.HardState)
  // optional uint64 term = 1;
  if (has_term()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->term(), output);
  }

  // optional uint64 vote = 2;
  if (has_vote()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->vote(), output);
  }

  // optional uint64 commit = 3;
  if (has_commit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->commit(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:eraftpb.HardState)
}

::google::protobuf::uint8* HardState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:eraftpb.HardState)
  // optional uint64 term = 1;
  if (has_term()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->term(), target);
  }

  // optional uint64 vote = 2;
  if (has_vote()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->vote(), target);
  }

  // optional uint64 commit = 3;
  if (has_commit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->commit(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:eraftpb.HardState)
  return target;
}

size_t HardState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:eraftpb.HardState)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional uint64 term = 1;
    if (has_term()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->term());
    }

    // optional uint64 vote = 2;
    if (has_vote()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->vote());
    }

    // optional uint64 commit = 3;
    if (has_commit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->commit());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HardState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:eraftpb.HardState)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const HardState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HardState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:eraftpb.HardState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:eraftpb.HardState)
    UnsafeMergeFrom(*source);
  }
}

void HardState::MergeFrom(const HardState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:eraftpb.HardState)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void HardState::UnsafeMergeFrom(const HardState& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_term()) {
      set_term(from.term());
    }
    if (from.has_vote()) {
      set_vote(from.vote());
    }
    if (from.has_commit()) {
      set_commit(from.commit());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void HardState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:eraftpb.HardState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HardState::CopyFrom(const HardState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:eraftpb.HardState)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool HardState::IsInitialized() const {

  return true;
}

void HardState::Swap(HardState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HardState::InternalSwap(HardState* other) {
  std::swap(term_, other->term_);
  std::swap(vote_, other->vote_);
  std::swap(commit_, other->commit_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HardState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HardState_descriptor_;
  metadata.reflection = HardState_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HardState

// optional uint64 term = 1;
bool HardState::has_term() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void HardState::set_has_term() {
  _has_bits_[0] |= 0x00000001u;
}
void HardState::clear_has_term() {
  _has_bits_[0] &= ~0x00000001u;
}
void HardState::clear_term() {
  term_ = GOOGLE_ULONGLONG(0);
  clear_has_term();
}
::google::protobuf::uint64 HardState::term() const {
  // @@protoc_insertion_point(field_get:eraftpb.HardState.term)
  return term_;
}
void HardState::set_term(::google::protobuf::uint64 value) {
  set_has_term();
  term_ = value;
  // @@protoc_insertion_point(field_set:eraftpb.HardState.term)
}

// optional uint64 vote = 2;
bool HardState::has_vote() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void HardState::set_has_vote() {
  _has_bits_[0] |= 0x00000002u;
}
void HardState::clear_has_vote() {
  _has_bits_[0] &= ~0x00000002u;
}
void HardState::clear_vote() {
  vote_ = GOOGLE_ULONGLONG(0);
  clear_has_vote();
}
::google::protobuf::uint64 HardState::vote() const {
  // @@protoc_insertion_point(field_get:eraftpb.HardState.vote)
  return vote_;
}
void HardState::set_vote(::google::protobuf::uint64 value) {
  set_has_vote();
  vote_ = value;
  // @@protoc_insertion_point(field_set:eraftpb.HardState.vote)
}

// optional uint64 commit = 3;
bool HardState::has_commit() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void HardState::set_has_commit() {
  _has_bits_[0] |= 0x00000004u;
}
void HardState::clear_has_commit() {
  _has_bits_[0] &= ~0x00000004u;
}
void HardState::clear_commit() {
  commit_ = GOOGLE_ULONGLONG(0);
  clear_has_commit();
}
::google::protobuf::uint64 HardState::commit() const {
  // @@protoc_insertion_point(field_get:eraftpb.HardState.commit)
  return commit_;
}
void HardState::set_commit(::google::protobuf::uint64 value) {
  set_has_commit();
  commit_ = value;
  // @@protoc_insertion_point(field_set:eraftpb.HardState.commit)
}

inline const HardState* HardState::internal_default_instance() {
  return &HardState_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConfState::kNodesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConfState::ConfState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_eraftpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:eraftpb.ConfState)
}

void ConfState::InitAsDefaultInstance() {
}

ConfState::ConfState(const ConfState& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:eraftpb.ConfState)
}

void ConfState::SharedCtor() {
  _cached_size_ = 0;
}

ConfState::~ConfState() {
  // @@protoc_insertion_point(destructor:eraftpb.ConfState)
  SharedDtor();
}

void ConfState::SharedDtor() {
}

void ConfState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConfState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConfState_descriptor_;
}

const ConfState& ConfState::default_instance() {
  protobuf_InitDefaults_eraftpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ConfState> ConfState_default_instance_;

ConfState* ConfState::New(::google::protobuf::Arena* arena) const {
  ConfState* n = new ConfState;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ConfState::Clear() {
// @@protoc_insertion_point(message_clear_start:eraftpb.ConfState)
  nodes_.Clear();
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ConfState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:eraftpb.ConfState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 nodes = 1;
      case 1: {
        if (tag == 8) {
         parse_nodes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 8, input, this->mutable_nodes())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_nodes())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_nodes;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:eraftpb.ConfState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:eraftpb.ConfState)
  return false;
#undef DO_
}

void ConfState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:eraftpb.ConfState)
  // repeated uint64 nodes = 1;
  for (int i = 0; i < this->nodes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      1, this->nodes(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:eraftpb.ConfState)
}

::google::protobuf::uint8* ConfState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:eraftpb.ConfState)
  // repeated uint64 nodes = 1;
  for (int i = 0; i < this->nodes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(1, this->nodes(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:eraftpb.ConfState)
  return target;
}

size_t ConfState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:eraftpb.ConfState)
  size_t total_size = 0;

  // repeated uint64 nodes = 1;
  {
    size_t data_size = 0;
    unsigned int count = this->nodes_size();
    for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->nodes(i));
    }
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->nodes_size());
    total_size += data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConfState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:eraftpb.ConfState)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ConfState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConfState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:eraftpb.ConfState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:eraftpb.ConfState)
    UnsafeMergeFrom(*source);
  }
}

void ConfState::MergeFrom(const ConfState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:eraftpb.ConfState)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ConfState::UnsafeMergeFrom(const ConfState& from) {
  GOOGLE_DCHECK(&from != this);
  nodes_.UnsafeMergeFrom(from.nodes_);
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void ConfState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:eraftpb.ConfState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfState::CopyFrom(const ConfState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:eraftpb.ConfState)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ConfState::IsInitialized() const {

  return true;
}

void ConfState::Swap(ConfState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConfState::InternalSwap(ConfState* other) {
  nodes_.UnsafeArenaSwap(&other->nodes_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ConfState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConfState_descriptor_;
  metadata.reflection = ConfState_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ConfState

// repeated uint64 nodes = 1;
int ConfState::nodes_size() const {
  return nodes_.size();
}
void ConfState::clear_nodes() {
  nodes_.Clear();
}
::google::protobuf::uint64 ConfState::nodes(int index) const {
  // @@protoc_insertion_point(field_get:eraftpb.ConfState.nodes)
  return nodes_.Get(index);
}
void ConfState::set_nodes(int index, ::google::protobuf::uint64 value) {
  nodes_.Set(index, value);
  // @@protoc_insertion_point(field_set:eraftpb.ConfState.nodes)
}
void ConfState::add_nodes(::google::protobuf::uint64 value) {
  nodes_.Add(value);
  // @@protoc_insertion_point(field_add:eraftpb.ConfState.nodes)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
ConfState::nodes() const {
  // @@protoc_insertion_point(field_list:eraftpb.ConfState.nodes)
  return nodes_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
ConfState::mutable_nodes() {
  // @@protoc_insertion_point(field_mutable_list:eraftpb.ConfState.nodes)
  return &nodes_;
}

inline const ConfState* ConfState::internal_default_instance() {
  return &ConfState_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConfChange::kIdFieldNumber;
const int ConfChange::kChangeTypeFieldNumber;
const int ConfChange::kNodeIdFieldNumber;
const int ConfChange::kContextFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConfChange::ConfChange()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_eraftpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:eraftpb.ConfChange)
}

void ConfChange::InitAsDefaultInstance() {
}

ConfChange::ConfChange(const ConfChange& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:eraftpb.ConfChange)
}

void ConfChange::SharedCtor() {
  _cached_size_ = 0;
  context_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, reinterpret_cast<char*>(&change_type_) -
    reinterpret_cast<char*>(&id_) + sizeof(change_type_));
}

ConfChange::~ConfChange() {
  // @@protoc_insertion_point(destructor:eraftpb.ConfChange)
  SharedDtor();
}

void ConfChange::SharedDtor() {
  context_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ConfChange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConfChange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConfChange_descriptor_;
}

const ConfChange& ConfChange::default_instance() {
  protobuf_InitDefaults_eraftpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ConfChange> ConfChange_default_instance_;

ConfChange* ConfChange::New(::google::protobuf::Arena* arena) const {
  ConfChange* n = new ConfChange;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ConfChange::Clear() {
// @@protoc_insertion_point(message_clear_start:eraftpb.ConfChange)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ConfChange, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ConfChange*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 15u) {
    ZR_(id_, change_type_);
    if (has_context()) {
      context_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ConfChange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:eraftpb.ConfChange)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (tag == 8) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_change_type;
        break;
      }

      // optional .eraftpb.ConfChangeType change_type = 2;
      case 2: {
        if (tag == 16) {
         parse_change_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::eraftpb::ConfChangeType_IsValid(value)) {
            set_change_type(static_cast< ::eraftpb::ConfChangeType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_node_id;
        break;
      }

      // optional uint64 node_id = 3;
      case 3: {
        if (tag == 24) {
         parse_node_id:
          set_has_node_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &node_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_context;
        break;
      }

      // optional bytes context = 4;
      case 4: {
        if (tag == 34) {
         parse_context:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_context()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:eraftpb.ConfChange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:eraftpb.ConfChange)
  return false;
#undef DO_
}

void ConfChange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:eraftpb.ConfChange)
  // optional uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional .eraftpb.ConfChangeType change_type = 2;
  if (has_change_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->change_type(), output);
  }

  // optional uint64 node_id = 3;
  if (has_node_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->node_id(), output);
  }

  // optional bytes context = 4;
  if (has_context()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->context(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:eraftpb.ConfChange)
}

::google::protobuf::uint8* ConfChange::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:eraftpb.ConfChange)
  // optional uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional .eraftpb.ConfChangeType change_type = 2;
  if (has_change_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->change_type(), target);
  }

  // optional uint64 node_id = 3;
  if (has_node_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->node_id(), target);
  }

  // optional bytes context = 4;
  if (has_context()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->context(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:eraftpb.ConfChange)
  return target;
}

size_t ConfChange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:eraftpb.ConfChange)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 15u) {
    // optional uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional .eraftpb.ConfChangeType change_type = 2;
    if (has_change_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->change_type());
    }

    // optional uint64 node_id = 3;
    if (has_node_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->node_id());
    }

    // optional bytes context = 4;
    if (has_context()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->context());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConfChange::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:eraftpb.ConfChange)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ConfChange* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConfChange>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:eraftpb.ConfChange)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:eraftpb.ConfChange)
    UnsafeMergeFrom(*source);
  }
}

void ConfChange::MergeFrom(const ConfChange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:eraftpb.ConfChange)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ConfChange::UnsafeMergeFrom(const ConfChange& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_change_type()) {
      set_change_type(from.change_type());
    }
    if (from.has_node_id()) {
      set_node_id(from.node_id());
    }
    if (from.has_context()) {
      set_has_context();
      context_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.context_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void ConfChange::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:eraftpb.ConfChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfChange::CopyFrom(const ConfChange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:eraftpb.ConfChange)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ConfChange::IsInitialized() const {

  return true;
}

void ConfChange::Swap(ConfChange* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConfChange::InternalSwap(ConfChange* other) {
  std::swap(id_, other->id_);
  std::swap(change_type_, other->change_type_);
  std::swap(node_id_, other->node_id_);
  context_.Swap(&other->context_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ConfChange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConfChange_descriptor_;
  metadata.reflection = ConfChange_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ConfChange

// optional uint64 id = 1;
bool ConfChange::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ConfChange::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void ConfChange::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void ConfChange::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
::google::protobuf::uint64 ConfChange::id() const {
  // @@protoc_insertion_point(field_get:eraftpb.ConfChange.id)
  return id_;
}
void ConfChange::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:eraftpb.ConfChange.id)
}

// optional .eraftpb.ConfChangeType change_type = 2;
bool ConfChange::has_change_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ConfChange::set_has_change_type() {
  _has_bits_[0] |= 0x00000002u;
}
void ConfChange::clear_has_change_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void ConfChange::clear_change_type() {
  change_type_ = 0;
  clear_has_change_type();
}
::eraftpb::ConfChangeType ConfChange::change_type() const {
  // @@protoc_insertion_point(field_get:eraftpb.ConfChange.change_type)
  return static_cast< ::eraftpb::ConfChangeType >(change_type_);
}
void ConfChange::set_change_type(::eraftpb::ConfChangeType value) {
  assert(::eraftpb::ConfChangeType_IsValid(value));
  set_has_change_type();
  change_type_ = value;
  // @@protoc_insertion_point(field_set:eraftpb.ConfChange.change_type)
}

// optional uint64 node_id = 3;
bool ConfChange::has_node_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ConfChange::set_has_node_id() {
  _has_bits_[0] |= 0x00000004u;
}
void ConfChange::clear_has_node_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void ConfChange::clear_node_id() {
  node_id_ = GOOGLE_ULONGLONG(0);
  clear_has_node_id();
}
::google::protobuf::uint64 ConfChange::node_id() const {
  // @@protoc_insertion_point(field_get:eraftpb.ConfChange.node_id)
  return node_id_;
}
void ConfChange::set_node_id(::google::protobuf::uint64 value) {
  set_has_node_id();
  node_id_ = value;
  // @@protoc_insertion_point(field_set:eraftpb.ConfChange.node_id)
}

// optional bytes context = 4;
bool ConfChange::has_context() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ConfChange::set_has_context() {
  _has_bits_[0] |= 0x00000008u;
}
void ConfChange::clear_has_context() {
  _has_bits_[0] &= ~0x00000008u;
}
void ConfChange::clear_context() {
  context_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_context();
}
const ::std::string& ConfChange::context() const {
  // @@protoc_insertion_point(field_get:eraftpb.ConfChange.context)
  return context_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ConfChange::set_context(const ::std::string& value) {
  set_has_context();
  context_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:eraftpb.ConfChange.context)
}
void ConfChange::set_context(const char* value) {
  set_has_context();
  context_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eraftpb.ConfChange.context)
}
void ConfChange::set_context(const void* value, size_t size) {
  set_has_context();
  context_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eraftpb.ConfChange.context)
}
::std::string* ConfChange::mutable_context() {
  set_has_context();
  // @@protoc_insertion_point(field_mutable:eraftpb.ConfChange.context)
  return context_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ConfChange::release_context() {
  // @@protoc_insertion_point(field_release:eraftpb.ConfChange.context)
  clear_has_context();
  return context_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ConfChange::set_allocated_context(::std::string* context) {
  if (context != NULL) {
    set_has_context();
  } else {
    clear_has_context();
  }
  context_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), context);
  // @@protoc_insertion_point(field_set_allocated:eraftpb.ConfChange.context)
}

inline const ConfChange* ConfChange::internal_default_instance() {
  return &ConfChange_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace eraftpb

// @@protoc_insertion_point(global_scope)
