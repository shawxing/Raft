// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: metapb.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "metapb.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace metapb {

namespace {

const ::google::protobuf::Descriptor* Cluster_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Cluster_reflection_ = NULL;
const ::google::protobuf::Descriptor* StoreLabel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StoreLabel_reflection_ = NULL;
const ::google::protobuf::Descriptor* Store_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Store_reflection_ = NULL;
const ::google::protobuf::Descriptor* RegionEpoch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RegionEpoch_reflection_ = NULL;
const ::google::protobuf::Descriptor* Region_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Region_reflection_ = NULL;
const ::google::protobuf::Descriptor* Peer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Peer_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* StoreState_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_metapb_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_metapb_2eproto() {
  protobuf_AddDesc_metapb_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "metapb.proto");
  GOOGLE_CHECK(file != NULL);
  Cluster_descriptor_ = file->message_type(0);
  static const int Cluster_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cluster, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cluster, max_peer_count_),
  };
  Cluster_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Cluster_descriptor_,
      Cluster::internal_default_instance(),
      Cluster_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cluster, _has_bits_),
      -1,
      -1,
      sizeof(Cluster),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cluster, _internal_metadata_));
  StoreLabel_descriptor_ = file->message_type(1);
  static const int StoreLabel_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreLabel, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreLabel, value_),
  };
  StoreLabel_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      StoreLabel_descriptor_,
      StoreLabel::internal_default_instance(),
      StoreLabel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreLabel, _has_bits_),
      -1,
      -1,
      sizeof(StoreLabel),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreLabel, _internal_metadata_));
  Store_descriptor_ = file->message_type(2);
  static const int Store_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Store, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Store, address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Store, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Store, labels_),
  };
  Store_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Store_descriptor_,
      Store::internal_default_instance(),
      Store_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Store, _has_bits_),
      -1,
      -1,
      sizeof(Store),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Store, _internal_metadata_));
  RegionEpoch_descriptor_ = file->message_type(3);
  static const int RegionEpoch_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionEpoch, conf_ver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionEpoch, version_),
  };
  RegionEpoch_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RegionEpoch_descriptor_,
      RegionEpoch::internal_default_instance(),
      RegionEpoch_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionEpoch, _has_bits_),
      -1,
      -1,
      sizeof(RegionEpoch),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionEpoch, _internal_metadata_));
  Region_descriptor_ = file->message_type(4);
  static const int Region_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Region, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Region, start_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Region, end_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Region, region_epoch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Region, peers_),
  };
  Region_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Region_descriptor_,
      Region::internal_default_instance(),
      Region_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Region, _has_bits_),
      -1,
      -1,
      sizeof(Region),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Region, _internal_metadata_));
  Peer_descriptor_ = file->message_type(5);
  static const int Peer_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Peer, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Peer, store_id_),
  };
  Peer_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Peer_descriptor_,
      Peer::internal_default_instance(),
      Peer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Peer, _has_bits_),
      -1,
      -1,
      sizeof(Peer),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Peer, _internal_metadata_));
  StoreState_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_metapb_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Cluster_descriptor_, Cluster::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      StoreLabel_descriptor_, StoreLabel::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Store_descriptor_, Store::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RegionEpoch_descriptor_, RegionEpoch::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Region_descriptor_, Region::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Peer_descriptor_, Peer::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_metapb_2eproto() {
  Cluster_default_instance_.Shutdown();
  delete Cluster_reflection_;
  StoreLabel_default_instance_.Shutdown();
  delete StoreLabel_reflection_;
  Store_default_instance_.Shutdown();
  delete Store_reflection_;
  RegionEpoch_default_instance_.Shutdown();
  delete RegionEpoch_reflection_;
  Region_default_instance_.Shutdown();
  delete Region_reflection_;
  Peer_default_instance_.Shutdown();
  delete Peer_reflection_;
}

void protobuf_InitDefaults_metapb_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  Cluster_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  StoreLabel_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  Store_default_instance_.DefaultConstruct();
  RegionEpoch_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  Region_default_instance_.DefaultConstruct();
  Peer_default_instance_.DefaultConstruct();
  Cluster_default_instance_.get_mutable()->InitAsDefaultInstance();
  StoreLabel_default_instance_.get_mutable()->InitAsDefaultInstance();
  Store_default_instance_.get_mutable()->InitAsDefaultInstance();
  RegionEpoch_default_instance_.get_mutable()->InitAsDefaultInstance();
  Region_default_instance_.get_mutable()->InitAsDefaultInstance();
  Peer_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_metapb_2eproto_once_);
void protobuf_InitDefaults_metapb_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_metapb_2eproto_once_,
                 &protobuf_InitDefaults_metapb_2eproto_impl);
}
void protobuf_AddDesc_metapb_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_metapb_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014metapb.proto\022\006metapb\"-\n\007Cluster\022\n\n\002id\030"
    "\001 \001(\004\022\026\n\016max_peer_count\030\002 \001(\r\"(\n\nStoreLa"
    "bel\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t\"k\n\005Store"
    "\022\n\n\002id\030\001 \001(\004\022\017\n\007address\030\002 \001(\t\022!\n\005state\030\003"
    " \001(\0162\022.metapb.StoreState\022\"\n\006labels\030\004 \003(\013"
    "2\022.metapb.StoreLabel\"0\n\013RegionEpoch\022\020\n\010c"
    "onf_ver\030\001 \001(\004\022\017\n\007version\030\002 \001(\004\"\200\001\n\006Regio"
    "n\022\n\n\002id\030\001 \001(\004\022\021\n\tstart_key\030\002 \001(\014\022\017\n\007end_"
    "key\030\003 \001(\014\022)\n\014region_epoch\030\004 \001(\0132\023.metapb"
    ".RegionEpoch\022\033\n\005peers\030\005 \003(\0132\014.metapb.Pee"
    "r\"$\n\004Peer\022\n\n\002id\030\001 \001(\004\022\020\n\010store_id\030\002 \001(\004*"
    "0\n\nStoreState\022\006\n\002Up\020\000\022\013\n\007Offline\020\001\022\r\n\tTo"
    "mbstone\020\002", 489);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "metapb.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_metapb_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_metapb_2eproto_once_);
void protobuf_AddDesc_metapb_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_metapb_2eproto_once_,
                 &protobuf_AddDesc_metapb_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_metapb_2eproto {
  StaticDescriptorInitializer_metapb_2eproto() {
    protobuf_AddDesc_metapb_2eproto();
  }
} static_descriptor_initializer_metapb_2eproto_;
const ::google::protobuf::EnumDescriptor* StoreState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StoreState_descriptor_;
}
bool StoreState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Cluster::kIdFieldNumber;
const int Cluster::kMaxPeerCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Cluster::Cluster()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_metapb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:metapb.Cluster)
}

void Cluster::InitAsDefaultInstance() {
}

Cluster::Cluster(const Cluster& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:metapb.Cluster)
}

void Cluster::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&id_, 0, reinterpret_cast<char*>(&max_peer_count_) -
    reinterpret_cast<char*>(&id_) + sizeof(max_peer_count_));
}

Cluster::~Cluster() {
  // @@protoc_insertion_point(destructor:metapb.Cluster)
  SharedDtor();
}

void Cluster::SharedDtor() {
}

void Cluster::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Cluster::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Cluster_descriptor_;
}

const Cluster& Cluster::default_instance() {
  protobuf_InitDefaults_metapb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Cluster> Cluster_default_instance_;

Cluster* Cluster::New(::google::protobuf::Arena* arena) const {
  Cluster* n = new Cluster;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Cluster::Clear() {
// @@protoc_insertion_point(message_clear_start:metapb.Cluster)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Cluster, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Cluster*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(id_, max_peer_count_);

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Cluster::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:metapb.Cluster)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (tag == 8) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_max_peer_count;
        break;
      }

      // optional uint32 max_peer_count = 2;
      case 2: {
        if (tag == 16) {
         parse_max_peer_count:
          set_has_max_peer_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_peer_count_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metapb.Cluster)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metapb.Cluster)
  return false;
#undef DO_
}

void Cluster::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metapb.Cluster)
  // optional uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional uint32 max_peer_count = 2;
  if (has_max_peer_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->max_peer_count(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:metapb.Cluster)
}

::google::protobuf::uint8* Cluster::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:metapb.Cluster)
  // optional uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional uint32 max_peer_count = 2;
  if (has_max_peer_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->max_peer_count(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metapb.Cluster)
  return target;
}

size_t Cluster::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metapb.Cluster)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional uint32 max_peer_count = 2;
    if (has_max_peer_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_peer_count());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Cluster::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:metapb.Cluster)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Cluster* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Cluster>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:metapb.Cluster)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:metapb.Cluster)
    UnsafeMergeFrom(*source);
  }
}

void Cluster::MergeFrom(const Cluster& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metapb.Cluster)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Cluster::UnsafeMergeFrom(const Cluster& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_max_peer_count()) {
      set_max_peer_count(from.max_peer_count());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void Cluster::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:metapb.Cluster)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Cluster::CopyFrom(const Cluster& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metapb.Cluster)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Cluster::IsInitialized() const {

  return true;
}

void Cluster::Swap(Cluster* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Cluster::InternalSwap(Cluster* other) {
  std::swap(id_, other->id_);
  std::swap(max_peer_count_, other->max_peer_count_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Cluster::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Cluster_descriptor_;
  metadata.reflection = Cluster_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Cluster

// optional uint64 id = 1;
bool Cluster::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Cluster::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void Cluster::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void Cluster::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
::google::protobuf::uint64 Cluster::id() const {
  // @@protoc_insertion_point(field_get:metapb.Cluster.id)
  return id_;
}
void Cluster::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:metapb.Cluster.id)
}

// optional uint32 max_peer_count = 2;
bool Cluster::has_max_peer_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Cluster::set_has_max_peer_count() {
  _has_bits_[0] |= 0x00000002u;
}
void Cluster::clear_has_max_peer_count() {
  _has_bits_[0] &= ~0x00000002u;
}
void Cluster::clear_max_peer_count() {
  max_peer_count_ = 0u;
  clear_has_max_peer_count();
}
::google::protobuf::uint32 Cluster::max_peer_count() const {
  // @@protoc_insertion_point(field_get:metapb.Cluster.max_peer_count)
  return max_peer_count_;
}
void Cluster::set_max_peer_count(::google::protobuf::uint32 value) {
  set_has_max_peer_count();
  max_peer_count_ = value;
  // @@protoc_insertion_point(field_set:metapb.Cluster.max_peer_count)
}

inline const Cluster* Cluster::internal_default_instance() {
  return &Cluster_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StoreLabel::kKeyFieldNumber;
const int StoreLabel::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StoreLabel::StoreLabel()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_metapb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:metapb.StoreLabel)
}

void StoreLabel::InitAsDefaultInstance() {
}

StoreLabel::StoreLabel(const StoreLabel& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:metapb.StoreLabel)
}

void StoreLabel::SharedCtor() {
  _cached_size_ = 0;
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

StoreLabel::~StoreLabel() {
  // @@protoc_insertion_point(destructor:metapb.StoreLabel)
  SharedDtor();
}

void StoreLabel::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void StoreLabel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StoreLabel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StoreLabel_descriptor_;
}

const StoreLabel& StoreLabel::default_instance() {
  protobuf_InitDefaults_metapb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<StoreLabel> StoreLabel_default_instance_;

StoreLabel* StoreLabel::New(::google::protobuf::Arena* arena) const {
  StoreLabel* n = new StoreLabel;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StoreLabel::Clear() {
// @@protoc_insertion_point(message_clear_start:metapb.StoreLabel)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_key()) {
      key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_value()) {
      value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool StoreLabel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:metapb.StoreLabel)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "metapb.StoreLabel.key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // optional string value = 2;
      case 2: {
        if (tag == 18) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "metapb.StoreLabel.value");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metapb.StoreLabel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metapb.StoreLabel)
  return false;
#undef DO_
}

void StoreLabel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metapb.StoreLabel)
  // optional string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "metapb.StoreLabel.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // optional string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "metapb.StoreLabel.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:metapb.StoreLabel)
}

::google::protobuf::uint8* StoreLabel::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:metapb.StoreLabel)
  // optional string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "metapb.StoreLabel.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // optional string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "metapb.StoreLabel.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metapb.StoreLabel)
  return target;
}

size_t StoreLabel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metapb.StoreLabel)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional string key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // optional string value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StoreLabel::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:metapb.StoreLabel)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const StoreLabel* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StoreLabel>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:metapb.StoreLabel)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:metapb.StoreLabel)
    UnsafeMergeFrom(*source);
  }
}

void StoreLabel::MergeFrom(const StoreLabel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metapb.StoreLabel)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void StoreLabel::UnsafeMergeFrom(const StoreLabel& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_has_key();
      key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
    }
    if (from.has_value()) {
      set_has_value();
      value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void StoreLabel::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:metapb.StoreLabel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StoreLabel::CopyFrom(const StoreLabel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metapb.StoreLabel)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool StoreLabel::IsInitialized() const {

  return true;
}

void StoreLabel::Swap(StoreLabel* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StoreLabel::InternalSwap(StoreLabel* other) {
  key_.Swap(&other->key_);
  value_.Swap(&other->value_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StoreLabel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StoreLabel_descriptor_;
  metadata.reflection = StoreLabel_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StoreLabel

// optional string key = 1;
bool StoreLabel::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void StoreLabel::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
void StoreLabel::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
void StoreLabel::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
const ::std::string& StoreLabel::key() const {
  // @@protoc_insertion_point(field_get:metapb.StoreLabel.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void StoreLabel::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metapb.StoreLabel.key)
}
void StoreLabel::set_key(const char* value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metapb.StoreLabel.key)
}
void StoreLabel::set_key(const char* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metapb.StoreLabel.key)
}
::std::string* StoreLabel::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:metapb.StoreLabel.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* StoreLabel::release_key() {
  // @@protoc_insertion_point(field_release:metapb.StoreLabel.key)
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void StoreLabel::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:metapb.StoreLabel.key)
}

// optional string value = 2;
bool StoreLabel::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void StoreLabel::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
void StoreLabel::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
void StoreLabel::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}
const ::std::string& StoreLabel::value() const {
  // @@protoc_insertion_point(field_get:metapb.StoreLabel.value)
  return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void StoreLabel::set_value(const ::std::string& value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metapb.StoreLabel.value)
}
void StoreLabel::set_value(const char* value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metapb.StoreLabel.value)
}
void StoreLabel::set_value(const char* value, size_t size) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metapb.StoreLabel.value)
}
::std::string* StoreLabel::mutable_value() {
  set_has_value();
  // @@protoc_insertion_point(field_mutable:metapb.StoreLabel.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* StoreLabel::release_value() {
  // @@protoc_insertion_point(field_release:metapb.StoreLabel.value)
  clear_has_value();
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void StoreLabel::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    set_has_value();
  } else {
    clear_has_value();
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:metapb.StoreLabel.value)
}

inline const StoreLabel* StoreLabel::internal_default_instance() {
  return &StoreLabel_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Store::kIdFieldNumber;
const int Store::kAddressFieldNumber;
const int Store::kStateFieldNumber;
const int Store::kLabelsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Store::Store()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_metapb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:metapb.Store)
}

void Store::InitAsDefaultInstance() {
}

Store::Store(const Store& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:metapb.Store)
}

void Store::SharedCtor() {
  _cached_size_ = 0;
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&id_) + sizeof(state_));
}

Store::~Store() {
  // @@protoc_insertion_point(destructor:metapb.Store)
  SharedDtor();
}

void Store::SharedDtor() {
  address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Store::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Store::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Store_descriptor_;
}

const Store& Store::default_instance() {
  protobuf_InitDefaults_metapb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Store> Store_default_instance_;

Store* Store::New(::google::protobuf::Arena* arena) const {
  Store* n = new Store;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Store::Clear() {
// @@protoc_insertion_point(message_clear_start:metapb.Store)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Store, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Store*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 7u) {
    ZR_(id_, state_);
    if (has_address()) {
      address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  labels_.Clear();
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Store::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:metapb.Store)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (tag == 8) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_address;
        break;
      }

      // optional string address = 2;
      case 2: {
        if (tag == 18) {
         parse_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->address().data(), this->address().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "metapb.Store.address");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_state;
        break;
      }

      // optional .metapb.StoreState state = 3;
      case 3: {
        if (tag == 24) {
         parse_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::metapb::StoreState_IsValid(value)) {
            set_state(static_cast< ::metapb::StoreState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_labels;
        break;
      }

      // repeated .metapb.StoreLabel labels = 4;
      case 4: {
        if (tag == 34) {
         parse_labels:
          DO_(input->IncrementRecursionDepth());
         parse_loop_labels:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_labels()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_labels;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metapb.Store)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metapb.Store)
  return false;
#undef DO_
}

void Store::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metapb.Store)
  // optional uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional string address = 2;
  if (has_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->address().data(), this->address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "metapb.Store.address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->address(), output);
  }

  // optional .metapb.StoreState state = 3;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->state(), output);
  }

  // repeated .metapb.StoreLabel labels = 4;
  for (unsigned int i = 0, n = this->labels_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->labels(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:metapb.Store)
}

::google::protobuf::uint8* Store::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:metapb.Store)
  // optional uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional string address = 2;
  if (has_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->address().data(), this->address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "metapb.Store.address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->address(), target);
  }

  // optional .metapb.StoreState state = 3;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->state(), target);
  }

  // repeated .metapb.StoreLabel labels = 4;
  for (unsigned int i = 0, n = this->labels_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->labels(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metapb.Store)
  return target;
}

size_t Store::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metapb.Store)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional string address = 2;
    if (has_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->address());
    }

    // optional .metapb.StoreState state = 3;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }

  }
  // repeated .metapb.StoreLabel labels = 4;
  {
    unsigned int count = this->labels_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->labels(i));
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Store::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:metapb.Store)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Store* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Store>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:metapb.Store)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:metapb.Store)
    UnsafeMergeFrom(*source);
  }
}

void Store::MergeFrom(const Store& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metapb.Store)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Store::UnsafeMergeFrom(const Store& from) {
  GOOGLE_DCHECK(&from != this);
  labels_.MergeFrom(from.labels_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_address()) {
      set_has_address();
      address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void Store::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:metapb.Store)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Store::CopyFrom(const Store& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metapb.Store)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Store::IsInitialized() const {

  return true;
}

void Store::Swap(Store* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Store::InternalSwap(Store* other) {
  std::swap(id_, other->id_);
  address_.Swap(&other->address_);
  std::swap(state_, other->state_);
  labels_.UnsafeArenaSwap(&other->labels_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Store::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Store_descriptor_;
  metadata.reflection = Store_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Store

// optional uint64 id = 1;
bool Store::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Store::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void Store::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void Store::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
::google::protobuf::uint64 Store::id() const {
  // @@protoc_insertion_point(field_get:metapb.Store.id)
  return id_;
}
void Store::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:metapb.Store.id)
}

// optional string address = 2;
bool Store::has_address() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Store::set_has_address() {
  _has_bits_[0] |= 0x00000002u;
}
void Store::clear_has_address() {
  _has_bits_[0] &= ~0x00000002u;
}
void Store::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_address();
}
const ::std::string& Store::address() const {
  // @@protoc_insertion_point(field_get:metapb.Store.address)
  return address_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Store::set_address(const ::std::string& value) {
  set_has_address();
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metapb.Store.address)
}
void Store::set_address(const char* value) {
  set_has_address();
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metapb.Store.address)
}
void Store::set_address(const char* value, size_t size) {
  set_has_address();
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metapb.Store.address)
}
::std::string* Store::mutable_address() {
  set_has_address();
  // @@protoc_insertion_point(field_mutable:metapb.Store.address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Store::release_address() {
  // @@protoc_insertion_point(field_release:metapb.Store.address)
  clear_has_address();
  return address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Store::set_allocated_address(::std::string* address) {
  if (address != NULL) {
    set_has_address();
  } else {
    clear_has_address();
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:metapb.Store.address)
}

// optional .metapb.StoreState state = 3;
bool Store::has_state() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Store::set_has_state() {
  _has_bits_[0] |= 0x00000004u;
}
void Store::clear_has_state() {
  _has_bits_[0] &= ~0x00000004u;
}
void Store::clear_state() {
  state_ = 0;
  clear_has_state();
}
::metapb::StoreState Store::state() const {
  // @@protoc_insertion_point(field_get:metapb.Store.state)
  return static_cast< ::metapb::StoreState >(state_);
}
void Store::set_state(::metapb::StoreState value) {
  assert(::metapb::StoreState_IsValid(value));
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:metapb.Store.state)
}

// repeated .metapb.StoreLabel labels = 4;
int Store::labels_size() const {
  return labels_.size();
}
void Store::clear_labels() {
  labels_.Clear();
}
const ::metapb::StoreLabel& Store::labels(int index) const {
  // @@protoc_insertion_point(field_get:metapb.Store.labels)
  return labels_.Get(index);
}
::metapb::StoreLabel* Store::mutable_labels(int index) {
  // @@protoc_insertion_point(field_mutable:metapb.Store.labels)
  return labels_.Mutable(index);
}
::metapb::StoreLabel* Store::add_labels() {
  // @@protoc_insertion_point(field_add:metapb.Store.labels)
  return labels_.Add();
}
::google::protobuf::RepeatedPtrField< ::metapb::StoreLabel >*
Store::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_list:metapb.Store.labels)
  return &labels_;
}
const ::google::protobuf::RepeatedPtrField< ::metapb::StoreLabel >&
Store::labels() const {
  // @@protoc_insertion_point(field_list:metapb.Store.labels)
  return labels_;
}

inline const Store* Store::internal_default_instance() {
  return &Store_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RegionEpoch::kConfVerFieldNumber;
const int RegionEpoch::kVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RegionEpoch::RegionEpoch()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_metapb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:metapb.RegionEpoch)
}

void RegionEpoch::InitAsDefaultInstance() {
}

RegionEpoch::RegionEpoch(const RegionEpoch& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:metapb.RegionEpoch)
}

void RegionEpoch::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&conf_ver_, 0, reinterpret_cast<char*>(&version_) -
    reinterpret_cast<char*>(&conf_ver_) + sizeof(version_));
}

RegionEpoch::~RegionEpoch() {
  // @@protoc_insertion_point(destructor:metapb.RegionEpoch)
  SharedDtor();
}

void RegionEpoch::SharedDtor() {
}

void RegionEpoch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegionEpoch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegionEpoch_descriptor_;
}

const RegionEpoch& RegionEpoch::default_instance() {
  protobuf_InitDefaults_metapb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<RegionEpoch> RegionEpoch_default_instance_;

RegionEpoch* RegionEpoch::New(::google::protobuf::Arena* arena) const {
  RegionEpoch* n = new RegionEpoch;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RegionEpoch::Clear() {
// @@protoc_insertion_point(message_clear_start:metapb.RegionEpoch)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(RegionEpoch, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<RegionEpoch*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(conf_ver_, version_);

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RegionEpoch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:metapb.RegionEpoch)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 conf_ver = 1;
      case 1: {
        if (tag == 8) {
          set_has_conf_ver();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &conf_ver_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_version;
        break;
      }

      // optional uint64 version = 2;
      case 2: {
        if (tag == 16) {
         parse_version:
          set_has_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metapb.RegionEpoch)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metapb.RegionEpoch)
  return false;
#undef DO_
}

void RegionEpoch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metapb.RegionEpoch)
  // optional uint64 conf_ver = 1;
  if (has_conf_ver()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->conf_ver(), output);
  }

  // optional uint64 version = 2;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->version(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:metapb.RegionEpoch)
}

::google::protobuf::uint8* RegionEpoch::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:metapb.RegionEpoch)
  // optional uint64 conf_ver = 1;
  if (has_conf_ver()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->conf_ver(), target);
  }

  // optional uint64 version = 2;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->version(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metapb.RegionEpoch)
  return target;
}

size_t RegionEpoch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metapb.RegionEpoch)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional uint64 conf_ver = 1;
    if (has_conf_ver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->conf_ver());
    }

    // optional uint64 version = 2;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->version());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegionEpoch::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:metapb.RegionEpoch)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RegionEpoch* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RegionEpoch>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:metapb.RegionEpoch)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:metapb.RegionEpoch)
    UnsafeMergeFrom(*source);
  }
}

void RegionEpoch::MergeFrom(const RegionEpoch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metapb.RegionEpoch)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void RegionEpoch::UnsafeMergeFrom(const RegionEpoch& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_conf_ver()) {
      set_conf_ver(from.conf_ver());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void RegionEpoch::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:metapb.RegionEpoch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegionEpoch::CopyFrom(const RegionEpoch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metapb.RegionEpoch)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool RegionEpoch::IsInitialized() const {

  return true;
}

void RegionEpoch::Swap(RegionEpoch* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RegionEpoch::InternalSwap(RegionEpoch* other) {
  std::swap(conf_ver_, other->conf_ver_);
  std::swap(version_, other->version_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RegionEpoch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RegionEpoch_descriptor_;
  metadata.reflection = RegionEpoch_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RegionEpoch

// optional uint64 conf_ver = 1;
bool RegionEpoch::has_conf_ver() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RegionEpoch::set_has_conf_ver() {
  _has_bits_[0] |= 0x00000001u;
}
void RegionEpoch::clear_has_conf_ver() {
  _has_bits_[0] &= ~0x00000001u;
}
void RegionEpoch::clear_conf_ver() {
  conf_ver_ = GOOGLE_ULONGLONG(0);
  clear_has_conf_ver();
}
::google::protobuf::uint64 RegionEpoch::conf_ver() const {
  // @@protoc_insertion_point(field_get:metapb.RegionEpoch.conf_ver)
  return conf_ver_;
}
void RegionEpoch::set_conf_ver(::google::protobuf::uint64 value) {
  set_has_conf_ver();
  conf_ver_ = value;
  // @@protoc_insertion_point(field_set:metapb.RegionEpoch.conf_ver)
}

// optional uint64 version = 2;
bool RegionEpoch::has_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RegionEpoch::set_has_version() {
  _has_bits_[0] |= 0x00000002u;
}
void RegionEpoch::clear_has_version() {
  _has_bits_[0] &= ~0x00000002u;
}
void RegionEpoch::clear_version() {
  version_ = GOOGLE_ULONGLONG(0);
  clear_has_version();
}
::google::protobuf::uint64 RegionEpoch::version() const {
  // @@protoc_insertion_point(field_get:metapb.RegionEpoch.version)
  return version_;
}
void RegionEpoch::set_version(::google::protobuf::uint64 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:metapb.RegionEpoch.version)
}

inline const RegionEpoch* RegionEpoch::internal_default_instance() {
  return &RegionEpoch_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Region::kIdFieldNumber;
const int Region::kStartKeyFieldNumber;
const int Region::kEndKeyFieldNumber;
const int Region::kRegionEpochFieldNumber;
const int Region::kPeersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Region::Region()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_metapb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:metapb.Region)
}

void Region::InitAsDefaultInstance() {
  region_epoch_ = const_cast< ::metapb::RegionEpoch*>(
      ::metapb::RegionEpoch::internal_default_instance());
}

Region::Region(const Region& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:metapb.Region)
}

void Region::SharedCtor() {
  _cached_size_ = 0;
  start_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  region_epoch_ = NULL;
  id_ = GOOGLE_ULONGLONG(0);
}

Region::~Region() {
  // @@protoc_insertion_point(destructor:metapb.Region)
  SharedDtor();
}

void Region::SharedDtor() {
  start_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != &Region_default_instance_.get()) {
    delete region_epoch_;
  }
}

void Region::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Region::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Region_descriptor_;
}

const Region& Region::default_instance() {
  protobuf_InitDefaults_metapb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Region> Region_default_instance_;

Region* Region::New(::google::protobuf::Arena* arena) const {
  Region* n = new Region;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Region::Clear() {
// @@protoc_insertion_point(message_clear_start:metapb.Region)
  if (_has_bits_[0 / 32] & 15u) {
    id_ = GOOGLE_ULONGLONG(0);
    if (has_start_key()) {
      start_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_end_key()) {
      end_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_region_epoch()) {
      if (region_epoch_ != NULL) region_epoch_->::metapb::RegionEpoch::Clear();
    }
  }
  peers_.Clear();
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Region::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:metapb.Region)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (tag == 8) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_start_key;
        break;
      }

      // optional bytes start_key = 2;
      case 2: {
        if (tag == 18) {
         parse_start_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_start_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_end_key;
        break;
      }

      // optional bytes end_key = 3;
      case 3: {
        if (tag == 26) {
         parse_end_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_end_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_region_epoch;
        break;
      }

      // optional .metapb.RegionEpoch region_epoch = 4;
      case 4: {
        if (tag == 34) {
         parse_region_epoch:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_region_epoch()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_peers;
        break;
      }

      // repeated .metapb.Peer peers = 5;
      case 5: {
        if (tag == 42) {
         parse_peers:
          DO_(input->IncrementRecursionDepth());
         parse_loop_peers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_peers()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_loop_peers;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metapb.Region)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metapb.Region)
  return false;
#undef DO_
}

void Region::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metapb.Region)
  // optional uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional bytes start_key = 2;
  if (has_start_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->start_key(), output);
  }

  // optional bytes end_key = 3;
  if (has_end_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->end_key(), output);
  }

  // optional .metapb.RegionEpoch region_epoch = 4;
  if (has_region_epoch()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->region_epoch_, output);
  }

  // repeated .metapb.Peer peers = 5;
  for (unsigned int i = 0, n = this->peers_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->peers(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:metapb.Region)
}

::google::protobuf::uint8* Region::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:metapb.Region)
  // optional uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional bytes start_key = 2;
  if (has_start_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->start_key(), target);
  }

  // optional bytes end_key = 3;
  if (has_end_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->end_key(), target);
  }

  // optional .metapb.RegionEpoch region_epoch = 4;
  if (has_region_epoch()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->region_epoch_, false, target);
  }

  // repeated .metapb.Peer peers = 5;
  for (unsigned int i = 0, n = this->peers_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->peers(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metapb.Region)
  return target;
}

size_t Region::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metapb.Region)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 15u) {
    // optional uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional bytes start_key = 2;
    if (has_start_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->start_key());
    }

    // optional bytes end_key = 3;
    if (has_end_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->end_key());
    }

    // optional .metapb.RegionEpoch region_epoch = 4;
    if (has_region_epoch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->region_epoch_);
    }

  }
  // repeated .metapb.Peer peers = 5;
  {
    unsigned int count = this->peers_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->peers(i));
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Region::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:metapb.Region)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Region* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Region>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:metapb.Region)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:metapb.Region)
    UnsafeMergeFrom(*source);
  }
}

void Region::MergeFrom(const Region& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metapb.Region)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Region::UnsafeMergeFrom(const Region& from) {
  GOOGLE_DCHECK(&from != this);
  peers_.MergeFrom(from.peers_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_start_key()) {
      set_has_start_key();
      start_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.start_key_);
    }
    if (from.has_end_key()) {
      set_has_end_key();
      end_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.end_key_);
    }
    if (from.has_region_epoch()) {
      mutable_region_epoch()->::metapb::RegionEpoch::MergeFrom(from.region_epoch());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void Region::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:metapb.Region)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Region::CopyFrom(const Region& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metapb.Region)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Region::IsInitialized() const {

  return true;
}

void Region::Swap(Region* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Region::InternalSwap(Region* other) {
  std::swap(id_, other->id_);
  start_key_.Swap(&other->start_key_);
  end_key_.Swap(&other->end_key_);
  std::swap(region_epoch_, other->region_epoch_);
  peers_.UnsafeArenaSwap(&other->peers_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Region::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Region_descriptor_;
  metadata.reflection = Region_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Region

// optional uint64 id = 1;
bool Region::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Region::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void Region::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void Region::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
::google::protobuf::uint64 Region::id() const {
  // @@protoc_insertion_point(field_get:metapb.Region.id)
  return id_;
}
void Region::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:metapb.Region.id)
}

// optional bytes start_key = 2;
bool Region::has_start_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Region::set_has_start_key() {
  _has_bits_[0] |= 0x00000002u;
}
void Region::clear_has_start_key() {
  _has_bits_[0] &= ~0x00000002u;
}
void Region::clear_start_key() {
  start_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_start_key();
}
const ::std::string& Region::start_key() const {
  // @@protoc_insertion_point(field_get:metapb.Region.start_key)
  return start_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Region::set_start_key(const ::std::string& value) {
  set_has_start_key();
  start_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metapb.Region.start_key)
}
void Region::set_start_key(const char* value) {
  set_has_start_key();
  start_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metapb.Region.start_key)
}
void Region::set_start_key(const void* value, size_t size) {
  set_has_start_key();
  start_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metapb.Region.start_key)
}
::std::string* Region::mutable_start_key() {
  set_has_start_key();
  // @@protoc_insertion_point(field_mutable:metapb.Region.start_key)
  return start_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Region::release_start_key() {
  // @@protoc_insertion_point(field_release:metapb.Region.start_key)
  clear_has_start_key();
  return start_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Region::set_allocated_start_key(::std::string* start_key) {
  if (start_key != NULL) {
    set_has_start_key();
  } else {
    clear_has_start_key();
  }
  start_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), start_key);
  // @@protoc_insertion_point(field_set_allocated:metapb.Region.start_key)
}

// optional bytes end_key = 3;
bool Region::has_end_key() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Region::set_has_end_key() {
  _has_bits_[0] |= 0x00000004u;
}
void Region::clear_has_end_key() {
  _has_bits_[0] &= ~0x00000004u;
}
void Region::clear_end_key() {
  end_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_end_key();
}
const ::std::string& Region::end_key() const {
  // @@protoc_insertion_point(field_get:metapb.Region.end_key)
  return end_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Region::set_end_key(const ::std::string& value) {
  set_has_end_key();
  end_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metapb.Region.end_key)
}
void Region::set_end_key(const char* value) {
  set_has_end_key();
  end_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metapb.Region.end_key)
}
void Region::set_end_key(const void* value, size_t size) {
  set_has_end_key();
  end_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metapb.Region.end_key)
}
::std::string* Region::mutable_end_key() {
  set_has_end_key();
  // @@protoc_insertion_point(field_mutable:metapb.Region.end_key)
  return end_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Region::release_end_key() {
  // @@protoc_insertion_point(field_release:metapb.Region.end_key)
  clear_has_end_key();
  return end_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Region::set_allocated_end_key(::std::string* end_key) {
  if (end_key != NULL) {
    set_has_end_key();
  } else {
    clear_has_end_key();
  }
  end_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), end_key);
  // @@protoc_insertion_point(field_set_allocated:metapb.Region.end_key)
}

// optional .metapb.RegionEpoch region_epoch = 4;
bool Region::has_region_epoch() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Region::set_has_region_epoch() {
  _has_bits_[0] |= 0x00000008u;
}
void Region::clear_has_region_epoch() {
  _has_bits_[0] &= ~0x00000008u;
}
void Region::clear_region_epoch() {
  if (region_epoch_ != NULL) region_epoch_->::metapb::RegionEpoch::Clear();
  clear_has_region_epoch();
}
const ::metapb::RegionEpoch& Region::region_epoch() const {
  // @@protoc_insertion_point(field_get:metapb.Region.region_epoch)
  return region_epoch_ != NULL ? *region_epoch_
                         : *::metapb::RegionEpoch::internal_default_instance();
}
::metapb::RegionEpoch* Region::mutable_region_epoch() {
  set_has_region_epoch();
  if (region_epoch_ == NULL) {
    region_epoch_ = new ::metapb::RegionEpoch;
  }
  // @@protoc_insertion_point(field_mutable:metapb.Region.region_epoch)
  return region_epoch_;
}
::metapb::RegionEpoch* Region::release_region_epoch() {
  // @@protoc_insertion_point(field_release:metapb.Region.region_epoch)
  clear_has_region_epoch();
  ::metapb::RegionEpoch* temp = region_epoch_;
  region_epoch_ = NULL;
  return temp;
}
void Region::set_allocated_region_epoch(::metapb::RegionEpoch* region_epoch) {
  delete region_epoch_;
  region_epoch_ = region_epoch;
  if (region_epoch) {
    set_has_region_epoch();
  } else {
    clear_has_region_epoch();
  }
  // @@protoc_insertion_point(field_set_allocated:metapb.Region.region_epoch)
}

// repeated .metapb.Peer peers = 5;
int Region::peers_size() const {
  return peers_.size();
}
void Region::clear_peers() {
  peers_.Clear();
}
const ::metapb::Peer& Region::peers(int index) const {
  // @@protoc_insertion_point(field_get:metapb.Region.peers)
  return peers_.Get(index);
}
::metapb::Peer* Region::mutable_peers(int index) {
  // @@protoc_insertion_point(field_mutable:metapb.Region.peers)
  return peers_.Mutable(index);
}
::metapb::Peer* Region::add_peers() {
  // @@protoc_insertion_point(field_add:metapb.Region.peers)
  return peers_.Add();
}
::google::protobuf::RepeatedPtrField< ::metapb::Peer >*
Region::mutable_peers() {
  // @@protoc_insertion_point(field_mutable_list:metapb.Region.peers)
  return &peers_;
}
const ::google::protobuf::RepeatedPtrField< ::metapb::Peer >&
Region::peers() const {
  // @@protoc_insertion_point(field_list:metapb.Region.peers)
  return peers_;
}

inline const Region* Region::internal_default_instance() {
  return &Region_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Peer::kIdFieldNumber;
const int Peer::kStoreIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Peer::Peer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_metapb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:metapb.Peer)
}

void Peer::InitAsDefaultInstance() {
}

Peer::Peer(const Peer& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:metapb.Peer)
}

void Peer::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&id_, 0, reinterpret_cast<char*>(&store_id_) -
    reinterpret_cast<char*>(&id_) + sizeof(store_id_));
}

Peer::~Peer() {
  // @@protoc_insertion_point(destructor:metapb.Peer)
  SharedDtor();
}

void Peer::SharedDtor() {
}

void Peer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Peer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Peer_descriptor_;
}

const Peer& Peer::default_instance() {
  protobuf_InitDefaults_metapb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Peer> Peer_default_instance_;

Peer* Peer::New(::google::protobuf::Arena* arena) const {
  Peer* n = new Peer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Peer::Clear() {
// @@protoc_insertion_point(message_clear_start:metapb.Peer)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Peer, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Peer*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(id_, store_id_);

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Peer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:metapb.Peer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (tag == 8) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_store_id;
        break;
      }

      // optional uint64 store_id = 2;
      case 2: {
        if (tag == 16) {
         parse_store_id:
          set_has_store_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &store_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metapb.Peer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metapb.Peer)
  return false;
#undef DO_
}

void Peer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metapb.Peer)
  // optional uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional uint64 store_id = 2;
  if (has_store_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->store_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:metapb.Peer)
}

::google::protobuf::uint8* Peer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:metapb.Peer)
  // optional uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional uint64 store_id = 2;
  if (has_store_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->store_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metapb.Peer)
  return target;
}

size_t Peer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metapb.Peer)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional uint64 store_id = 2;
    if (has_store_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->store_id());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Peer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:metapb.Peer)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Peer* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Peer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:metapb.Peer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:metapb.Peer)
    UnsafeMergeFrom(*source);
  }
}

void Peer::MergeFrom(const Peer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metapb.Peer)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Peer::UnsafeMergeFrom(const Peer& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_store_id()) {
      set_store_id(from.store_id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void Peer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:metapb.Peer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Peer::CopyFrom(const Peer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metapb.Peer)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Peer::IsInitialized() const {

  return true;
}

void Peer::Swap(Peer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Peer::InternalSwap(Peer* other) {
  std::swap(id_, other->id_);
  std::swap(store_id_, other->store_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Peer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Peer_descriptor_;
  metadata.reflection = Peer_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Peer

// optional uint64 id = 1;
bool Peer::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Peer::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void Peer::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void Peer::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
::google::protobuf::uint64 Peer::id() const {
  // @@protoc_insertion_point(field_get:metapb.Peer.id)
  return id_;
}
void Peer::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:metapb.Peer.id)
}

// optional uint64 store_id = 2;
bool Peer::has_store_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Peer::set_has_store_id() {
  _has_bits_[0] |= 0x00000002u;
}
void Peer::clear_has_store_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void Peer::clear_store_id() {
  store_id_ = GOOGLE_ULONGLONG(0);
  clear_has_store_id();
}
::google::protobuf::uint64 Peer::store_id() const {
  // @@protoc_insertion_point(field_get:metapb.Peer.store_id)
  return store_id_;
}
void Peer::set_store_id(::google::protobuf::uint64 value) {
  set_has_store_id();
  store_id_ = value;
  // @@protoc_insertion_point(field_set:metapb.Peer.store_id)
}

inline const Peer* Peer::internal_default_instance() {
  return &Peer_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace metapb

// @@protoc_insertion_point(global_scope)
